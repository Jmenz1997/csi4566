
Partie2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cc8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd0  08004fd0  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd0  08004fd0  00014fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fd8  08004fd8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d0  20000010  08004ff0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049e0  08004ff0  000249e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121dd  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c0a  00000000  00000000  00032260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  00035d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b77  00000000  00000000  0003692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011231  00000000  00000000  000394a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d232f  00000000  00000000  0004a6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e18  00000000  00000000  0011ca04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0012081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004e80 	.word	0x08004e80

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004e80 	.word	0x08004e80

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fac6 	bl	8000aa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f85e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8f8 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8cc 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f001 ff26 	bl	8002370 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <main+0x80>)
 8000526:	2100      	movs	r1, #0
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <main+0x84>)
 800052a:	f001 ff6b 	bl	8002404 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <main+0x88>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <main+0x8c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <main+0x90>)
 800053a:	f001 ff63 	bl	8002404 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <main+0x98>)
 8000546:	2100      	movs	r1, #0
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <main+0x9c>)
 800054a:	f001 ff5b 	bl	8002404 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <main+0xa8>)
 800055a:	f001 ff53 	bl	8002404 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <main+0xac>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <main+0xb0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0xb4>)
 800056a:	f001 ff4b 	bl	8002404 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0xb8>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(StartTask6, NULL, &Task6_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <main+0xbc>)
 8000576:	2100      	movs	r1, #0
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <main+0xc0>)
 800057a:	f001 ff43 	bl	8002404 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <main+0xc4>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f001 ff18 	bl	80023b8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x7c>
 800058a:	bf00      	nop
 800058c:	08004ee0 	.word	0x08004ee0
 8000590:	080007e9 	.word	0x080007e9
 8000594:	20000074 	.word	0x20000074
 8000598:	08004f04 	.word	0x08004f04
 800059c:	0800081d 	.word	0x0800081d
 80005a0:	20000078 	.word	0x20000078
 80005a4:	08004f28 	.word	0x08004f28
 80005a8:	08000845 	.word	0x08000845
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	08004f4c 	.word	0x08004f4c
 80005b4:	0800086d 	.word	0x0800086d
 80005b8:	20000080 	.word	0x20000080
 80005bc:	08004f70 	.word	0x08004f70
 80005c0:	08000895 	.word	0x08000895
 80005c4:	20000084 	.word	0x20000084
 80005c8:	08004f94 	.word	0x08004f94
 80005cc:	080008bd 	.word	0x080008bd
 80005d0:	20000088 	.word	0x20000088

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fc12 	bl	8004e0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f8f1 	bl	8001844 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f940 	bl	80008ec <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f000 fd50 	bl	8001110 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 f939 	bl	80008ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fd89 	bl	80011b0 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a4:	f000 f922 	bl	80008ec <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fb46 	bl	8001d80 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f8f7 	bl	80008ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2d      	ldr	r3, [pc, #180]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2c      	ldr	r2, [pc, #176]	; (80007dc <MX_GPIO_Init+0xd0>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2a      	ldr	r3, [pc, #168]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b26      	ldr	r3, [pc, #152]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a25      	ldr	r2, [pc, #148]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b23      	ldr	r3, [pc, #140]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b1f      	ldr	r3, [pc, #124]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1e      	ldr	r2, [pc, #120]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1c      	ldr	r3, [pc, #112]	; (80007dc <MX_GPIO_Init+0xd0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_GPIO_Init+0xd0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a17      	ldr	r2, [pc, #92]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_GPIO_Init+0xd0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000792:	2200      	movs	r2, #0
 8000794:	21f8      	movs	r1, #248	; 0xf8
 8000796:	4812      	ldr	r0, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000798:	f000 fc86 	bl	80010a8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007aa:	f107 0314 	add.w	r3, r7, #20
 80007ae:	4619      	mov	r1, r3
 80007b0:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007b2:	f000 facd 	bl	8000d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007b6:	23f8      	movs	r3, #248	; 0xf8
 80007b8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4804      	ldr	r0, [pc, #16]	; (80007e0 <MX_GPIO_Init+0xd4>)
 80007ce:	f000 fabf 	bl	8000d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	3728      	adds	r7, #40	; 0x28
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020400 	.word	0x40020400
 80007e4:	40020800 	.word	0x40020800

080007e8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {
	  // for btn press HAL_GPIO_ReadPin(GPIOC_ GPIO_PIN_13)

	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 80007f0:	e007      	b.n	8000802 <StartTask1+0x1a>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007f2:	2108      	movs	r1, #8
 80007f4:	4807      	ldr	r0, [pc, #28]	; (8000814 <StartTask1+0x2c>)
 80007f6:	f000 fc70 	bl	80010da <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <StartTask1+0x2c>)
 80007fe:	f000 fc6c 	bl	80010da <HAL_GPIO_TogglePin>
	  while(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){
 8000802:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000806:	4804      	ldr	r0, [pc, #16]	; (8000818 <StartTask1+0x30>)
 8000808:	f000 fc36 	bl	8001078 <HAL_GPIO_ReadPin>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0ef      	beq.n	80007f2 <StartTask1+0xa>
 8000812:	e7f6      	b.n	8000802 <StartTask1+0x1a>
 8000814:	40020400 	.word	0x40020400
 8000818:	40020800 	.word	0x40020800

0800081c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000824:	2110      	movs	r1, #16
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <StartTask2+0x24>)
 8000828:	f000 fc57 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	4804      	ldr	r0, [pc, #16]	; (8000840 <StartTask2+0x24>)
 8000830:	f000 fc53 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(3000);
 8000834:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000838:	f001 fe76 	bl	8002528 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 800083c:	e7f2      	b.n	8000824 <StartTask2+0x8>
 800083e:	bf00      	nop
 8000840:	40020400 	.word	0x40020400

08000844 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800084c:	2120      	movs	r1, #32
 800084e:	4806      	ldr	r0, [pc, #24]	; (8000868 <StartTask3+0x24>)
 8000850:	f000 fc43 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <StartTask3+0x24>)
 8000858:	f000 fc3f 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800085c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000860:	f001 fe62 	bl	8002528 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000864:	e7f2      	b.n	800084c <StartTask3+0x8>
 8000866:	bf00      	nop
 8000868:	40020400 	.word	0x40020400

0800086c <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask4 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 8000874:	2120      	movs	r1, #32
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <StartTask4+0x24>)
 8000878:	f000 fc2f 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4804      	ldr	r0, [pc, #16]	; (8000890 <StartTask4+0x24>)
 8000880:	f000 fc2b 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(10000);
 8000884:	f242 7010 	movw	r0, #10000	; 0x2710
 8000888:	f001 fe4e 	bl	8002528 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800088c:	e7f2      	b.n	8000874 <StartTask4+0x8>
 800088e:	bf00      	nop
 8000890:	40020400 	.word	0x40020400

08000894 <StartTask5>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5 */
void StartTask5(void *argument)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 800089c:	2120      	movs	r1, #32
 800089e:	4806      	ldr	r0, [pc, #24]	; (80008b8 <StartTask5+0x24>)
 80008a0:	f000 fc1b 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <StartTask5+0x24>)
 80008a8:	f000 fc17 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80008ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008b0:	f001 fe3a 	bl	8002528 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008b4:	e7f2      	b.n	800089c <StartTask5+0x8>
 80008b6:	bf00      	nop
 80008b8:	40020400 	.word	0x40020400

080008bc <StartTask6>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask6 */
void StartTask6(void *argument)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask6 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008c4:	2120      	movs	r1, #32
 80008c6:	4808      	ldr	r0, [pc, #32]	; (80008e8 <StartTask6+0x2c>)
 80008c8:	f000 fc07 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 80008cc:	2110      	movs	r1, #16
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <StartTask6+0x2c>)
 80008d0:	f000 fc03 	bl	80010da <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4804      	ldr	r0, [pc, #16]	; (80008e8 <StartTask6+0x2c>)
 80008d8:	f000 fbff 	bl	80010da <HAL_GPIO_TogglePin>
	  osDelay(2000);
 80008dc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80008e0:	f001 fe22 	bl	8002528 <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008e4:	e7ee      	b.n	80008c4 <StartTask6+0x8>
 80008e6:	bf00      	nop
 80008e8:	40020400 	.word	0x40020400

080008ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f0:	b672      	cpsid	i
}
 80008f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <Error_Handler+0x8>
	...

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
 8000902:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000906:	4a11      	ldr	r2, [pc, #68]	; (800094c <HAL_MspInit+0x54>)
 8000908:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800090c:	6453      	str	r3, [r2, #68]	; 0x44
 800090e:	4b0f      	ldr	r3, [pc, #60]	; (800094c <HAL_MspInit+0x54>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000916:	607b      	str	r3, [r7, #4]
 8000918:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	603b      	str	r3, [r7, #0]
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <HAL_MspInit+0x54>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6413      	str	r3, [r2, #64]	; 0x40
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <HAL_MspInit+0x54>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000936:	2200      	movs	r2, #0
 8000938:	210f      	movs	r1, #15
 800093a:	f06f 0001 	mvn.w	r0, #1
 800093e:	f000 f9de 	bl	8000cfe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800

08000950 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b08a      	sub	sp, #40	; 0x28
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0314 	add.w	r3, r7, #20
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a19      	ldr	r2, [pc, #100]	; (80009d4 <HAL_UART_MspInit+0x84>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d12b      	bne.n	80009ca <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	613b      	str	r3, [r7, #16]
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <HAL_UART_MspInit+0x88>)
 800097c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000980:	6413      	str	r3, [r2, #64]	; 0x40
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800098a:	613b      	str	r3, [r7, #16]
 800098c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <HAL_UART_MspInit+0x88>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_UART_MspInit+0x88>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	60fb      	str	r3, [r7, #12]
 80009a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009aa:	230c      	movs	r3, #12
 80009ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ba:	2307      	movs	r3, #7
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4619      	mov	r1, r3
 80009c4:	4805      	ldr	r0, [pc, #20]	; (80009dc <HAL_UART_MspInit+0x8c>)
 80009c6:	f000 f9c3 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009ca:	bf00      	nop
 80009cc:	3728      	adds	r7, #40	; 0x28
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40020000 	.word	0x40020000

080009e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009e4:	e7fe      	b.n	80009e4 <NMI_Handler+0x4>

080009e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <HardFault_Handler+0x4>

080009ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <MemManage_Handler+0x4>

080009f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f6:	e7fe      	b.n	80009f6 <BusFault_Handler+0x4>

080009f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <UsageFault_Handler+0x4>

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a10:	f000 f898 	bl	8000b44 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a14:	f003 f996 	bl	8003d44 <xTaskGetSchedulerState>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d001      	beq.n	8000a22 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a1e:	f003 ff7b 	bl	8004918 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <SystemInit+0x20>)
 8000a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a32:	4a05      	ldr	r2, [pc, #20]	; (8000a48 <SystemInit+0x20>)
 8000a34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a84 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a50:	f7ff ffea 	bl	8000a28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a54:	480c      	ldr	r0, [pc, #48]	; (8000a88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a56:	490d      	ldr	r1, [pc, #52]	; (8000a8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a5c:	e002      	b.n	8000a64 <LoopCopyDataInit>

08000a5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a62:	3304      	adds	r3, #4

08000a64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a68:	d3f9      	bcc.n	8000a5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a6c:	4c0a      	ldr	r4, [pc, #40]	; (8000a98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a70:	e001      	b.n	8000a76 <LoopFillZerobss>

08000a72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a74:	3204      	adds	r2, #4

08000a76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a78:	d3fb      	bcc.n	8000a72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a7a:	f004 f9cf 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a7e:	f7ff fd45 	bl	800050c <main>
  bx  lr    
 8000a82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a84:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a8c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a90:	08004fe0 	.word	0x08004fe0
  ldr r2, =_sbss
 8000a94:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a98:	200049e0 	.word	0x200049e0

08000a9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a9c:	e7fe      	b.n	8000a9c <ADC_IRQHandler>
	...

08000aa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_Init+0x40>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <HAL_Init+0x40>)
 8000aaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000aae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <HAL_Init+0x40>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_Init+0x40>)
 8000ab6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000aba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abc:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <HAL_Init+0x40>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <HAL_Init+0x40>)
 8000ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ac6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac8:	2003      	movs	r0, #3
 8000aca:	f000 f90d 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ace:	200f      	movs	r0, #15
 8000ad0:	f000 f808 	bl	8000ae4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ad4:	f7ff ff10 	bl	80008f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023c00 	.word	0x40023c00

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <HAL_InitTick+0x54>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_InitTick+0x58>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	4619      	mov	r1, r3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000afe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f917 	bl	8000d36 <HAL_SYSTICK_Config>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	e00e      	b.n	8000b30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2b0f      	cmp	r3, #15
 8000b16:	d80a      	bhi.n	8000b2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	6879      	ldr	r1, [r7, #4]
 8000b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b20:	f000 f8ed 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b24:	4a06      	ldr	r2, [pc, #24]	; (8000b40 <HAL_InitTick+0x5c>)
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e000      	b.n	8000b30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b2e:	2301      	movs	r3, #1
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	2000008c 	.word	0x2000008c

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	2000008c 	.word	0x2000008c

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e165      	b.n	8001038 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 8154 	bne.w	8001032 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80ae 	beq.w	8001032 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b5d      	ldr	r3, [pc, #372]	; (8001050 <HAL_GPIO_Init+0x300>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a5c      	ldr	r2, [pc, #368]	; (8001050 <HAL_GPIO_Init+0x300>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b5a      	ldr	r3, [pc, #360]	; (8001050 <HAL_GPIO_Init+0x300>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef2:	4a58      	ldr	r2, [pc, #352]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <HAL_GPIO_Init+0x308>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d025      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4e      	ldr	r2, [pc, #312]	; (800105c <HAL_GPIO_Init+0x30c>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d01f      	beq.n	8000f66 <HAL_GPIO_Init+0x216>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4d      	ldr	r2, [pc, #308]	; (8001060 <HAL_GPIO_Init+0x310>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x212>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4c      	ldr	r2, [pc, #304]	; (8001064 <HAL_GPIO_Init+0x314>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x20e>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4b      	ldr	r2, [pc, #300]	; (8001068 <HAL_GPIO_Init+0x318>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x20a>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4a      	ldr	r2, [pc, #296]	; (800106c <HAL_GPIO_Init+0x31c>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x206>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a49      	ldr	r2, [pc, #292]	; (8001070 <HAL_GPIO_Init+0x320>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x202>
 8000f4e:	2306      	movs	r3, #6
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f52:	2307      	movs	r3, #7
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x21c>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x304>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b3a      	ldr	r3, [pc, #232]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fae:	4a31      	ldr	r2, [pc, #196]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b2f      	ldr	r3, [pc, #188]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd8:	4a26      	ldr	r2, [pc, #152]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fde:	4b25      	ldr	r3, [pc, #148]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001002:	4a1c      	ldr	r2, [pc, #112]	; (8001074 <HAL_GPIO_Init+0x324>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_GPIO_Init+0x324>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102c:	4a11      	ldr	r2, [pc, #68]	; (8001074 <HAL_GPIO_Init+0x324>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f ae96 	bls.w	8000d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40013800 	.word	0x40013800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400
 8001070:	40021800 	.word	0x40021800
 8001074:	40013c00 	.word	0x40013c00

08001078 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691a      	ldr	r2, [r3, #16]
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	4013      	ands	r3, r2
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e001      	b.n	800109a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800109a:	7bfb      	ldrb	r3, [r7, #15]
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	460b      	mov	r3, r1
 80010b2:	807b      	strh	r3, [r7, #2]
 80010b4:	4613      	mov	r3, r2
 80010b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b8:	787b      	ldrb	r3, [r7, #1]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010c4:	e003      	b.n	80010ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010c6:	887b      	ldrh	r3, [r7, #2]
 80010c8:	041a      	lsls	r2, r3, #16
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr

080010da <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010da:	b480      	push	{r7}
 80010dc:	b085      	sub	sp, #20
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	460b      	mov	r3, r1
 80010e4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010ec:	887a      	ldrh	r2, [r7, #2]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4013      	ands	r3, r2
 80010f2:	041a      	lsls	r2, r3, #16
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	887b      	ldrh	r3, [r7, #2]
 80010fa:	400b      	ands	r3, r1
 80010fc:	431a      	orrs	r2, r3
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	619a      	str	r2, [r3, #24]
}
 8001102:	bf00      	nop
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
	...

08001110 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001116:	2300      	movs	r3, #0
 8001118:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 8001124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001128:	6413      	str	r3, [r2, #64]	; 0x40
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <HAL_PWREx_EnableOverDrive+0x90>)
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001132:	603b      	str	r3, [r7, #0]
 8001134:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_PWREx_EnableOverDrive+0x94>)
 8001138:	2201      	movs	r2, #1
 800113a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113c:	f7ff fd16 	bl	8000b6c <HAL_GetTick>
 8001140:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001142:	e009      	b.n	8001158 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001144:	f7ff fd12 	bl	8000b6c <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001152:	d901      	bls.n	8001158 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e01f      	b.n	8001198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001158:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001164:	d1ee      	bne.n	8001144 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <HAL_PWREx_EnableOverDrive+0x9c>)
 8001168:	2201      	movs	r2, #1
 800116a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800116c:	f7ff fcfe 	bl	8000b6c <HAL_GetTick>
 8001170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001172:	e009      	b.n	8001188 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001174:	f7ff fcfa 	bl	8000b6c <HAL_GetTick>
 8001178:	4602      	mov	r2, r0
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001182:	d901      	bls.n	8001188 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e007      	b.n	8001198 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001188:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x98>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001190:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001194:	d1ee      	bne.n	8001174 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40023800 	.word	0x40023800
 80011a4:	420e0040 	.word	0x420e0040
 80011a8:	40007000 	.word	0x40007000
 80011ac:	420e0044 	.word	0x420e0044

080011b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d101      	bne.n	80011c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e0cc      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011c4:	4b68      	ldr	r3, [pc, #416]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 030f 	and.w	r3, r3, #15
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d90c      	bls.n	80011ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011d2:	4b65      	ldr	r3, [pc, #404]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011d4:	683a      	ldr	r2, [r7, #0]
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011da:	4b63      	ldr	r3, [pc, #396]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	683a      	ldr	r2, [r7, #0]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d001      	beq.n	80011ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0b8      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d020      	beq.n	800123a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d005      	beq.n	8001210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001204:	4b59      	ldr	r3, [pc, #356]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	4a58      	ldr	r2, [pc, #352]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800120a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800120e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0308 	and.w	r3, r3, #8
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800121c:	4b53      	ldr	r3, [pc, #332]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a52      	ldr	r2, [pc, #328]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001228:	4b50      	ldr	r3, [pc, #320]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	494d      	ldr	r1, [pc, #308]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	4313      	orrs	r3, r2
 8001238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	2b00      	cmp	r3, #0
 8001244:	d044      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d107      	bne.n	800125e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124e:	4b47      	ldr	r3, [pc, #284]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d119      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e07f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b02      	cmp	r3, #2
 8001264:	d003      	beq.n	800126e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800126a:	2b03      	cmp	r3, #3
 800126c:	d107      	bne.n	800127e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126e:	4b3f      	ldr	r3, [pc, #252]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001276:	2b00      	cmp	r3, #0
 8001278:	d109      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	e06f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127e:	4b3b      	ldr	r3, [pc, #236]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d101      	bne.n	800128e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e067      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128e:	4b37      	ldr	r3, [pc, #220]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f023 0203 	bic.w	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	4934      	ldr	r1, [pc, #208]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800129c:	4313      	orrs	r3, r2
 800129e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012a0:	f7ff fc64 	bl	8000b6c <HAL_GetTick>
 80012a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	e00a      	b.n	80012be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a8:	f7ff fc60 	bl	8000b6c <HAL_GetTick>
 80012ac:	4602      	mov	r2, r0
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d901      	bls.n	80012be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e04f      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	4b2b      	ldr	r3, [pc, #172]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 020c 	and.w	r2, r3, #12
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d1eb      	bne.n	80012a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012d0:	4b25      	ldr	r3, [pc, #148]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 030f 	and.w	r3, r3, #15
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d20c      	bcs.n	80012f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b22      	ldr	r3, [pc, #136]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e032      	b.n	800135e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d008      	beq.n	8001316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	4916      	ldr	r1, [pc, #88]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	4313      	orrs	r3, r2
 8001314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	2b00      	cmp	r3, #0
 8001320:	d009      	beq.n	8001336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001322:	4b12      	ldr	r3, [pc, #72]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	490e      	ldr	r1, [pc, #56]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 8001332:	4313      	orrs	r3, r2
 8001334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001336:	f000 f855 	bl	80013e4 <HAL_RCC_GetSysClockFreq>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <HAL_RCC_ClockConfig+0x1bc>)
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	490a      	ldr	r1, [pc, #40]	; (8001370 <HAL_RCC_ClockConfig+0x1c0>)
 8001348:	5ccb      	ldrb	r3, [r1, r3]
 800134a:	fa22 f303 	lsr.w	r3, r2, r3
 800134e:	4a09      	ldr	r2, [pc, #36]	; (8001374 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <HAL_RCC_ClockConfig+0x1c8>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fbc4 	bl	8000ae4 <HAL_InitTick>

  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40023c00 	.word	0x40023c00
 800136c:	40023800 	.word	0x40023800
 8001370:	08004fb8 	.word	0x08004fb8
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001380:	4b03      	ldr	r3, [pc, #12]	; (8001390 <HAL_RCC_GetHCLKFreq+0x14>)
 8001382:	681b      	ldr	r3, [r3, #0]
}
 8001384:	4618      	mov	r0, r3
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000000 	.word	0x20000000

08001394 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001398:	f7ff fff0 	bl	800137c <HAL_RCC_GetHCLKFreq>
 800139c:	4602      	mov	r2, r0
 800139e:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	0a9b      	lsrs	r3, r3, #10
 80013a4:	f003 0307 	and.w	r3, r3, #7
 80013a8:	4903      	ldr	r1, [pc, #12]	; (80013b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013aa:	5ccb      	ldrb	r3, [r1, r3]
 80013ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40023800 	.word	0x40023800
 80013b8:	08004fc8 	.word	0x08004fc8

080013bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80013c0:	f7ff ffdc 	bl	800137c <HAL_RCC_GetHCLKFreq>
 80013c4:	4602      	mov	r2, r0
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	0b5b      	lsrs	r3, r3, #13
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	4903      	ldr	r1, [pc, #12]	; (80013e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d8:	4618      	mov	r0, r3
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	40023800 	.word	0x40023800
 80013e0:	08004fc8 	.word	0x08004fc8

080013e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013e8:	b0ae      	sub	sp, #184	; 0xb8
 80013ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013f8:	2300      	movs	r3, #0
 80013fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800140a:	4bcb      	ldr	r3, [pc, #812]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b0c      	cmp	r3, #12
 8001414:	f200 8206 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x440>
 8001418:	a201      	add	r2, pc, #4	; (adr r2, 8001420 <HAL_RCC_GetSysClockFreq+0x3c>)
 800141a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800141e:	bf00      	nop
 8001420:	08001455 	.word	0x08001455
 8001424:	08001825 	.word	0x08001825
 8001428:	08001825 	.word	0x08001825
 800142c:	08001825 	.word	0x08001825
 8001430:	0800145d 	.word	0x0800145d
 8001434:	08001825 	.word	0x08001825
 8001438:	08001825 	.word	0x08001825
 800143c:	08001825 	.word	0x08001825
 8001440:	08001465 	.word	0x08001465
 8001444:	08001825 	.word	0x08001825
 8001448:	08001825 	.word	0x08001825
 800144c:	08001825 	.word	0x08001825
 8001450:	08001655 	.word	0x08001655
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001454:	4bb9      	ldr	r3, [pc, #740]	; (800173c <HAL_RCC_GetSysClockFreq+0x358>)
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800145a:	e1e7      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800145c:	4bb8      	ldr	r3, [pc, #736]	; (8001740 <HAL_RCC_GetSysClockFreq+0x35c>)
 800145e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001462:	e1e3      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001464:	4bb4      	ldr	r3, [pc, #720]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800146c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001470:	4bb1      	ldr	r3, [pc, #708]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d071      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800147c:	4bae      	ldr	r3, [pc, #696]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	099b      	lsrs	r3, r3, #6
 8001482:	2200      	movs	r2, #0
 8001484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001488:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800148c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001494:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001498:	2300      	movs	r3, #0
 800149a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800149e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80014a2:	4622      	mov	r2, r4
 80014a4:	462b      	mov	r3, r5
 80014a6:	f04f 0000 	mov.w	r0, #0
 80014aa:	f04f 0100 	mov.w	r1, #0
 80014ae:	0159      	lsls	r1, r3, #5
 80014b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014b4:	0150      	lsls	r0, r2, #5
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	4621      	mov	r1, r4
 80014bc:	1a51      	subs	r1, r2, r1
 80014be:	6439      	str	r1, [r7, #64]	; 0x40
 80014c0:	4629      	mov	r1, r5
 80014c2:	eb63 0301 	sbc.w	r3, r3, r1
 80014c6:	647b      	str	r3, [r7, #68]	; 0x44
 80014c8:	f04f 0200 	mov.w	r2, #0
 80014cc:	f04f 0300 	mov.w	r3, #0
 80014d0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014d4:	4649      	mov	r1, r9
 80014d6:	018b      	lsls	r3, r1, #6
 80014d8:	4641      	mov	r1, r8
 80014da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014de:	4641      	mov	r1, r8
 80014e0:	018a      	lsls	r2, r1, #6
 80014e2:	4641      	mov	r1, r8
 80014e4:	1a51      	subs	r1, r2, r1
 80014e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014e8:	4649      	mov	r1, r9
 80014ea:	eb63 0301 	sbc.w	r3, r3, r1
 80014ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014fc:	4649      	mov	r1, r9
 80014fe:	00cb      	lsls	r3, r1, #3
 8001500:	4641      	mov	r1, r8
 8001502:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001506:	4641      	mov	r1, r8
 8001508:	00ca      	lsls	r2, r1, #3
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	4603      	mov	r3, r0
 8001510:	4622      	mov	r2, r4
 8001512:	189b      	adds	r3, r3, r2
 8001514:	633b      	str	r3, [r7, #48]	; 0x30
 8001516:	462b      	mov	r3, r5
 8001518:	460a      	mov	r2, r1
 800151a:	eb42 0303 	adc.w	r3, r2, r3
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800152c:	4629      	mov	r1, r5
 800152e:	024b      	lsls	r3, r1, #9
 8001530:	4621      	mov	r1, r4
 8001532:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001536:	4621      	mov	r1, r4
 8001538:	024a      	lsls	r2, r1, #9
 800153a:	4610      	mov	r0, r2
 800153c:	4619      	mov	r1, r3
 800153e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001542:	2200      	movs	r2, #0
 8001544:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001548:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800154c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001550:	f7fe fe5e 	bl	8000210 <__aeabi_uldivmod>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4613      	mov	r3, r2
 800155a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800155e:	e067      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001560:	4b75      	ldr	r3, [pc, #468]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	2200      	movs	r2, #0
 8001568:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800156c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001570:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001578:	67bb      	str	r3, [r7, #120]	; 0x78
 800157a:	2300      	movs	r3, #0
 800157c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800157e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001582:	4622      	mov	r2, r4
 8001584:	462b      	mov	r3, r5
 8001586:	f04f 0000 	mov.w	r0, #0
 800158a:	f04f 0100 	mov.w	r1, #0
 800158e:	0159      	lsls	r1, r3, #5
 8001590:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001594:	0150      	lsls	r0, r2, #5
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4621      	mov	r1, r4
 800159c:	1a51      	subs	r1, r2, r1
 800159e:	62b9      	str	r1, [r7, #40]	; 0x28
 80015a0:	4629      	mov	r1, r5
 80015a2:	eb63 0301 	sbc.w	r3, r3, r1
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80015b4:	4649      	mov	r1, r9
 80015b6:	018b      	lsls	r3, r1, #6
 80015b8:	4641      	mov	r1, r8
 80015ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015be:	4641      	mov	r1, r8
 80015c0:	018a      	lsls	r2, r1, #6
 80015c2:	4641      	mov	r1, r8
 80015c4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015c8:	4649      	mov	r1, r9
 80015ca:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015da:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015de:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015e2:	4692      	mov	sl, r2
 80015e4:	469b      	mov	fp, r3
 80015e6:	4623      	mov	r3, r4
 80015e8:	eb1a 0303 	adds.w	r3, sl, r3
 80015ec:	623b      	str	r3, [r7, #32]
 80015ee:	462b      	mov	r3, r5
 80015f0:	eb4b 0303 	adc.w	r3, fp, r3
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001602:	4629      	mov	r1, r5
 8001604:	028b      	lsls	r3, r1, #10
 8001606:	4621      	mov	r1, r4
 8001608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800160c:	4621      	mov	r1, r4
 800160e:	028a      	lsls	r2, r1, #10
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001618:	2200      	movs	r2, #0
 800161a:	673b      	str	r3, [r7, #112]	; 0x70
 800161c:	677a      	str	r2, [r7, #116]	; 0x74
 800161e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001622:	f7fe fdf5 	bl	8000210 <__aeabi_uldivmod>
 8001626:	4602      	mov	r2, r0
 8001628:	460b      	mov	r3, r1
 800162a:	4613      	mov	r3, r2
 800162c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001630:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	0c1b      	lsrs	r3, r3, #16
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	3301      	adds	r3, #1
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001642:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001646:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800164a:	fbb2 f3f3 	udiv	r3, r2, r3
 800164e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001652:	e0eb      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4b38      	ldr	r3, [pc, #224]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800165c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001660:	4b35      	ldr	r3, [pc, #212]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d06b      	beq.n	8001744 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_RCC_GetSysClockFreq+0x354>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	099b      	lsrs	r3, r3, #6
 8001672:	2200      	movs	r2, #0
 8001674:	66bb      	str	r3, [r7, #104]	; 0x68
 8001676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001678:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800167a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800167e:	663b      	str	r3, [r7, #96]	; 0x60
 8001680:	2300      	movs	r3, #0
 8001682:	667b      	str	r3, [r7, #100]	; 0x64
 8001684:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001688:	4622      	mov	r2, r4
 800168a:	462b      	mov	r3, r5
 800168c:	f04f 0000 	mov.w	r0, #0
 8001690:	f04f 0100 	mov.w	r1, #0
 8001694:	0159      	lsls	r1, r3, #5
 8001696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800169a:	0150      	lsls	r0, r2, #5
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4621      	mov	r1, r4
 80016a2:	1a51      	subs	r1, r2, r1
 80016a4:	61b9      	str	r1, [r7, #24]
 80016a6:	4629      	mov	r1, r5
 80016a8:	eb63 0301 	sbc.w	r3, r3, r1
 80016ac:	61fb      	str	r3, [r7, #28]
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	f04f 0300 	mov.w	r3, #0
 80016b6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80016ba:	4659      	mov	r1, fp
 80016bc:	018b      	lsls	r3, r1, #6
 80016be:	4651      	mov	r1, sl
 80016c0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016c4:	4651      	mov	r1, sl
 80016c6:	018a      	lsls	r2, r1, #6
 80016c8:	4651      	mov	r1, sl
 80016ca:	ebb2 0801 	subs.w	r8, r2, r1
 80016ce:	4659      	mov	r1, fp
 80016d0:	eb63 0901 	sbc.w	r9, r3, r1
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	f04f 0300 	mov.w	r3, #0
 80016dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016e8:	4690      	mov	r8, r2
 80016ea:	4699      	mov	r9, r3
 80016ec:	4623      	mov	r3, r4
 80016ee:	eb18 0303 	adds.w	r3, r8, r3
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	462b      	mov	r3, r5
 80016f6:	eb49 0303 	adc.w	r3, r9, r3
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	f04f 0300 	mov.w	r3, #0
 8001704:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001708:	4629      	mov	r1, r5
 800170a:	024b      	lsls	r3, r1, #9
 800170c:	4621      	mov	r1, r4
 800170e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001712:	4621      	mov	r1, r4
 8001714:	024a      	lsls	r2, r1, #9
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800171e:	2200      	movs	r2, #0
 8001720:	65bb      	str	r3, [r7, #88]	; 0x58
 8001722:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001724:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001728:	f7fe fd72 	bl	8000210 <__aeabi_uldivmod>
 800172c:	4602      	mov	r2, r0
 800172e:	460b      	mov	r3, r1
 8001730:	4613      	mov	r3, r2
 8001732:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001736:	e065      	b.n	8001804 <HAL_RCC_GetSysClockFreq+0x420>
 8001738:	40023800 	.word	0x40023800
 800173c:	00f42400 	.word	0x00f42400
 8001740:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001744:	4b3d      	ldr	r3, [pc, #244]	; (800183c <HAL_RCC_GetSysClockFreq+0x458>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	099b      	lsrs	r3, r3, #6
 800174a:	2200      	movs	r2, #0
 800174c:	4618      	mov	r0, r3
 800174e:	4611      	mov	r1, r2
 8001750:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001754:	653b      	str	r3, [r7, #80]	; 0x50
 8001756:	2300      	movs	r3, #0
 8001758:	657b      	str	r3, [r7, #84]	; 0x54
 800175a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800175e:	4642      	mov	r2, r8
 8001760:	464b      	mov	r3, r9
 8001762:	f04f 0000 	mov.w	r0, #0
 8001766:	f04f 0100 	mov.w	r1, #0
 800176a:	0159      	lsls	r1, r3, #5
 800176c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001770:	0150      	lsls	r0, r2, #5
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4641      	mov	r1, r8
 8001778:	1a51      	subs	r1, r2, r1
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	4649      	mov	r1, r9
 800177e:	eb63 0301 	sbc.w	r3, r3, r1
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	f04f 0200 	mov.w	r2, #0
 8001788:	f04f 0300 	mov.w	r3, #0
 800178c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001790:	4659      	mov	r1, fp
 8001792:	018b      	lsls	r3, r1, #6
 8001794:	4651      	mov	r1, sl
 8001796:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800179a:	4651      	mov	r1, sl
 800179c:	018a      	lsls	r2, r1, #6
 800179e:	4651      	mov	r1, sl
 80017a0:	1a54      	subs	r4, r2, r1
 80017a2:	4659      	mov	r1, fp
 80017a4:	eb63 0501 	sbc.w	r5, r3, r1
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	f04f 0300 	mov.w	r3, #0
 80017b0:	00eb      	lsls	r3, r5, #3
 80017b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017b6:	00e2      	lsls	r2, r4, #3
 80017b8:	4614      	mov	r4, r2
 80017ba:	461d      	mov	r5, r3
 80017bc:	4643      	mov	r3, r8
 80017be:	18e3      	adds	r3, r4, r3
 80017c0:	603b      	str	r3, [r7, #0]
 80017c2:	464b      	mov	r3, r9
 80017c4:	eb45 0303 	adc.w	r3, r5, r3
 80017c8:	607b      	str	r3, [r7, #4]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017d6:	4629      	mov	r1, r5
 80017d8:	028b      	lsls	r3, r1, #10
 80017da:	4621      	mov	r1, r4
 80017dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e0:	4621      	mov	r1, r4
 80017e2:	028a      	lsls	r2, r1, #10
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017ec:	2200      	movs	r2, #0
 80017ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80017f0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017f2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017f6:	f7fe fd0b 	bl	8000210 <__aeabi_uldivmod>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4613      	mov	r3, r2
 8001800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <HAL_RCC_GetSysClockFreq+0x458>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	0f1b      	lsrs	r3, r3, #28
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001812:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001816:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800181a:	fbb2 f3f3 	udiv	r3, r2, r3
 800181e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001822:	e003      	b.n	800182c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001826:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800182a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001830:	4618      	mov	r0, r3
 8001832:	37b8      	adds	r7, #184	; 0xb8
 8001834:	46bd      	mov	sp, r7
 8001836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800183a:	bf00      	nop
 800183c:	40023800 	.word	0x40023800
 8001840:	00f42400 	.word	0x00f42400

08001844 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e28d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 8083 	beq.w	800196a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	f003 030c 	and.w	r3, r3, #12
 800186c:	2b04      	cmp	r3, #4
 800186e:	d019      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001870:	4b91      	ldr	r3, [pc, #580]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001878:	2b08      	cmp	r3, #8
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800187c:	4b8e      	ldr	r3, [pc, #568]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001884:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001888:	d00c      	beq.n	80018a4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800188a:	4b8b      	ldr	r3, [pc, #556]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d112      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001896:	4b88      	ldr	r3, [pc, #544]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800189e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018a2:	d10b      	bne.n	80018bc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a4:	4b84      	ldr	r3, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d05b      	beq.n	8001968 <HAL_RCC_OscConfig+0x124>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d157      	bne.n	8001968 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e25a      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018c4:	d106      	bne.n	80018d4 <HAL_RCC_OscConfig+0x90>
 80018c6:	4b7c      	ldr	r3, [pc, #496]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d0:	6013      	str	r3, [r2, #0]
 80018d2:	e01d      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0xb4>
 80018de:	4b76      	ldr	r3, [pc, #472]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a75      	ldr	r2, [pc, #468]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6013      	str	r3, [r2, #0]
 80018ea:	4b73      	ldr	r3, [pc, #460]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a72      	ldr	r2, [pc, #456]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0xcc>
 80018f8:	4b6f      	ldr	r3, [pc, #444]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80018fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001902:	6013      	str	r3, [r2, #0]
 8001904:	4b6c      	ldr	r3, [pc, #432]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a6b      	ldr	r2, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800190a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800190e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d013      	beq.n	8001940 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff f928 	bl	8000b6c <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001920:	f7ff f924 	bl	8000b6c <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b64      	cmp	r3, #100	; 0x64
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e21f      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001932:	4b61      	ldr	r3, [pc, #388]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d0f0      	beq.n	8001920 <HAL_RCC_OscConfig+0xdc>
 800193e:	e014      	b.n	800196a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff f914 	bl	8000b6c <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001948:	f7ff f910 	bl	8000b6c <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b64      	cmp	r3, #100	; 0x64
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e20b      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800195a:	4b57      	ldr	r3, [pc, #348]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x104>
 8001966:	e000      	b.n	800196a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d06f      	beq.n	8001a56 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001976:	4b50      	ldr	r3, [pc, #320]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d017      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	4b4d      	ldr	r3, [pc, #308]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800198a:	2b08      	cmp	r3, #8
 800198c:	d105      	bne.n	800199a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800199a:	4b47      	ldr	r3, [pc, #284]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 800199c:	689b      	ldr	r3, [r3, #8]
 800199e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80019a2:	2b0c      	cmp	r3, #12
 80019a4:	d11c      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019a6:	4b44      	ldr	r3, [pc, #272]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d116      	bne.n	80019e0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019b2:	4b41      	ldr	r3, [pc, #260]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d001      	beq.n	80019ca <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e1d3      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ca:	4b3b      	ldr	r3, [pc, #236]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	4937      	ldr	r1, [pc, #220]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019de:	e03a      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d020      	beq.n	8001a2a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e8:	4b34      	ldr	r3, [pc, #208]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7ff f8bd 	bl	8000b6c <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019f6:	f7ff f8b9 	bl	8000b6c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e1b4      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	691b      	ldr	r3, [r3, #16]
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	4925      	ldr	r1, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a24:	4313      	orrs	r3, r2
 8001a26:	600b      	str	r3, [r1, #0]
 8001a28:	e015      	b.n	8001a56 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a2a:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x278>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a30:	f7ff f89c 	bl	8000b6c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a38:	f7ff f898 	bl	8000b6c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e193      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a4a:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0308 	and.w	r3, r3, #8
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d036      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d016      	beq.n	8001a98 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a6a:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff f87c 	bl	8000b6c <HAL_GetTick>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a78:	f7ff f878 	bl	8000b6c <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e173      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_RCC_OscConfig+0x274>)
 8001a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f0      	beq.n	8001a78 <HAL_RCC_OscConfig+0x234>
 8001a96:	e01b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a98:	4b09      	ldr	r3, [pc, #36]	; (8001ac0 <HAL_RCC_OscConfig+0x27c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9e:	f7ff f865 	bl	8000b6c <HAL_GetTick>
 8001aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	e00e      	b.n	8001ac4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001aa6:	f7ff f861 	bl	8000b6c <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d907      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e15c      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	42470000 	.word	0x42470000
 8001ac0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4b8a      	ldr	r3, [pc, #552]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ea      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8097 	beq.w	8001c0c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b83      	ldr	r3, [pc, #524]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10f      	bne.n	8001b0e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	4b7f      	ldr	r3, [pc, #508]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a7e      	ldr	r2, [pc, #504]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b7c      	ldr	r3, [pc, #496]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	60bb      	str	r3, [r7, #8]
 8001b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b79      	ldr	r3, [pc, #484]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d118      	bne.n	8001b4c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b1a:	4b76      	ldr	r3, [pc, #472]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a75      	ldr	r2, [pc, #468]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f821 	bl	8000b6c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2e:	f7ff f81d 	bl	8000b6c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e118      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b40:	4b6c      	ldr	r3, [pc, #432]	; (8001cf4 <HAL_RCC_OscConfig+0x4b0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0f0      	beq.n	8001b2e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d106      	bne.n	8001b62 <HAL_RCC_OscConfig+0x31e>
 8001b54:	4b66      	ldr	r3, [pc, #408]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b58:	4a65      	ldr	r2, [pc, #404]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b60:	e01c      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d10c      	bne.n	8001b84 <HAL_RCC_OscConfig+0x340>
 8001b6a:	4b61      	ldr	r3, [pc, #388]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b6e:	4a60      	ldr	r2, [pc, #384]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6713      	str	r3, [r2, #112]	; 0x70
 8001b76:	4b5e      	ldr	r3, [pc, #376]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b7a:	4a5d      	ldr	r2, [pc, #372]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 0301 	orr.w	r3, r3, #1
 8001b80:	6713      	str	r3, [r2, #112]	; 0x70
 8001b82:	e00b      	b.n	8001b9c <HAL_RCC_OscConfig+0x358>
 8001b84:	4b5a      	ldr	r3, [pc, #360]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b88:	4a59      	ldr	r2, [pc, #356]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b8a:	f023 0301 	bic.w	r3, r3, #1
 8001b8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b94:	4a56      	ldr	r2, [pc, #344]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001b96:	f023 0304 	bic.w	r3, r3, #4
 8001b9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba4:	f7fe ffe2 	bl	8000b6c <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bac:	f7fe ffde 	bl	8000b6c <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0d7      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc2:	4b4b      	ldr	r3, [pc, #300]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0ee      	beq.n	8001bac <HAL_RCC_OscConfig+0x368>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd0:	f7fe ffcc 	bl	8000b6c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bd6:	e00a      	b.n	8001bee <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bd8:	f7fe ffc8 	bl	8000b6c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d901      	bls.n	8001bee <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bea:	2303      	movs	r3, #3
 8001bec:	e0c1      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bee:	4b40      	ldr	r3, [pc, #256]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d1ee      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bfa:	7dfb      	ldrb	r3, [r7, #23]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d105      	bne.n	8001c0c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c00:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c04:	4a3a      	ldr	r2, [pc, #232]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	f000 80ad 	beq.w	8001d70 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c16:	4b36      	ldr	r3, [pc, #216]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b08      	cmp	r3, #8
 8001c20:	d060      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d145      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b33      	ldr	r3, [pc, #204]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c30:	f7fe ff9c 	bl	8000b6c <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c38:	f7fe ff98 	bl	8000b6c <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e093      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f0      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c64:	019b      	lsls	r3, r3, #6
 8001c66:	431a      	orrs	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	085b      	lsrs	r3, r3, #1
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	041b      	lsls	r3, r3, #16
 8001c72:	431a      	orrs	r2, r3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	061b      	lsls	r3, r3, #24
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c80:	071b      	lsls	r3, r3, #28
 8001c82:	491b      	ldr	r1, [pc, #108]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7fe ff6d 	bl	8000b6c <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c96:	f7fe ff69 	bl	8000b6c <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e064      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x452>
 8001cb4:	e05c      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb6:	4b10      	ldr	r3, [pc, #64]	; (8001cf8 <HAL_RCC_OscConfig+0x4b4>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cbc:	f7fe ff56 	bl	8000b6c <HAL_GetTick>
 8001cc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cc2:	e008      	b.n	8001cd6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cc4:	f7fe ff52 	bl	8000b6c <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d901      	bls.n	8001cd6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	e04d      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd6:	4b06      	ldr	r3, [pc, #24]	; (8001cf0 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f0      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x480>
 8001ce2:	e045      	b.n	8001d70 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d107      	bne.n	8001cfc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e040      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40007000 	.word	0x40007000
 8001cf8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cfc:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x538>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	2b01      	cmp	r3, #1
 8001d08:	d030      	beq.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d129      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d122      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d119      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d42:	085b      	lsrs	r3, r3, #1
 8001d44:	3b01      	subs	r3, #1
 8001d46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d10f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d107      	bne.n	8001d6c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e000      	b.n	8001d72 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3718      	adds	r7, #24
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800

08001d80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b082      	sub	sp, #8
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d101      	bne.n	8001d92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e042      	b.n	8001e18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d106      	bne.n	8001dac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7fe fdd2 	bl	8000950 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2224      	movs	r2, #36	; 0x24
 8001db0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f82b 	bl	8001e20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	68da      	ldr	r2, [r3, #12]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2220      	movs	r2, #32
 8001e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e24:	b0c0      	sub	sp, #256	; 0x100
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3c:	68d9      	ldr	r1, [r3, #12]
 8001e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	ea40 0301 	orr.w	r3, r0, r1
 8001e48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	431a      	orrs	r2, r3
 8001e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e64:	69db      	ldr	r3, [r3, #28]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001e78:	f021 010c 	bic.w	r1, r1, #12
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001e86:	430b      	orrs	r3, r1
 8001e88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e9a:	6999      	ldr	r1, [r3, #24]
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	ea40 0301 	orr.w	r3, r0, r1
 8001ea6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	4b8f      	ldr	r3, [pc, #572]	; (80020ec <UART_SetConfig+0x2cc>)
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d005      	beq.n	8001ec0 <UART_SetConfig+0xa0>
 8001eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4b8d      	ldr	r3, [pc, #564]	; (80020f0 <UART_SetConfig+0x2d0>)
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d104      	bne.n	8001eca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001ec0:	f7ff fa7c 	bl	80013bc <HAL_RCC_GetPCLK2Freq>
 8001ec4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001ec8:	e003      	b.n	8001ed2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001eca:	f7ff fa63 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
 8001ece:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001edc:	f040 810c 	bne.w	80020f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ee0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001eea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001eee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001ef2:	4622      	mov	r2, r4
 8001ef4:	462b      	mov	r3, r5
 8001ef6:	1891      	adds	r1, r2, r2
 8001ef8:	65b9      	str	r1, [r7, #88]	; 0x58
 8001efa:	415b      	adcs	r3, r3
 8001efc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001efe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f02:	4621      	mov	r1, r4
 8001f04:	eb12 0801 	adds.w	r8, r2, r1
 8001f08:	4629      	mov	r1, r5
 8001f0a:	eb43 0901 	adc.w	r9, r3, r1
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f22:	4690      	mov	r8, r2
 8001f24:	4699      	mov	r9, r3
 8001f26:	4623      	mov	r3, r4
 8001f28:	eb18 0303 	adds.w	r3, r8, r3
 8001f2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f30:	462b      	mov	r3, r5
 8001f32:	eb49 0303 	adc.w	r3, r9, r3
 8001f36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f4e:	460b      	mov	r3, r1
 8001f50:	18db      	adds	r3, r3, r3
 8001f52:	653b      	str	r3, [r7, #80]	; 0x50
 8001f54:	4613      	mov	r3, r2
 8001f56:	eb42 0303 	adc.w	r3, r2, r3
 8001f5a:	657b      	str	r3, [r7, #84]	; 0x54
 8001f5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001f60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001f64:	f7fe f954 	bl	8000210 <__aeabi_uldivmod>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4b61      	ldr	r3, [pc, #388]	; (80020f4 <UART_SetConfig+0x2d4>)
 8001f6e:	fba3 2302 	umull	r2, r3, r3, r2
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	011c      	lsls	r4, r3, #4
 8001f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001f80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001f84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001f88:	4642      	mov	r2, r8
 8001f8a:	464b      	mov	r3, r9
 8001f8c:	1891      	adds	r1, r2, r2
 8001f8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8001f90:	415b      	adcs	r3, r3
 8001f92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001f98:	4641      	mov	r1, r8
 8001f9a:	eb12 0a01 	adds.w	sl, r2, r1
 8001f9e:	4649      	mov	r1, r9
 8001fa0:	eb43 0b01 	adc.w	fp, r3, r1
 8001fa4:	f04f 0200 	mov.w	r2, #0
 8001fa8:	f04f 0300 	mov.w	r3, #0
 8001fac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001fb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001fb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001fb8:	4692      	mov	sl, r2
 8001fba:	469b      	mov	fp, r3
 8001fbc:	4643      	mov	r3, r8
 8001fbe:	eb1a 0303 	adds.w	r3, sl, r3
 8001fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001fc6:	464b      	mov	r3, r9
 8001fc8:	eb4b 0303 	adc.w	r3, fp, r3
 8001fcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001fdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001fe0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	18db      	adds	r3, r3, r3
 8001fe8:	643b      	str	r3, [r7, #64]	; 0x40
 8001fea:	4613      	mov	r3, r2
 8001fec:	eb42 0303 	adc.w	r3, r2, r3
 8001ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ff2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ff6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ffa:	f7fe f909 	bl	8000210 <__aeabi_uldivmod>
 8001ffe:	4602      	mov	r2, r0
 8002000:	460b      	mov	r3, r1
 8002002:	4611      	mov	r1, r2
 8002004:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <UART_SetConfig+0x2d4>)
 8002006:	fba3 2301 	umull	r2, r3, r3, r1
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2264      	movs	r2, #100	; 0x64
 800200e:	fb02 f303 	mul.w	r3, r2, r3
 8002012:	1acb      	subs	r3, r1, r3
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800201a:	4b36      	ldr	r3, [pc, #216]	; (80020f4 <UART_SetConfig+0x2d4>)
 800201c:	fba3 2302 	umull	r2, r3, r3, r2
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	005b      	lsls	r3, r3, #1
 8002024:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002028:	441c      	add	r4, r3
 800202a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800202e:	2200      	movs	r2, #0
 8002030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002034:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002038:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800203c:	4642      	mov	r2, r8
 800203e:	464b      	mov	r3, r9
 8002040:	1891      	adds	r1, r2, r2
 8002042:	63b9      	str	r1, [r7, #56]	; 0x38
 8002044:	415b      	adcs	r3, r3
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002048:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800204c:	4641      	mov	r1, r8
 800204e:	1851      	adds	r1, r2, r1
 8002050:	6339      	str	r1, [r7, #48]	; 0x30
 8002052:	4649      	mov	r1, r9
 8002054:	414b      	adcs	r3, r1
 8002056:	637b      	str	r3, [r7, #52]	; 0x34
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002064:	4659      	mov	r1, fp
 8002066:	00cb      	lsls	r3, r1, #3
 8002068:	4651      	mov	r1, sl
 800206a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800206e:	4651      	mov	r1, sl
 8002070:	00ca      	lsls	r2, r1, #3
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	4603      	mov	r3, r0
 8002078:	4642      	mov	r2, r8
 800207a:	189b      	adds	r3, r3, r2
 800207c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002080:	464b      	mov	r3, r9
 8002082:	460a      	mov	r2, r1
 8002084:	eb42 0303 	adc.w	r3, r2, r3
 8002088:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800208c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002098:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800209c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020a0:	460b      	mov	r3, r1
 80020a2:	18db      	adds	r3, r3, r3
 80020a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80020a6:	4613      	mov	r3, r2
 80020a8:	eb42 0303 	adc.w	r3, r2, r3
 80020ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020b6:	f7fe f8ab 	bl	8000210 <__aeabi_uldivmod>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <UART_SetConfig+0x2d4>)
 80020c0:	fba3 1302 	umull	r1, r3, r3, r2
 80020c4:	095b      	lsrs	r3, r3, #5
 80020c6:	2164      	movs	r1, #100	; 0x64
 80020c8:	fb01 f303 	mul.w	r3, r1, r3
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	3332      	adds	r3, #50	; 0x32
 80020d2:	4a08      	ldr	r2, [pc, #32]	; (80020f4 <UART_SetConfig+0x2d4>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	f003 0207 	and.w	r2, r3, #7
 80020de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4422      	add	r2, r4
 80020e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80020e8:	e106      	b.n	80022f8 <UART_SetConfig+0x4d8>
 80020ea:	bf00      	nop
 80020ec:	40011000 	.word	0x40011000
 80020f0:	40011400 	.word	0x40011400
 80020f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020fc:	2200      	movs	r2, #0
 80020fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002102:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002106:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800210a:	4642      	mov	r2, r8
 800210c:	464b      	mov	r3, r9
 800210e:	1891      	adds	r1, r2, r2
 8002110:	6239      	str	r1, [r7, #32]
 8002112:	415b      	adcs	r3, r3
 8002114:	627b      	str	r3, [r7, #36]	; 0x24
 8002116:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800211a:	4641      	mov	r1, r8
 800211c:	1854      	adds	r4, r2, r1
 800211e:	4649      	mov	r1, r9
 8002120:	eb43 0501 	adc.w	r5, r3, r1
 8002124:	f04f 0200 	mov.w	r2, #0
 8002128:	f04f 0300 	mov.w	r3, #0
 800212c:	00eb      	lsls	r3, r5, #3
 800212e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002132:	00e2      	lsls	r2, r4, #3
 8002134:	4614      	mov	r4, r2
 8002136:	461d      	mov	r5, r3
 8002138:	4643      	mov	r3, r8
 800213a:	18e3      	adds	r3, r4, r3
 800213c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002140:	464b      	mov	r3, r9
 8002142:	eb45 0303 	adc.w	r3, r5, r3
 8002146:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800214a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	2200      	movs	r2, #0
 8002152:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002166:	4629      	mov	r1, r5
 8002168:	008b      	lsls	r3, r1, #2
 800216a:	4621      	mov	r1, r4
 800216c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002170:	4621      	mov	r1, r4
 8002172:	008a      	lsls	r2, r1, #2
 8002174:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002178:	f7fe f84a 	bl	8000210 <__aeabi_uldivmod>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	4b60      	ldr	r3, [pc, #384]	; (8002304 <UART_SetConfig+0x4e4>)
 8002182:	fba3 2302 	umull	r2, r3, r3, r2
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	011c      	lsls	r4, r3, #4
 800218a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800218e:	2200      	movs	r2, #0
 8002190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002194:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002198:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800219c:	4642      	mov	r2, r8
 800219e:	464b      	mov	r3, r9
 80021a0:	1891      	adds	r1, r2, r2
 80021a2:	61b9      	str	r1, [r7, #24]
 80021a4:	415b      	adcs	r3, r3
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021ac:	4641      	mov	r1, r8
 80021ae:	1851      	adds	r1, r2, r1
 80021b0:	6139      	str	r1, [r7, #16]
 80021b2:	4649      	mov	r1, r9
 80021b4:	414b      	adcs	r3, r1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80021c4:	4659      	mov	r1, fp
 80021c6:	00cb      	lsls	r3, r1, #3
 80021c8:	4651      	mov	r1, sl
 80021ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ce:	4651      	mov	r1, sl
 80021d0:	00ca      	lsls	r2, r1, #3
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	4642      	mov	r2, r8
 80021da:	189b      	adds	r3, r3, r2
 80021dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80021e0:	464b      	mov	r3, r9
 80021e2:	460a      	mov	r2, r1
 80021e4:	eb42 0303 	adc.w	r3, r2, r3
 80021e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80021ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80021f6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002204:	4649      	mov	r1, r9
 8002206:	008b      	lsls	r3, r1, #2
 8002208:	4641      	mov	r1, r8
 800220a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800220e:	4641      	mov	r1, r8
 8002210:	008a      	lsls	r2, r1, #2
 8002212:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002216:	f7fd fffb 	bl	8000210 <__aeabi_uldivmod>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4611      	mov	r1, r2
 8002220:	4b38      	ldr	r3, [pc, #224]	; (8002304 <UART_SetConfig+0x4e4>)
 8002222:	fba3 2301 	umull	r2, r3, r3, r1
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	2264      	movs	r2, #100	; 0x64
 800222a:	fb02 f303 	mul.w	r3, r2, r3
 800222e:	1acb      	subs	r3, r1, r3
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	3332      	adds	r3, #50	; 0x32
 8002234:	4a33      	ldr	r2, [pc, #204]	; (8002304 <UART_SetConfig+0x4e4>)
 8002236:	fba2 2303 	umull	r2, r3, r2, r3
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002240:	441c      	add	r4, r3
 8002242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002246:	2200      	movs	r2, #0
 8002248:	673b      	str	r3, [r7, #112]	; 0x70
 800224a:	677a      	str	r2, [r7, #116]	; 0x74
 800224c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002250:	4642      	mov	r2, r8
 8002252:	464b      	mov	r3, r9
 8002254:	1891      	adds	r1, r2, r2
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	415b      	adcs	r3, r3
 800225a:	60fb      	str	r3, [r7, #12]
 800225c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002260:	4641      	mov	r1, r8
 8002262:	1851      	adds	r1, r2, r1
 8002264:	6039      	str	r1, [r7, #0]
 8002266:	4649      	mov	r1, r9
 8002268:	414b      	adcs	r3, r1
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	f04f 0200 	mov.w	r2, #0
 8002270:	f04f 0300 	mov.w	r3, #0
 8002274:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002278:	4659      	mov	r1, fp
 800227a:	00cb      	lsls	r3, r1, #3
 800227c:	4651      	mov	r1, sl
 800227e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002282:	4651      	mov	r1, sl
 8002284:	00ca      	lsls	r2, r1, #3
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	4603      	mov	r3, r0
 800228c:	4642      	mov	r2, r8
 800228e:	189b      	adds	r3, r3, r2
 8002290:	66bb      	str	r3, [r7, #104]	; 0x68
 8002292:	464b      	mov	r3, r9
 8002294:	460a      	mov	r2, r1
 8002296:	eb42 0303 	adc.w	r3, r2, r3
 800229a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800229c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	663b      	str	r3, [r7, #96]	; 0x60
 80022a6:	667a      	str	r2, [r7, #100]	; 0x64
 80022a8:	f04f 0200 	mov.w	r2, #0
 80022ac:	f04f 0300 	mov.w	r3, #0
 80022b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022b4:	4649      	mov	r1, r9
 80022b6:	008b      	lsls	r3, r1, #2
 80022b8:	4641      	mov	r1, r8
 80022ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80022be:	4641      	mov	r1, r8
 80022c0:	008a      	lsls	r2, r1, #2
 80022c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80022c6:	f7fd ffa3 	bl	8000210 <__aeabi_uldivmod>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <UART_SetConfig+0x4e4>)
 80022d0:	fba3 1302 	umull	r1, r3, r3, r2
 80022d4:	095b      	lsrs	r3, r3, #5
 80022d6:	2164      	movs	r1, #100	; 0x64
 80022d8:	fb01 f303 	mul.w	r3, r1, r3
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	011b      	lsls	r3, r3, #4
 80022e0:	3332      	adds	r3, #50	; 0x32
 80022e2:	4a08      	ldr	r2, [pc, #32]	; (8002304 <UART_SetConfig+0x4e4>)
 80022e4:	fba2 2303 	umull	r2, r3, r2, r3
 80022e8:	095b      	lsrs	r3, r3, #5
 80022ea:	f003 020f 	and.w	r2, r3, #15
 80022ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4422      	add	r2, r4
 80022f6:	609a      	str	r2, [r3, #8]
}
 80022f8:	bf00      	nop
 80022fa:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80022fe:	46bd      	mov	sp, r7
 8002300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002304:	51eb851f 	.word	0x51eb851f

08002308 <__NVIC_SetPriority>:
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	; (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	; (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002360:	2100      	movs	r1, #0
 8002362:	f06f 0004 	mvn.w	r0, #4
 8002366:	f7ff ffcf 	bl	8002308 <__NVIC_SetPriority>
#endif
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002376:	f3ef 8305 	mrs	r3, IPSR
 800237a:	603b      	str	r3, [r7, #0]
  return(result);
 800237c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800237e:	2b00      	cmp	r3, #0
 8002380:	d003      	beq.n	800238a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002382:	f06f 0305 	mvn.w	r3, #5
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	e00c      	b.n	80023a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <osKernelInitialize+0x44>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d105      	bne.n	800239e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002392:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <osKernelInitialize+0x44>)
 8002394:	2201      	movs	r2, #1
 8002396:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002398:	2300      	movs	r3, #0
 800239a:	607b      	str	r3, [r7, #4]
 800239c:	e002      	b.n	80023a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800239e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023a4:	687b      	ldr	r3, [r7, #4]
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000090 	.word	0x20000090

080023b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b082      	sub	sp, #8
 80023bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023be:	f3ef 8305 	mrs	r3, IPSR
 80023c2:	603b      	str	r3, [r7, #0]
  return(result);
 80023c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80023ca:	f06f 0305 	mvn.w	r3, #5
 80023ce:	607b      	str	r3, [r7, #4]
 80023d0:	e010      	b.n	80023f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <osKernelStart+0x48>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d109      	bne.n	80023ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80023da:	f7ff ffbf 	bl	800235c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <osKernelStart+0x48>)
 80023e0:	2202      	movs	r2, #2
 80023e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80023e4:	f001 f866 	bl	80034b4 <vTaskStartScheduler>
      stat = osOK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	607b      	str	r3, [r7, #4]
 80023ec:	e002      	b.n	80023f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80023ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80023f4:	687b      	ldr	r3, [r7, #4]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000090 	.word	0x20000090

08002404 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af04      	add	r7, sp, #16
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002410:	2300      	movs	r3, #0
 8002412:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002414:	f3ef 8305 	mrs	r3, IPSR
 8002418:	617b      	str	r3, [r7, #20]
  return(result);
 800241a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800241c:	2b00      	cmp	r3, #0
 800241e:	d17e      	bne.n	800251e <osThreadNew+0x11a>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d07b      	beq.n	800251e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8002426:	2380      	movs	r3, #128	; 0x80
 8002428:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800242a:	2318      	movs	r3, #24
 800242c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8002432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002436:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d045      	beq.n	80024ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <osThreadNew+0x48>
        name = attr->name;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d008      	beq.n	8002472 <osThreadNew+0x6e>
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	2b38      	cmp	r3, #56	; 0x38
 8002464:	d805      	bhi.n	8002472 <osThreadNew+0x6e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <osThreadNew+0x72>
        return (NULL);
 8002472:	2300      	movs	r3, #0
 8002474:	e054      	b.n	8002520 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	695b      	ldr	r3, [r3, #20]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	695b      	ldr	r3, [r3, #20]
 8002482:	089b      	lsrs	r3, r3, #2
 8002484:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d00e      	beq.n	80024ac <osThreadNew+0xa8>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	2b5b      	cmp	r3, #91	; 0x5b
 8002494:	d90a      	bls.n	80024ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800249a:	2b00      	cmp	r3, #0
 800249c:	d006      	beq.n	80024ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	695b      	ldr	r3, [r3, #20]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d002      	beq.n	80024ac <osThreadNew+0xa8>
        mem = 1;
 80024a6:	2301      	movs	r3, #1
 80024a8:	61bb      	str	r3, [r7, #24]
 80024aa:	e010      	b.n	80024ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10c      	bne.n	80024ce <osThreadNew+0xca>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d108      	bne.n	80024ce <osThreadNew+0xca>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d104      	bne.n	80024ce <osThreadNew+0xca>
          mem = 0;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	e001      	b.n	80024ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d110      	bne.n	80024f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024dc:	9202      	str	r2, [sp, #8]
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	6a3a      	ldr	r2, [r7, #32]
 80024e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fe0c 	bl	8003108 <xTaskCreateStatic>
 80024f0:	4603      	mov	r3, r0
 80024f2:	613b      	str	r3, [r7, #16]
 80024f4:	e013      	b.n	800251e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d110      	bne.n	800251e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	b29a      	uxth	r2, r3
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	9301      	str	r3, [sp, #4]
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	9300      	str	r3, [sp, #0]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fe57 	bl	80031c2 <xTaskCreate>
 8002514:	4603      	mov	r3, r0
 8002516:	2b01      	cmp	r3, #1
 8002518:	d001      	beq.n	800251e <osThreadNew+0x11a>
            hTask = NULL;
 800251a:	2300      	movs	r3, #0
 800251c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800251e:	693b      	ldr	r3, [r7, #16]
}
 8002520:	4618      	mov	r0, r3
 8002522:	3728      	adds	r7, #40	; 0x28
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}

08002528 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002530:	f3ef 8305 	mrs	r3, IPSR
 8002534:	60bb      	str	r3, [r7, #8]
  return(result);
 8002536:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <osDelay+0x1c>
    stat = osErrorISR;
 800253c:	f06f 0305 	mvn.w	r3, #5
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	e007      	b.n	8002554 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002544:	2300      	movs	r3, #0
 8002546:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d002      	beq.n	8002554 <osDelay+0x2c>
      vTaskDelay(ticks);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 ff7c 	bl	800344c <vTaskDelay>
    }
  }

  return (stat);
 8002554:	68fb      	ldr	r3, [r7, #12]
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4a07      	ldr	r2, [pc, #28]	; (800258c <vApplicationGetIdleTaskMemory+0x2c>)
 8002570:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	4a06      	ldr	r2, [pc, #24]	; (8002590 <vApplicationGetIdleTaskMemory+0x30>)
 8002576:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2280      	movs	r2, #128	; 0x80
 800257c:	601a      	str	r2, [r3, #0]
}
 800257e:	bf00      	nop
 8002580:	3714      	adds	r7, #20
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000094 	.word	0x20000094
 8002590:	200000f0 	.word	0x200000f0

08002594 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	4a07      	ldr	r2, [pc, #28]	; (80025c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80025a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	4a06      	ldr	r2, [pc, #24]	; (80025c4 <vApplicationGetTimerTaskMemory+0x30>)
 80025aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025b2:	601a      	str	r2, [r3, #0]
}
 80025b4:	bf00      	nop
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	200002f0 	.word	0x200002f0
 80025c4:	2000034c 	.word	0x2000034c

080025c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f103 0208 	add.w	r2, r3, #8
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	f103 0208 	add.w	r2, r3, #8
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f103 0208 	add.w	r2, r3, #8
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002622:	b480      	push	{r7}
 8002624:	b085      	sub	sp, #20
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	689a      	ldr	r2, [r3, #8]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	687a      	ldr	r2, [r7, #4]
 8002652:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1c5a      	adds	r2, r3, #1
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr

0800266a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800266a:	b480      	push	{r7}
 800266c:	b085      	sub	sp, #20
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002680:	d103      	bne.n	800268a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	60fb      	str	r3, [r7, #12]
 8002688:	e00c      	b.n	80026a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3308      	adds	r3, #8
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	e002      	b.n	8002698 <vListInsert+0x2e>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d2f6      	bcs.n	8002692 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	685a      	ldr	r2, [r3, #4]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	3714      	adds	r7, #20
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	6892      	ldr	r2, [r2, #8]
 80026f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	429a      	cmp	r2, r3
 8002706:	d103      	bne.n	8002710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	1e5a      	subs	r2, r3, #1
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
}
 8002724:	4618      	mov	r0, r3
 8002726:	3714      	adds	r7, #20
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10a      	bne.n	800275a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002748:	f383 8811 	msr	BASEPRI, r3
 800274c:	f3bf 8f6f 	isb	sy
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002756:	bf00      	nop
 8002758:	e7fe      	b.n	8002758 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800275a:	f002 f84b 	bl	80047f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	68f9      	ldr	r1, [r7, #12]
 8002768:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800276a:	fb01 f303 	mul.w	r3, r1, r3
 800276e:	441a      	add	r2, r3
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800278a:	3b01      	subs	r3, #1
 800278c:	68f9      	ldr	r1, [r7, #12]
 800278e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002790:	fb01 f303 	mul.w	r3, r1, r3
 8002794:	441a      	add	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	22ff      	movs	r2, #255	; 0xff
 800279e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	22ff      	movs	r2, #255	; 0xff
 80027a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d114      	bne.n	80027da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01a      	beq.n	80027ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3310      	adds	r3, #16
 80027bc:	4618      	mov	r0, r3
 80027be:	f001 f903 	bl	80039c8 <xTaskRemoveFromEventList>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d012      	beq.n	80027ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80027c8:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <xQueueGenericReset+0xcc>)
 80027ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	f3bf 8f4f 	dsb	sy
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	e009      	b.n	80027ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	3310      	adds	r3, #16
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fef2 	bl	80025c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3324      	adds	r3, #36	; 0x24
 80027e8:	4618      	mov	r0, r3
 80027ea:	f7ff feed 	bl	80025c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80027ee:	f002 f831 	bl	8004854 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80027f2:	2301      	movs	r3, #1
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	e000ed04 	.word	0xe000ed04

08002800 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002800:	b580      	push	{r7, lr}
 8002802:	b08e      	sub	sp, #56	; 0x38
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
 800280c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d10a      	bne.n	800282a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002826:	bf00      	nop
 8002828:	e7fe      	b.n	8002828 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d10a      	bne.n	8002846 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002842:	bf00      	nop
 8002844:	e7fe      	b.n	8002844 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <xQueueGenericCreateStatic+0x52>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <xQueueGenericCreateStatic+0x56>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericCreateStatic+0x58>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
}
 800286e:	bf00      	nop
 8002870:	e7fe      	b.n	8002870 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d102      	bne.n	800287e <xQueueGenericCreateStatic+0x7e>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <xQueueGenericCreateStatic+0x82>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueGenericCreateStatic+0x84>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d10a      	bne.n	800289e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	61fb      	str	r3, [r7, #28]
}
 800289a:	bf00      	nop
 800289c:	e7fe      	b.n	800289c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800289e:	2350      	movs	r3, #80	; 0x50
 80028a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2b50      	cmp	r3, #80	; 0x50
 80028a6:	d00a      	beq.n	80028be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80028a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ac:	f383 8811 	msr	BASEPRI, r3
 80028b0:	f3bf 8f6f 	isb	sy
 80028b4:	f3bf 8f4f 	dsb	sy
 80028b8:	61bb      	str	r3, [r7, #24]
}
 80028ba:	bf00      	nop
 80028bc:	e7fe      	b.n	80028bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80028be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80028c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d00d      	beq.n	80028e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80028ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80028d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80028d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	68b9      	ldr	r1, [r7, #8]
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f805 	bl	80028f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3730      	adds	r7, #48	; 0x30
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}

080028f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b084      	sub	sp, #16
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d103      	bne.n	800290c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	e002      	b.n	8002912 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	68fa      	ldr	r2, [r7, #12]
 8002916:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	68ba      	ldr	r2, [r7, #8]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800291e:	2101      	movs	r1, #1
 8002920:	69b8      	ldr	r0, [r7, #24]
 8002922:	f7ff ff05 	bl	8002730 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	78fa      	ldrb	r2, [r7, #3]
 800292a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
	...

08002938 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08e      	sub	sp, #56	; 0x38
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
 8002944:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002946:	2300      	movs	r3, #0
 8002948:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10a      	bne.n	800296a <xQueueGenericSend+0x32>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002966:	bf00      	nop
 8002968:	e7fe      	b.n	8002968 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <xQueueGenericSend+0x40>
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <xQueueGenericSend+0x44>
 8002978:	2301      	movs	r3, #1
 800297a:	e000      	b.n	800297e <xQueueGenericSend+0x46>
 800297c:	2300      	movs	r3, #0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <xQueueGenericSend+0x60>
	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002994:	bf00      	nop
 8002996:	e7fe      	b.n	8002996 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d103      	bne.n	80029a6 <xQueueGenericSend+0x6e>
 800299e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <xQueueGenericSend+0x72>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <xQueueGenericSend+0x74>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80029b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b4:	f383 8811 	msr	BASEPRI, r3
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	f3bf 8f4f 	dsb	sy
 80029c0:	623b      	str	r3, [r7, #32]
}
 80029c2:	bf00      	nop
 80029c4:	e7fe      	b.n	80029c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029c6:	f001 f9bd 	bl	8003d44 <xTaskGetSchedulerState>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d102      	bne.n	80029d6 <xQueueGenericSend+0x9e>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <xQueueGenericSend+0xa2>
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <xQueueGenericSend+0xa4>
 80029da:	2300      	movs	r3, #0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d10a      	bne.n	80029f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80029e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e4:	f383 8811 	msr	BASEPRI, r3
 80029e8:	f3bf 8f6f 	isb	sy
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	61fb      	str	r3, [r7, #28]
}
 80029f2:	bf00      	nop
 80029f4:	e7fe      	b.n	80029f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029f6:	f001 fefd 	bl	80047f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <xQueueGenericSend+0xd4>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d129      	bne.n	8002a60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	68b9      	ldr	r1, [r7, #8]
 8002a10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a12:	f000 fa0b 	bl	8002e2c <prvCopyDataToQueue>
 8002a16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a22:	3324      	adds	r3, #36	; 0x24
 8002a24:	4618      	mov	r0, r3
 8002a26:	f000 ffcf 	bl	80039c8 <xTaskRemoveFromEventList>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d013      	beq.n	8002a58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a30:	4b3f      	ldr	r3, [pc, #252]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002a32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a36:	601a      	str	r2, [r3, #0]
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	e00a      	b.n	8002a58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d007      	beq.n	8002a58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a48:	4b39      	ldr	r3, [pc, #228]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002a4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a58:	f001 fefc 	bl	8004854 <vPortExitCritical>
				return pdPASS;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e063      	b.n	8002b28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d103      	bne.n	8002a6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a66:	f001 fef5 	bl	8004854 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	e05c      	b.n	8002b28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d106      	bne.n	8002a82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a74:	f107 0314 	add.w	r3, r7, #20
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 f809 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a82:	f001 fee7 	bl	8004854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a86:	f000 fd7b 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a8a:	f001 feb3 	bl	80047f4 <vPortEnterCritical>
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a94:	b25b      	sxtb	r3, r3
 8002a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9a:	d103      	bne.n	8002aa4 <xQueueGenericSend+0x16c>
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ab0:	d103      	bne.n	8002aba <xQueueGenericSend+0x182>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002aba:	f001 fecb 	bl	8004854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002abe:	1d3a      	adds	r2, r7, #4
 8002ac0:	f107 0314 	add.w	r3, r7, #20
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f000 fff8 	bl	8003abc <xTaskCheckForTimeOut>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d124      	bne.n	8002b1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002ad2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ad4:	f000 faa2 	bl	800301c <prvIsQueueFull>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d018      	beq.n	8002b10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f000 ff1e 	bl	8003928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002aec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002aee:	f000 fa2d 	bl	8002f4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002af2:	f000 fd53 	bl	800359c <xTaskResumeAll>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	f47f af7c 	bne.w	80029f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002afe:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <xQueueGenericSend+0x1f8>)
 8002b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	f3bf 8f6f 	isb	sy
 8002b0e:	e772      	b.n	80029f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b12:	f000 fa1b 	bl	8002f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b16:	f000 fd41 	bl	800359c <xTaskResumeAll>
 8002b1a:	e76c      	b.n	80029f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b1e:	f000 fa15 	bl	8002f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b22:	f000 fd3b 	bl	800359c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3738      	adds	r7, #56	; 0x38
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b090      	sub	sp, #64	; 0x40
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10a      	bne.n	8002b62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	e7fe      	b.n	8002b60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d103      	bne.n	8002b70 <xQueueGenericSendFromISR+0x3c>
 8002b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueGenericSendFromISR+0x40>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueGenericSendFromISR+0x42>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10a      	bne.n	8002b90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d103      	bne.n	8002b9e <xQueueGenericSendFromISR+0x6a>
 8002b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d101      	bne.n	8002ba2 <xQueueGenericSendFromISR+0x6e>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e000      	b.n	8002ba4 <xQueueGenericSendFromISR+0x70>
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bac:	f383 8811 	msr	BASEPRI, r3
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	623b      	str	r3, [r7, #32]
}
 8002bba:	bf00      	nop
 8002bbc:	e7fe      	b.n	8002bbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bbe:	f001 fefb 	bl	80049b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bc2:	f3ef 8211 	mrs	r2, BASEPRI
 8002bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bca:	f383 8811 	msr	BASEPRI, r3
 8002bce:	f3bf 8f6f 	isb	sy
 8002bd2:	f3bf 8f4f 	dsb	sy
 8002bd6:	61fa      	str	r2, [r7, #28]
 8002bd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002bda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d302      	bcc.n	8002bf0 <xQueueGenericSendFromISR+0xbc>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b02      	cmp	r3, #2
 8002bee:	d12f      	bne.n	8002c50 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	68b9      	ldr	r1, [r7, #8]
 8002c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c06:	f000 f911 	bl	8002e2c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c0a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c12:	d112      	bne.n	8002c3a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d016      	beq.n	8002c4a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1e:	3324      	adds	r3, #36	; 0x24
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 fed1 	bl	80039c8 <xTaskRemoveFromEventList>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00e      	beq.n	8002c4a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	e007      	b.n	8002c4a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c3e:	3301      	adds	r3, #1
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	b25a      	sxtb	r2, r3
 8002c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002c4e:	e001      	b.n	8002c54 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c56:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c5e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3740      	adds	r7, #64	; 0x40
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08c      	sub	sp, #48	; 0x30
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d10a      	bne.n	8002c9c <xQueueReceive+0x30>
	__asm volatile
 8002c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8a:	f383 8811 	msr	BASEPRI, r3
 8002c8e:	f3bf 8f6f 	isb	sy
 8002c92:	f3bf 8f4f 	dsb	sy
 8002c96:	623b      	str	r3, [r7, #32]
}
 8002c98:	bf00      	nop
 8002c9a:	e7fe      	b.n	8002c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <xQueueReceive+0x3e>
 8002ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <xQueueReceive+0x42>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueReceive+0x44>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10a      	bne.n	8002cca <xQueueReceive+0x5e>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	61fb      	str	r3, [r7, #28]
}
 8002cc6:	bf00      	nop
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cca:	f001 f83b 	bl	8003d44 <xTaskGetSchedulerState>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d102      	bne.n	8002cda <xQueueReceive+0x6e>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <xQueueReceive+0x72>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueReceive+0x74>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <xQueueReceive+0x8e>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	61bb      	str	r3, [r7, #24]
}
 8002cf6:	bf00      	nop
 8002cf8:	e7fe      	b.n	8002cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cfa:	f001 fd7b 	bl	80047f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d01f      	beq.n	8002d4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d0a:	68b9      	ldr	r1, [r7, #8]
 8002d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d0e:	f000 f8f7 	bl	8002f00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00f      	beq.n	8002d42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d24:	3310      	adds	r3, #16
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 fe4e 	bl	80039c8 <xTaskRemoveFromEventList>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d007      	beq.n	8002d42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d32:	4b3d      	ldr	r3, [pc, #244]	; (8002e28 <xQueueReceive+0x1bc>)
 8002d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	f3bf 8f4f 	dsb	sy
 8002d3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d42:	f001 fd87 	bl	8004854 <vPortExitCritical>
				return pdPASS;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e069      	b.n	8002e1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d103      	bne.n	8002d58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d50:	f001 fd80 	bl	8004854 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d54:	2300      	movs	r3, #0
 8002d56:	e062      	b.n	8002e1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d106      	bne.n	8002d6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d5e:	f107 0310 	add.w	r3, r7, #16
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fe94 	bl	8003a90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d6c:	f001 fd72 	bl	8004854 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d70:	f000 fc06 	bl	8003580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d74:	f001 fd3e 	bl	80047f4 <vPortEnterCritical>
 8002d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d7e:	b25b      	sxtb	r3, r3
 8002d80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d84:	d103      	bne.n	8002d8e <xQueueReceive+0x122>
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d94:	b25b      	sxtb	r3, r3
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d9a:	d103      	bne.n	8002da4 <xQueueReceive+0x138>
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	2200      	movs	r2, #0
 8002da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002da4:	f001 fd56 	bl	8004854 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da8:	1d3a      	adds	r2, r7, #4
 8002daa:	f107 0310 	add.w	r3, r7, #16
 8002dae:	4611      	mov	r1, r2
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fe83 	bl	8003abc <xTaskCheckForTimeOut>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d123      	bne.n	8002e04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dbe:	f000 f917 	bl	8002ff0 <prvIsQueueEmpty>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d017      	beq.n	8002df8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dca:	3324      	adds	r3, #36	; 0x24
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fda9 	bl	8003928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd8:	f000 f8b8 	bl	8002f4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ddc:	f000 fbde 	bl	800359c <xTaskResumeAll>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d189      	bne.n	8002cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002de6:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <xQueueReceive+0x1bc>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	e780      	b.n	8002cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfa:	f000 f8a7 	bl	8002f4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dfe:	f000 fbcd 	bl	800359c <xTaskResumeAll>
 8002e02:	e77a      	b.n	8002cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e06:	f000 f8a1 	bl	8002f4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e0a:	f000 fbc7 	bl	800359c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e10:	f000 f8ee 	bl	8002ff0 <prvIsQueueEmpty>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f43f af6f 	beq.w	8002cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3730      	adds	r7, #48	; 0x30
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	e000ed04 	.word	0xe000ed04

08002e2c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e40:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d10d      	bne.n	8002e66 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d14d      	bne.n	8002eee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f000 ff92 	bl	8003d80 <xTaskPriorityDisinherit>
 8002e5c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	609a      	str	r2, [r3, #8]
 8002e64:	e043      	b.n	8002eee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d119      	bne.n	8002ea0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6858      	ldr	r0, [r3, #4]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	461a      	mov	r2, r3
 8002e76:	68b9      	ldr	r1, [r7, #8]
 8002e78:	f001 fff4 	bl	8004e64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	441a      	add	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d32b      	bcc.n	8002eee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	e026      	b.n	8002eee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68d8      	ldr	r0, [r3, #12]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68b9      	ldr	r1, [r7, #8]
 8002eac:	f001 ffda 	bl	8004e64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	425b      	negs	r3, r3
 8002eba:	441a      	add	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68da      	ldr	r2, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d207      	bcs.n	8002edc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	425b      	negs	r3, r3
 8002ed6:	441a      	add	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d105      	bne.n	8002eee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	1c5a      	adds	r2, r3, #1
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002ef6:	697b      	ldr	r3, [r7, #20]
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	441a      	add	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68da      	ldr	r2, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d303      	bcc.n	8002f34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68d9      	ldr	r1, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6838      	ldr	r0, [r7, #0]
 8002f40:	f001 ff90 	bl	8004e64 <memcpy>
	}
}
 8002f44:	bf00      	nop
 8002f46:	3708      	adds	r7, #8
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f54:	f001 fc4e 	bl	80047f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f60:	e011      	b.n	8002f86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d012      	beq.n	8002f90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3324      	adds	r3, #36	; 0x24
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 fd2a 	bl	80039c8 <xTaskRemoveFromEventList>
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d001      	beq.n	8002f7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f7a:	f000 fe01 	bl	8003b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f7e:	7bfb      	ldrb	r3, [r7, #15]
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dce9      	bgt.n	8002f62 <prvUnlockQueue+0x16>
 8002f8e:	e000      	b.n	8002f92 <prvUnlockQueue+0x46>
					break;
 8002f90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	22ff      	movs	r2, #255	; 0xff
 8002f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002f9a:	f001 fc5b 	bl	8004854 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f9e:	f001 fc29 	bl	80047f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002faa:	e011      	b.n	8002fd0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d012      	beq.n	8002fda <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3310      	adds	r3, #16
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f000 fd05 	bl	80039c8 <xTaskRemoveFromEventList>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fc4:	f000 fddc 	bl	8003b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fc8:	7bbb      	ldrb	r3, [r7, #14]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	dce9      	bgt.n	8002fac <prvUnlockQueue+0x60>
 8002fd8:	e000      	b.n	8002fdc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fda:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002fe4:	f001 fc36 	bl	8004854 <vPortExitCritical>
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002ff8:	f001 fbfc 	bl	80047f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	2b00      	cmp	r3, #0
 8003002:	d102      	bne.n	800300a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003004:	2301      	movs	r3, #1
 8003006:	60fb      	str	r3, [r7, #12]
 8003008:	e001      	b.n	800300e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800300a:	2300      	movs	r3, #0
 800300c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800300e:	f001 fc21 	bl	8004854 <vPortExitCritical>

	return xReturn;
 8003012:	68fb      	ldr	r3, [r7, #12]
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003024:	f001 fbe6 	bl	80047f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003030:	429a      	cmp	r2, r3
 8003032:	d102      	bne.n	800303a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003034:	2301      	movs	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	e001      	b.n	800303e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800303a:	2300      	movs	r3, #0
 800303c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800303e:	f001 fc09 	bl	8004854 <vPortExitCritical>

	return xReturn;
 8003042:	68fb      	ldr	r3, [r7, #12]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800304c:	b480      	push	{r7}
 800304e:	b085      	sub	sp, #20
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003056:	2300      	movs	r3, #0
 8003058:	60fb      	str	r3, [r7, #12]
 800305a:	e014      	b.n	8003086 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800305c:	4a0f      	ldr	r2, [pc, #60]	; (800309c <vQueueAddToRegistry+0x50>)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10b      	bne.n	8003080 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003068:	490c      	ldr	r1, [pc, #48]	; (800309c <vQueueAddToRegistry+0x50>)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003072:	4a0a      	ldr	r2, [pc, #40]	; (800309c <vQueueAddToRegistry+0x50>)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4413      	add	r3, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800307e:	e006      	b.n	800308e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	3301      	adds	r3, #1
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2b07      	cmp	r3, #7
 800308a:	d9e7      	bls.n	800305c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800308c:	bf00      	nop
 800308e:	bf00      	nop
 8003090:	3714      	adds	r7, #20
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	2000074c 	.word	0x2000074c

080030a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b086      	sub	sp, #24
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030b0:	f001 fba0 	bl	80047f4 <vPortEnterCritical>
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030ba:	b25b      	sxtb	r3, r3
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030c0:	d103      	bne.n	80030ca <vQueueWaitForMessageRestricted+0x2a>
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030d0:	b25b      	sxtb	r3, r3
 80030d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030d6:	d103      	bne.n	80030e0 <vQueueWaitForMessageRestricted+0x40>
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030e0:	f001 fbb8 	bl	8004854 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d106      	bne.n	80030fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	3324      	adds	r3, #36	; 0x24
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f000 fc3b 	bl	8003970 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff26 	bl	8002f4c <prvUnlockQueue>
	}
 8003100:	bf00      	nop
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003108:	b580      	push	{r7, lr}
 800310a:	b08e      	sub	sp, #56	; 0x38
 800310c:	af04      	add	r7, sp, #16
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003118:	2b00      	cmp	r3, #0
 800311a:	d10a      	bne.n	8003132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	f3bf 8f6f 	isb	sy
 8003128:	f3bf 8f4f 	dsb	sy
 800312c:	623b      	str	r3, [r7, #32]
}
 800312e:	bf00      	nop
 8003130:	e7fe      	b.n	8003130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003134:	2b00      	cmp	r3, #0
 8003136:	d10a      	bne.n	800314e <xTaskCreateStatic+0x46>
	__asm volatile
 8003138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61fb      	str	r3, [r7, #28]
}
 800314a:	bf00      	nop
 800314c:	e7fe      	b.n	800314c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800314e:	235c      	movs	r3, #92	; 0x5c
 8003150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	2b5c      	cmp	r3, #92	; 0x5c
 8003156:	d00a      	beq.n	800316e <xTaskCreateStatic+0x66>
	__asm volatile
 8003158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800315c:	f383 8811 	msr	BASEPRI, r3
 8003160:	f3bf 8f6f 	isb	sy
 8003164:	f3bf 8f4f 	dsb	sy
 8003168:	61bb      	str	r3, [r7, #24]
}
 800316a:	bf00      	nop
 800316c:	e7fe      	b.n	800316c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800316e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d01e      	beq.n	80031b4 <xTaskCreateStatic+0xac>
 8003176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003178:	2b00      	cmp	r3, #0
 800317a:	d01b      	beq.n	80031b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800317c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800317e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	2202      	movs	r2, #2
 800318a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800318e:	2300      	movs	r3, #0
 8003190:	9303      	str	r3, [sp, #12]
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	9302      	str	r3, [sp, #8]
 8003196:	f107 0314 	add.w	r3, r7, #20
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f850 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ae:	f000 f8dd 	bl	800336c <prvAddNewTaskToReadyList>
 80031b2:	e001      	b.n	80031b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80031b8:	697b      	ldr	r3, [r7, #20]
	}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b08c      	sub	sp, #48	; 0x30
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4613      	mov	r3, r2
 80031d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fc2e 	bl	8004a38 <pvPortMalloc>
 80031dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80031e4:	205c      	movs	r0, #92	; 0x5c
 80031e6:	f001 fc27 	bl	8004a38 <pvPortMalloc>
 80031ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
 80031f8:	e005      	b.n	8003206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f001 fce8 	bl	8004bd0 <vPortFree>
 8003200:	e001      	b.n	8003206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d017      	beq.n	800323c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003214:	88fa      	ldrh	r2, [r7, #6]
 8003216:	2300      	movs	r3, #0
 8003218:	9303      	str	r3, [sp, #12]
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	9302      	str	r3, [sp, #8]
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	9301      	str	r3, [sp, #4]
 8003222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f80e 	bl	800324c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003230:	69f8      	ldr	r0, [r7, #28]
 8003232:	f000 f89b 	bl	800336c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003236:	2301      	movs	r3, #1
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e002      	b.n	8003242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800323c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003242:	69bb      	ldr	r3, [r7, #24]
	}
 8003244:	4618      	mov	r0, r3
 8003246:	3720      	adds	r7, #32
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	461a      	mov	r2, r3
 8003264:	21a5      	movs	r1, #165	; 0xa5
 8003266:	f001 fdd1 	bl	8004e0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003274:	3b01      	subs	r3, #1
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4413      	add	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f023 0307 	bic.w	r3, r3, #7
 8003282:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <prvInitialiseNewTask+0x58>
	__asm volatile
 800328e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003292:	f383 8811 	msr	BASEPRI, r3
 8003296:	f3bf 8f6f 	isb	sy
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	617b      	str	r3, [r7, #20]
}
 80032a0:	bf00      	nop
 80032a2:	e7fe      	b.n	80032a2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01f      	beq.n	80032ea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032aa:	2300      	movs	r3, #0
 80032ac:	61fb      	str	r3, [r7, #28]
 80032ae:	e012      	b.n	80032d6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	4413      	add	r3, r2
 80032b6:	7819      	ldrb	r1, [r3, #0]
 80032b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	3334      	adds	r3, #52	; 0x34
 80032c0:	460a      	mov	r2, r1
 80032c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	4413      	add	r3, r2
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d006      	beq.n	80032de <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	3301      	adds	r3, #1
 80032d4:	61fb      	str	r3, [r7, #28]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	2b0f      	cmp	r3, #15
 80032da:	d9e9      	bls.n	80032b0 <prvInitialiseNewTask+0x64>
 80032dc:	e000      	b.n	80032e0 <prvInitialiseNewTask+0x94>
			{
				break;
 80032de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032e8:	e003      	b.n	80032f2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80032ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80032f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032f4:	2b37      	cmp	r3, #55	; 0x37
 80032f6:	d901      	bls.n	80032fc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80032f8:	2337      	movs	r3, #55	; 0x37
 80032fa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80032fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003300:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003304:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003306:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800330a:	2200      	movs	r2, #0
 800330c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800330e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003310:	3304      	adds	r3, #4
 8003312:	4618      	mov	r0, r3
 8003314:	f7ff f978 	bl	8002608 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800331a:	3318      	adds	r3, #24
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff f973 	bl	8002608 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003326:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800332e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003330:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003334:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800333a:	2200      	movs	r2, #0
 800333c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800333e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	68f9      	ldr	r1, [r7, #12]
 800334a:	69b8      	ldr	r0, [r7, #24]
 800334c:	f001 f928 	bl	80045a0 <pxPortInitialiseStack>
 8003350:	4602      	mov	r2, r0
 8003352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003354:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d002      	beq.n	8003362 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800335e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003362:	bf00      	nop
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
	...

0800336c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003374:	f001 fa3e 	bl	80047f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003378:	4b2d      	ldr	r3, [pc, #180]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	3301      	adds	r3, #1
 800337e:	4a2c      	ldr	r2, [pc, #176]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 8003380:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003390:	4b27      	ldr	r3, [pc, #156]	; (8003430 <prvAddNewTaskToReadyList+0xc4>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d110      	bne.n	80033ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003398:	f000 fc16 	bl	8003bc8 <prvInitialiseTaskLists>
 800339c:	e00d      	b.n	80033ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800339e:	4b26      	ldr	r3, [pc, #152]	; (8003438 <prvAddNewTaskToReadyList+0xcc>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d109      	bne.n	80033ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033a6:	4b23      	ldr	r3, [pc, #140]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d802      	bhi.n	80033ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80033b4:	4a1f      	ldr	r2, [pc, #124]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80033ba:	4b20      	ldr	r3, [pc, #128]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3301      	adds	r3, #1
 80033c0:	4a1e      	ldr	r2, [pc, #120]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033c2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033c4:	4b1d      	ldr	r3, [pc, #116]	; (800343c <prvAddNewTaskToReadyList+0xd0>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033d0:	4b1b      	ldr	r3, [pc, #108]	; (8003440 <prvAddNewTaskToReadyList+0xd4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d903      	bls.n	80033e0 <prvAddNewTaskToReadyList+0x74>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4a18      	ldr	r2, [pc, #96]	; (8003440 <prvAddNewTaskToReadyList+0xd4>)
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e4:	4613      	mov	r3, r2
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <prvAddNewTaskToReadyList+0xd8>)
 80033ee:	441a      	add	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f7ff f913 	bl	8002622 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80033fc:	f001 fa2a 	bl	8004854 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003400:	4b0d      	ldr	r3, [pc, #52]	; (8003438 <prvAddNewTaskToReadyList+0xcc>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d00e      	beq.n	8003426 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003408:	4b0a      	ldr	r3, [pc, #40]	; (8003434 <prvAddNewTaskToReadyList+0xc8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003412:	429a      	cmp	r2, r3
 8003414:	d207      	bcs.n	8003426 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003416:	4b0c      	ldr	r3, [pc, #48]	; (8003448 <prvAddNewTaskToReadyList+0xdc>)
 8003418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800341c:	601a      	str	r2, [r3, #0]
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	20000c60 	.word	0x20000c60
 8003434:	2000078c 	.word	0x2000078c
 8003438:	20000c6c 	.word	0x20000c6c
 800343c:	20000c7c 	.word	0x20000c7c
 8003440:	20000c68 	.word	0x20000c68
 8003444:	20000790 	.word	0x20000790
 8003448:	e000ed04 	.word	0xe000ed04

0800344c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d017      	beq.n	800348e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800345e:	4b13      	ldr	r3, [pc, #76]	; (80034ac <vTaskDelay+0x60>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <vTaskDelay+0x30>
	__asm volatile
 8003466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346a:	f383 8811 	msr	BASEPRI, r3
 800346e:	f3bf 8f6f 	isb	sy
 8003472:	f3bf 8f4f 	dsb	sy
 8003476:	60bb      	str	r3, [r7, #8]
}
 8003478:	bf00      	nop
 800347a:	e7fe      	b.n	800347a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800347c:	f000 f880 	bl	8003580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003480:	2100      	movs	r1, #0
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 fcea 	bl	8003e5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003488:	f000 f888 	bl	800359c <xTaskResumeAll>
 800348c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d107      	bne.n	80034a4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003494:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <vTaskDelay+0x64>)
 8003496:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80034a4:	bf00      	nop
 80034a6:	3710      	adds	r7, #16
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	20000c88 	.word	0x20000c88
 80034b0:	e000ed04 	.word	0xe000ed04

080034b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b08a      	sub	sp, #40	; 0x28
 80034b8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80034be:	2300      	movs	r3, #0
 80034c0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80034c2:	463a      	mov	r2, r7
 80034c4:	1d39      	adds	r1, r7, #4
 80034c6:	f107 0308 	add.w	r3, r7, #8
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7ff f848 	bl	8002560 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80034d0:	6839      	ldr	r1, [r7, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	9202      	str	r2, [sp, #8]
 80034d8:	9301      	str	r3, [sp, #4]
 80034da:	2300      	movs	r3, #0
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	2300      	movs	r3, #0
 80034e0:	460a      	mov	r2, r1
 80034e2:	4921      	ldr	r1, [pc, #132]	; (8003568 <vTaskStartScheduler+0xb4>)
 80034e4:	4821      	ldr	r0, [pc, #132]	; (800356c <vTaskStartScheduler+0xb8>)
 80034e6:	f7ff fe0f 	bl	8003108 <xTaskCreateStatic>
 80034ea:	4603      	mov	r3, r0
 80034ec:	4a20      	ldr	r2, [pc, #128]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034ee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80034f0:	4b1f      	ldr	r3, [pc, #124]	; (8003570 <vTaskStartScheduler+0xbc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d002      	beq.n	80034fe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80034f8:	2301      	movs	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e001      	b.n	8003502 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d102      	bne.n	800350e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003508:	f000 fcfc 	bl	8003f04 <xTimerCreateTimerTask>
 800350c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d116      	bne.n	8003542 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	613b      	str	r3, [r7, #16]
}
 8003526:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003528:	4b12      	ldr	r3, [pc, #72]	; (8003574 <vTaskStartScheduler+0xc0>)
 800352a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800352e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003530:	4b11      	ldr	r3, [pc, #68]	; (8003578 <vTaskStartScheduler+0xc4>)
 8003532:	2201      	movs	r2, #1
 8003534:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003536:	4b11      	ldr	r3, [pc, #68]	; (800357c <vTaskStartScheduler+0xc8>)
 8003538:	2200      	movs	r2, #0
 800353a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800353c:	f001 f8b8 	bl	80046b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003540:	e00e      	b.n	8003560 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003548:	d10a      	bne.n	8003560 <vTaskStartScheduler+0xac>
	__asm volatile
 800354a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800354e:	f383 8811 	msr	BASEPRI, r3
 8003552:	f3bf 8f6f 	isb	sy
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	60fb      	str	r3, [r7, #12]
}
 800355c:	bf00      	nop
 800355e:	e7fe      	b.n	800355e <vTaskStartScheduler+0xaa>
}
 8003560:	bf00      	nop
 8003562:	3718      	adds	r7, #24
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	08004ec8 	.word	0x08004ec8
 800356c:	08003b99 	.word	0x08003b99
 8003570:	20000c84 	.word	0x20000c84
 8003574:	20000c80 	.word	0x20000c80
 8003578:	20000c6c 	.word	0x20000c6c
 800357c:	20000c64 	.word	0x20000c64

08003580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003584:	4b04      	ldr	r3, [pc, #16]	; (8003598 <vTaskSuspendAll+0x18>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	3301      	adds	r3, #1
 800358a:	4a03      	ldr	r2, [pc, #12]	; (8003598 <vTaskSuspendAll+0x18>)
 800358c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	20000c88 	.word	0x20000c88

0800359c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80035a6:	2300      	movs	r3, #0
 80035a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <xTaskResumeAll+0x118>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10a      	bne.n	80035c8 <xTaskResumeAll+0x2c>
	__asm volatile
 80035b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b6:	f383 8811 	msr	BASEPRI, r3
 80035ba:	f3bf 8f6f 	isb	sy
 80035be:	f3bf 8f4f 	dsb	sy
 80035c2:	603b      	str	r3, [r7, #0]
}
 80035c4:	bf00      	nop
 80035c6:	e7fe      	b.n	80035c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80035c8:	f001 f914 	bl	80047f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80035cc:	4b39      	ldr	r3, [pc, #228]	; (80036b4 <xTaskResumeAll+0x118>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3b01      	subs	r3, #1
 80035d2:	4a38      	ldr	r2, [pc, #224]	; (80036b4 <xTaskResumeAll+0x118>)
 80035d4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035d6:	4b37      	ldr	r3, [pc, #220]	; (80036b4 <xTaskResumeAll+0x118>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d162      	bne.n	80036a4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80035de:	4b36      	ldr	r3, [pc, #216]	; (80036b8 <xTaskResumeAll+0x11c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d05e      	beq.n	80036a4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035e6:	e02f      	b.n	8003648 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <xTaskResumeAll+0x120>)
 80035ea:	68db      	ldr	r3, [r3, #12]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	3318      	adds	r3, #24
 80035f4:	4618      	mov	r0, r3
 80035f6:	f7ff f871 	bl	80026dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	3304      	adds	r3, #4
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff f86c 	bl	80026dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003608:	4b2d      	ldr	r3, [pc, #180]	; (80036c0 <xTaskResumeAll+0x124>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	429a      	cmp	r2, r3
 800360e:	d903      	bls.n	8003618 <xTaskResumeAll+0x7c>
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <xTaskResumeAll+0x124>)
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	4613      	mov	r3, r2
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4a27      	ldr	r2, [pc, #156]	; (80036c4 <xTaskResumeAll+0x128>)
 8003626:	441a      	add	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	3304      	adds	r3, #4
 800362c:	4619      	mov	r1, r3
 800362e:	4610      	mov	r0, r2
 8003630:	f7fe fff7 	bl	8002622 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003638:	4b23      	ldr	r3, [pc, #140]	; (80036c8 <xTaskResumeAll+0x12c>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003642:	4b22      	ldr	r3, [pc, #136]	; (80036cc <xTaskResumeAll+0x130>)
 8003644:	2201      	movs	r2, #1
 8003646:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003648:	4b1c      	ldr	r3, [pc, #112]	; (80036bc <xTaskResumeAll+0x120>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1cb      	bne.n	80035e8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003656:	f000 fb55 	bl	8003d04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800365a:	4b1d      	ldr	r3, [pc, #116]	; (80036d0 <xTaskResumeAll+0x134>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003666:	f000 f847 	bl	80036f8 <xTaskIncrementTick>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <xTaskResumeAll+0x130>)
 8003672:	2201      	movs	r2, #1
 8003674:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3b01      	subs	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f1      	bne.n	8003666 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003682:	4b13      	ldr	r3, [pc, #76]	; (80036d0 <xTaskResumeAll+0x134>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003688:	4b10      	ldr	r3, [pc, #64]	; (80036cc <xTaskResumeAll+0x130>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d009      	beq.n	80036a4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003690:	2301      	movs	r3, #1
 8003692:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003694:	4b0f      	ldr	r3, [pc, #60]	; (80036d4 <xTaskResumeAll+0x138>)
 8003696:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80036a4:	f001 f8d6 	bl	8004854 <vPortExitCritical>

	return xAlreadyYielded;
 80036a8:	68bb      	ldr	r3, [r7, #8]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000c88 	.word	0x20000c88
 80036b8:	20000c60 	.word	0x20000c60
 80036bc:	20000c20 	.word	0x20000c20
 80036c0:	20000c68 	.word	0x20000c68
 80036c4:	20000790 	.word	0x20000790
 80036c8:	2000078c 	.word	0x2000078c
 80036cc:	20000c74 	.word	0x20000c74
 80036d0:	20000c70 	.word	0x20000c70
 80036d4:	e000ed04 	.word	0xe000ed04

080036d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80036de:	4b05      	ldr	r3, [pc, #20]	; (80036f4 <xTaskGetTickCount+0x1c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80036e4:	687b      	ldr	r3, [r7, #4]
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000c64 	.word	0x20000c64

080036f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003702:	4b4f      	ldr	r3, [pc, #316]	; (8003840 <xTaskIncrementTick+0x148>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2b00      	cmp	r3, #0
 8003708:	f040 808f 	bne.w	800382a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800370c:	4b4d      	ldr	r3, [pc, #308]	; (8003844 <xTaskIncrementTick+0x14c>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3301      	adds	r3, #1
 8003712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003714:	4a4b      	ldr	r2, [pc, #300]	; (8003844 <xTaskIncrementTick+0x14c>)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d120      	bne.n	8003762 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003720:	4b49      	ldr	r3, [pc, #292]	; (8003848 <xTaskIncrementTick+0x150>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <xTaskIncrementTick+0x48>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	603b      	str	r3, [r7, #0]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <xTaskIncrementTick+0x46>
 8003740:	4b41      	ldr	r3, [pc, #260]	; (8003848 <xTaskIncrementTick+0x150>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	4b41      	ldr	r3, [pc, #260]	; (800384c <xTaskIncrementTick+0x154>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a3f      	ldr	r2, [pc, #252]	; (8003848 <xTaskIncrementTick+0x150>)
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	4a3f      	ldr	r2, [pc, #252]	; (800384c <xTaskIncrementTick+0x154>)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6013      	str	r3, [r2, #0]
 8003754:	4b3e      	ldr	r3, [pc, #248]	; (8003850 <xTaskIncrementTick+0x158>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	4a3d      	ldr	r2, [pc, #244]	; (8003850 <xTaskIncrementTick+0x158>)
 800375c:	6013      	str	r3, [r2, #0]
 800375e:	f000 fad1 	bl	8003d04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003762:	4b3c      	ldr	r3, [pc, #240]	; (8003854 <xTaskIncrementTick+0x15c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	429a      	cmp	r2, r3
 800376a:	d349      	bcc.n	8003800 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <xTaskIncrementTick+0x150>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d104      	bne.n	8003780 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003776:	4b37      	ldr	r3, [pc, #220]	; (8003854 <xTaskIncrementTick+0x15c>)
 8003778:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800377c:	601a      	str	r2, [r3, #0]
					break;
 800377e:	e03f      	b.n	8003800 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003780:	4b31      	ldr	r3, [pc, #196]	; (8003848 <xTaskIncrementTick+0x150>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	429a      	cmp	r2, r3
 8003796:	d203      	bcs.n	80037a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003798:	4a2e      	ldr	r2, [pc, #184]	; (8003854 <xTaskIncrementTick+0x15c>)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800379e:	e02f      	b.n	8003800 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7fe ff99 	bl	80026dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d004      	beq.n	80037bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	3318      	adds	r3, #24
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7fe ff90 	bl	80026dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <xTaskIncrementTick+0x160>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d903      	bls.n	80037d0 <xTaskIncrementTick+0xd8>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037cc:	4a22      	ldr	r2, [pc, #136]	; (8003858 <xTaskIncrementTick+0x160>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <xTaskIncrementTick+0x164>)
 80037de:	441a      	add	r2, r3
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	3304      	adds	r3, #4
 80037e4:	4619      	mov	r1, r3
 80037e6:	4610      	mov	r0, r2
 80037e8:	f7fe ff1b 	bl	8002622 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <xTaskIncrementTick+0x168>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d3b8      	bcc.n	800376c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80037fa:	2301      	movs	r3, #1
 80037fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037fe:	e7b5      	b.n	800376c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003800:	4b17      	ldr	r3, [pc, #92]	; (8003860 <xTaskIncrementTick+0x168>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003806:	4915      	ldr	r1, [pc, #84]	; (800385c <xTaskIncrementTick+0x164>)
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d901      	bls.n	800381c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003818:	2301      	movs	r3, #1
 800381a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <xTaskIncrementTick+0x16c>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d007      	beq.n	8003834 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003824:	2301      	movs	r3, #1
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	e004      	b.n	8003834 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <xTaskIncrementTick+0x170>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	4a0d      	ldr	r2, [pc, #52]	; (8003868 <xTaskIncrementTick+0x170>)
 8003832:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003834:	697b      	ldr	r3, [r7, #20]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000c88 	.word	0x20000c88
 8003844:	20000c64 	.word	0x20000c64
 8003848:	20000c18 	.word	0x20000c18
 800384c:	20000c1c 	.word	0x20000c1c
 8003850:	20000c78 	.word	0x20000c78
 8003854:	20000c80 	.word	0x20000c80
 8003858:	20000c68 	.word	0x20000c68
 800385c:	20000790 	.word	0x20000790
 8003860:	2000078c 	.word	0x2000078c
 8003864:	20000c74 	.word	0x20000c74
 8003868:	20000c70 	.word	0x20000c70

0800386c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003872:	4b28      	ldr	r3, [pc, #160]	; (8003914 <vTaskSwitchContext+0xa8>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800387a:	4b27      	ldr	r3, [pc, #156]	; (8003918 <vTaskSwitchContext+0xac>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003880:	e041      	b.n	8003906 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <vTaskSwitchContext+0xac>)
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003888:	4b24      	ldr	r3, [pc, #144]	; (800391c <vTaskSwitchContext+0xb0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	e010      	b.n	80038b2 <vTaskSwitchContext+0x46>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <vTaskSwitchContext+0x40>
	__asm volatile
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	607b      	str	r3, [r7, #4]
}
 80038a8:	bf00      	nop
 80038aa:	e7fe      	b.n	80038aa <vTaskSwitchContext+0x3e>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	60fb      	str	r3, [r7, #12]
 80038b2:	491b      	ldr	r1, [pc, #108]	; (8003920 <vTaskSwitchContext+0xb4>)
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0e4      	beq.n	8003890 <vTaskSwitchContext+0x24>
 80038c6:	68fa      	ldr	r2, [r7, #12]
 80038c8:	4613      	mov	r3, r2
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4a13      	ldr	r2, [pc, #76]	; (8003920 <vTaskSwitchContext+0xb4>)
 80038d2:	4413      	add	r3, r2
 80038d4:	60bb      	str	r3, [r7, #8]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	605a      	str	r2, [r3, #4]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	3308      	adds	r3, #8
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d104      	bne.n	80038f6 <vTaskSwitchContext+0x8a>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	605a      	str	r2, [r3, #4]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	4a09      	ldr	r2, [pc, #36]	; (8003924 <vTaskSwitchContext+0xb8>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <vTaskSwitchContext+0xb0>)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6013      	str	r3, [r2, #0]
}
 8003906:	bf00      	nop
 8003908:	3714      	adds	r7, #20
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000c88 	.word	0x20000c88
 8003918:	20000c74 	.word	0x20000c74
 800391c:	20000c68 	.word	0x20000c68
 8003920:	20000790 	.word	0x20000790
 8003924:	2000078c 	.word	0x2000078c

08003928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b084      	sub	sp, #16
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10a      	bne.n	800394e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800393c:	f383 8811 	msr	BASEPRI, r3
 8003940:	f3bf 8f6f 	isb	sy
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	60fb      	str	r3, [r7, #12]
}
 800394a:	bf00      	nop
 800394c:	e7fe      	b.n	800394c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <vTaskPlaceOnEventList+0x44>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3318      	adds	r3, #24
 8003954:	4619      	mov	r1, r3
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fe87 	bl	800266a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800395c:	2101      	movs	r1, #1
 800395e:	6838      	ldr	r0, [r7, #0]
 8003960:	f000 fa7c 	bl	8003e5c <prvAddCurrentTaskToDelayedList>
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000078c 	.word	0x2000078c

08003970 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10a      	bne.n	8003998 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003986:	f383 8811 	msr	BASEPRI, r3
 800398a:	f3bf 8f6f 	isb	sy
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	617b      	str	r3, [r7, #20]
}
 8003994:	bf00      	nop
 8003996:	e7fe      	b.n	8003996 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003998:	4b0a      	ldr	r3, [pc, #40]	; (80039c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3318      	adds	r3, #24
 800399e:	4619      	mov	r1, r3
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7fe fe3e 	bl	8002622 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80039ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	68b8      	ldr	r0, [r7, #8]
 80039b6:	f000 fa51 	bl	8003e5c <prvAddCurrentTaskToDelayedList>
	}
 80039ba:	bf00      	nop
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000078c 	.word	0x2000078c

080039c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80039de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e2:	f383 8811 	msr	BASEPRI, r3
 80039e6:	f3bf 8f6f 	isb	sy
 80039ea:	f3bf 8f4f 	dsb	sy
 80039ee:	60fb      	str	r3, [r7, #12]
}
 80039f0:	bf00      	nop
 80039f2:	e7fe      	b.n	80039f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	3318      	adds	r3, #24
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fe fe6f 	bl	80026dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039fe:	4b1e      	ldr	r3, [pc, #120]	; (8003a78 <xTaskRemoveFromEventList+0xb0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fe66 	bl	80026dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <xTaskRemoveFromEventList+0xb4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d903      	bls.n	8003a24 <xTaskRemoveFromEventList+0x5c>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a20:	4a16      	ldr	r2, [pc, #88]	; (8003a7c <xTaskRemoveFromEventList+0xb4>)
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4a13      	ldr	r2, [pc, #76]	; (8003a80 <xTaskRemoveFromEventList+0xb8>)
 8003a32:	441a      	add	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f7fe fdf1 	bl	8002622 <vListInsertEnd>
 8003a40:	e005      	b.n	8003a4e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	3318      	adds	r3, #24
 8003a46:	4619      	mov	r1, r3
 8003a48:	480e      	ldr	r0, [pc, #56]	; (8003a84 <xTaskRemoveFromEventList+0xbc>)
 8003a4a:	f7fe fdea 	bl	8002622 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <xTaskRemoveFromEventList+0xc0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d905      	bls.n	8003a68 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003a60:	4b0a      	ldr	r3, [pc, #40]	; (8003a8c <xTaskRemoveFromEventList+0xc4>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	601a      	str	r2, [r3, #0]
 8003a66:	e001      	b.n	8003a6c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a6c:	697b      	ldr	r3, [r7, #20]
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000c88 	.word	0x20000c88
 8003a7c:	20000c68 	.word	0x20000c68
 8003a80:	20000790 	.word	0x20000790
 8003a84:	20000c20 	.word	0x20000c20
 8003a88:	2000078c 	.word	0x2000078c
 8003a8c:	20000c74 	.word	0x20000c74

08003a90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a90:	b480      	push	{r7}
 8003a92:	b083      	sub	sp, #12
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <vTaskInternalSetTimeOutState+0x24>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <vTaskInternalSetTimeOutState+0x28>)
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	605a      	str	r2, [r3, #4]
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr
 8003ab4:	20000c78 	.word	0x20000c78
 8003ab8:	20000c64 	.word	0x20000c64

08003abc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d10a      	bne.n	8003afe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aec:	f383 8811 	msr	BASEPRI, r3
 8003af0:	f3bf 8f6f 	isb	sy
 8003af4:	f3bf 8f4f 	dsb	sy
 8003af8:	60fb      	str	r3, [r7, #12]
}
 8003afa:	bf00      	nop
 8003afc:	e7fe      	b.n	8003afc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003afe:	f000 fe79 	bl	80047f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b02:	4b1d      	ldr	r3, [pc, #116]	; (8003b78 <xTaskCheckForTimeOut+0xbc>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b1a:	d102      	bne.n	8003b22 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	e023      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4b15      	ldr	r3, [pc, #84]	; (8003b7c <xTaskCheckForTimeOut+0xc0>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d007      	beq.n	8003b3e <xTaskCheckForTimeOut+0x82>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d302      	bcc.n	8003b3e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	61fb      	str	r3, [r7, #28]
 8003b3c:	e015      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d20b      	bcs.n	8003b60 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	1ad2      	subs	r2, r2, r3
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff ff9b 	bl	8003a90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e004      	b.n	8003b6a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	2200      	movs	r2, #0
 8003b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b66:	2301      	movs	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b6a:	f000 fe73 	bl	8004854 <vPortExitCritical>

	return xReturn;
 8003b6e:	69fb      	ldr	r3, [r7, #28]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	3720      	adds	r7, #32
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	20000c64 	.word	0x20000c64
 8003b7c:	20000c78 	.word	0x20000c78

08003b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <vTaskMissedYield+0x14>)
 8003b86:	2201      	movs	r2, #1
 8003b88:	601a      	str	r2, [r3, #0]
}
 8003b8a:	bf00      	nop
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr
 8003b94:	20000c74 	.word	0x20000c74

08003b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003ba0:	f000 f852 	bl	8003c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ba4:	4b06      	ldr	r3, [pc, #24]	; (8003bc0 <prvIdleTask+0x28>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d9f9      	bls.n	8003ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003bac:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <prvIdleTask+0x2c>)
 8003bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	f3bf 8f4f 	dsb	sy
 8003bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003bbc:	e7f0      	b.n	8003ba0 <prvIdleTask+0x8>
 8003bbe:	bf00      	nop
 8003bc0:	20000790 	.word	0x20000790
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bce:	2300      	movs	r3, #0
 8003bd0:	607b      	str	r3, [r7, #4]
 8003bd2:	e00c      	b.n	8003bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4413      	add	r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	4a12      	ldr	r2, [pc, #72]	; (8003c28 <prvInitialiseTaskLists+0x60>)
 8003be0:	4413      	add	r3, r2
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fcf0 	bl	80025c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	3301      	adds	r3, #1
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2b37      	cmp	r3, #55	; 0x37
 8003bf2:	d9ef      	bls.n	8003bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003bf4:	480d      	ldr	r0, [pc, #52]	; (8003c2c <prvInitialiseTaskLists+0x64>)
 8003bf6:	f7fe fce7 	bl	80025c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003bfa:	480d      	ldr	r0, [pc, #52]	; (8003c30 <prvInitialiseTaskLists+0x68>)
 8003bfc:	f7fe fce4 	bl	80025c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c00:	480c      	ldr	r0, [pc, #48]	; (8003c34 <prvInitialiseTaskLists+0x6c>)
 8003c02:	f7fe fce1 	bl	80025c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c06:	480c      	ldr	r0, [pc, #48]	; (8003c38 <prvInitialiseTaskLists+0x70>)
 8003c08:	f7fe fcde 	bl	80025c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c0c:	480b      	ldr	r0, [pc, #44]	; (8003c3c <prvInitialiseTaskLists+0x74>)
 8003c0e:	f7fe fcdb 	bl	80025c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <prvInitialiseTaskLists+0x78>)
 8003c14:	4a05      	ldr	r2, [pc, #20]	; (8003c2c <prvInitialiseTaskLists+0x64>)
 8003c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c18:	4b0a      	ldr	r3, [pc, #40]	; (8003c44 <prvInitialiseTaskLists+0x7c>)
 8003c1a:	4a05      	ldr	r2, [pc, #20]	; (8003c30 <prvInitialiseTaskLists+0x68>)
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	3708      	adds	r7, #8
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000790 	.word	0x20000790
 8003c2c:	20000bf0 	.word	0x20000bf0
 8003c30:	20000c04 	.word	0x20000c04
 8003c34:	20000c20 	.word	0x20000c20
 8003c38:	20000c34 	.word	0x20000c34
 8003c3c:	20000c4c 	.word	0x20000c4c
 8003c40:	20000c18 	.word	0x20000c18
 8003c44:	20000c1c 	.word	0x20000c1c

08003c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c4e:	e019      	b.n	8003c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003c50:	f000 fdd0 	bl	80047f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c54:	4b10      	ldr	r3, [pc, #64]	; (8003c98 <prvCheckTasksWaitingTermination+0x50>)
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4618      	mov	r0, r3
 8003c62:	f7fe fd3b 	bl	80026dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c66:	4b0d      	ldr	r3, [pc, #52]	; (8003c9c <prvCheckTasksWaitingTermination+0x54>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	4a0b      	ldr	r2, [pc, #44]	; (8003c9c <prvCheckTasksWaitingTermination+0x54>)
 8003c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c70:	4b0b      	ldr	r3, [pc, #44]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3b01      	subs	r3, #1
 8003c76:	4a0a      	ldr	r2, [pc, #40]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c7a:	f000 fdeb 	bl	8004854 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f810 	bl	8003ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvCheckTasksWaitingTermination+0x58>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d1e1      	bne.n	8003c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	20000c34 	.word	0x20000c34
 8003c9c:	20000c60 	.word	0x20000c60
 8003ca0:	20000c48 	.word	0x20000c48

08003ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b084      	sub	sp, #16
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d108      	bne.n	8003cc8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f000 ff88 	bl	8004bd0 <vPortFree>
				vPortFree( pxTCB );
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 ff85 	bl	8004bd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003cc6:	e018      	b.n	8003cfa <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d103      	bne.n	8003cda <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 ff7c 	bl	8004bd0 <vPortFree>
	}
 8003cd8:	e00f      	b.n	8003cfa <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d00a      	beq.n	8003cfa <prvDeleteTCB+0x56>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	60fb      	str	r3, [r7, #12]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <prvDeleteTCB+0x54>
	}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
	...

08003d04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d0a:	4b0c      	ldr	r3, [pc, #48]	; (8003d3c <prvResetNextTaskUnblockTime+0x38>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d104      	bne.n	8003d1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <prvResetNextTaskUnblockTime+0x3c>)
 8003d16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003d1c:	e008      	b.n	8003d30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <prvResetNextTaskUnblockTime+0x38>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <prvResetNextTaskUnblockTime+0x3c>)
 8003d2e:	6013      	str	r3, [r2, #0]
}
 8003d30:	bf00      	nop
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr
 8003d3c:	20000c18 	.word	0x20000c18
 8003d40:	20000c80 	.word	0x20000c80

08003d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <xTaskGetSchedulerState+0x34>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d102      	bne.n	8003d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003d52:	2301      	movs	r3, #1
 8003d54:	607b      	str	r3, [r7, #4]
 8003d56:	e008      	b.n	8003d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d58:	4b08      	ldr	r3, [pc, #32]	; (8003d7c <xTaskGetSchedulerState+0x38>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003d60:	2302      	movs	r3, #2
 8003d62:	607b      	str	r3, [r7, #4]
 8003d64:	e001      	b.n	8003d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d6a:	687b      	ldr	r3, [r7, #4]
	}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	20000c6c 	.word	0x20000c6c
 8003d7c:	20000c88 	.word	0x20000c88

08003d80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d056      	beq.n	8003e44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d96:	4b2e      	ldr	r3, [pc, #184]	; (8003e50 <xTaskPriorityDisinherit+0xd0>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d00a      	beq.n	8003db6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d10a      	bne.n	8003dd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc2:	f383 8811 	msr	BASEPRI, r3
 8003dc6:	f3bf 8f6f 	isb	sy
 8003dca:	f3bf 8f4f 	dsb	sy
 8003dce:	60bb      	str	r3, [r7, #8]
}
 8003dd0:	bf00      	nop
 8003dd2:	e7fe      	b.n	8003dd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d02c      	beq.n	8003e44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d128      	bne.n	8003e44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	3304      	adds	r3, #4
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fc70 	bl	80026dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4b0f      	ldr	r3, [pc, #60]	; (8003e54 <xTaskPriorityDisinherit+0xd4>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	d903      	bls.n	8003e24 <xTaskPriorityDisinherit+0xa4>
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	4a0c      	ldr	r2, [pc, #48]	; (8003e54 <xTaskPriorityDisinherit+0xd4>)
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	4a09      	ldr	r2, [pc, #36]	; (8003e58 <xTaskPriorityDisinherit+0xd8>)
 8003e32:	441a      	add	r2, r3
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	3304      	adds	r3, #4
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	f7fe fbf1 	bl	8002622 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e44:	697b      	ldr	r3, [r7, #20]
	}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	2000078c 	.word	0x2000078c
 8003e54:	20000c68 	.word	0x20000c68
 8003e58:	20000790 	.word	0x20000790

08003e5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e66:	4b21      	ldr	r3, [pc, #132]	; (8003eec <prvAddCurrentTaskToDelayedList+0x90>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	3304      	adds	r3, #4
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe fc32 	bl	80026dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e7e:	d10a      	bne.n	8003e96 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d007      	beq.n	8003e96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e86:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	3304      	adds	r3, #4
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4819      	ldr	r0, [pc, #100]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e90:	f7fe fbc7 	bl	8002622 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e94:	e026      	b.n	8003ee4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68ba      	ldr	r2, [r7, #8]
 8003ea4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ea6:	68ba      	ldr	r2, [r7, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d209      	bcs.n	8003ec2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eae:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	3304      	adds	r3, #4
 8003eb8:	4619      	mov	r1, r3
 8003eba:	4610      	mov	r0, r2
 8003ebc:	f7fe fbd5 	bl	800266a <vListInsert>
}
 8003ec0:	e010      	b.n	8003ee4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec2:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	3304      	adds	r3, #4
 8003ecc:	4619      	mov	r1, r3
 8003ece:	4610      	mov	r0, r2
 8003ed0:	f7fe fbcb 	bl	800266a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d202      	bcs.n	8003ee4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	6013      	str	r3, [r2, #0]
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}
 8003eec:	20000c64 	.word	0x20000c64
 8003ef0:	2000078c 	.word	0x2000078c
 8003ef4:	20000c4c 	.word	0x20000c4c
 8003ef8:	20000c1c 	.word	0x20000c1c
 8003efc:	20000c18 	.word	0x20000c18
 8003f00:	20000c80 	.word	0x20000c80

08003f04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08a      	sub	sp, #40	; 0x28
 8003f08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f0e:	f000 fb07 	bl	8004520 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f12:	4b1c      	ldr	r3, [pc, #112]	; (8003f84 <xTimerCreateTimerTask+0x80>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d021      	beq.n	8003f5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f22:	1d3a      	adds	r2, r7, #4
 8003f24:	f107 0108 	add.w	r1, r7, #8
 8003f28:	f107 030c 	add.w	r3, r7, #12
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f7fe fb31 	bl	8002594 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	9202      	str	r2, [sp, #8]
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	9300      	str	r3, [sp, #0]
 8003f40:	2300      	movs	r3, #0
 8003f42:	460a      	mov	r2, r1
 8003f44:	4910      	ldr	r1, [pc, #64]	; (8003f88 <xTimerCreateTimerTask+0x84>)
 8003f46:	4811      	ldr	r0, [pc, #68]	; (8003f8c <xTimerCreateTimerTask+0x88>)
 8003f48:	f7ff f8de 	bl	8003108 <xTaskCreateStatic>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	4a10      	ldr	r2, [pc, #64]	; (8003f90 <xTimerCreateTimerTask+0x8c>)
 8003f50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f52:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <xTimerCreateTimerTask+0x8c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	613b      	str	r3, [r7, #16]
}
 8003f76:	bf00      	nop
 8003f78:	e7fe      	b.n	8003f78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f7a:	697b      	ldr	r3, [r7, #20]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3718      	adds	r7, #24
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	20000cbc 	.word	0x20000cbc
 8003f88:	08004ed0 	.word	0x08004ed0
 8003f8c:	080040c9 	.word	0x080040c9
 8003f90:	20000cc0 	.word	0x20000cc0

08003f94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b08a      	sub	sp, #40	; 0x28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
 8003fa0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d10a      	bne.n	8003fc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	623b      	str	r3, [r7, #32]
}
 8003fbe:	bf00      	nop
 8003fc0:	e7fe      	b.n	8003fc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fc2:	4b1a      	ldr	r3, [pc, #104]	; (800402c <xTimerGenericCommand+0x98>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d02a      	beq.n	8004020 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2b05      	cmp	r3, #5
 8003fda:	dc18      	bgt.n	800400e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fdc:	f7ff feb2 	bl	8003d44 <xTaskGetSchedulerState>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d109      	bne.n	8003ffa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fe6:	4b11      	ldr	r3, [pc, #68]	; (800402c <xTimerGenericCommand+0x98>)
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	f107 0110 	add.w	r1, r7, #16
 8003fee:	2300      	movs	r3, #0
 8003ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ff2:	f7fe fca1 	bl	8002938 <xQueueGenericSend>
 8003ff6:	6278      	str	r0, [r7, #36]	; 0x24
 8003ff8:	e012      	b.n	8004020 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <xTimerGenericCommand+0x98>)
 8003ffc:	6818      	ldr	r0, [r3, #0]
 8003ffe:	f107 0110 	add.w	r1, r7, #16
 8004002:	2300      	movs	r3, #0
 8004004:	2200      	movs	r2, #0
 8004006:	f7fe fc97 	bl	8002938 <xQueueGenericSend>
 800400a:	6278      	str	r0, [r7, #36]	; 0x24
 800400c:	e008      	b.n	8004020 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800400e:	4b07      	ldr	r3, [pc, #28]	; (800402c <xTimerGenericCommand+0x98>)
 8004010:	6818      	ldr	r0, [r3, #0]
 8004012:	f107 0110 	add.w	r1, r7, #16
 8004016:	2300      	movs	r3, #0
 8004018:	683a      	ldr	r2, [r7, #0]
 800401a:	f7fe fd8b 	bl	8002b34 <xQueueGenericSendFromISR>
 800401e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004022:	4618      	mov	r0, r3
 8004024:	3728      	adds	r7, #40	; 0x28
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	20000cbc 	.word	0x20000cbc

08004030 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b088      	sub	sp, #32
 8004034:	af02      	add	r7, sp, #8
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800403a:	4b22      	ldr	r3, [pc, #136]	; (80040c4 <prvProcessExpiredTimer+0x94>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3304      	adds	r3, #4
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe fb47 	bl	80026dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004054:	f003 0304 	and.w	r3, r3, #4
 8004058:	2b00      	cmp	r3, #0
 800405a:	d022      	beq.n	80040a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	699a      	ldr	r2, [r3, #24]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	18d1      	adds	r1, r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	683a      	ldr	r2, [r7, #0]
 8004068:	6978      	ldr	r0, [r7, #20]
 800406a:	f000 f8d1 	bl	8004210 <prvInsertTimerInActiveList>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01f      	beq.n	80040b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004074:	2300      	movs	r3, #0
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	2300      	movs	r3, #0
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	2100      	movs	r1, #0
 800407e:	6978      	ldr	r0, [r7, #20]
 8004080:	f7ff ff88 	bl	8003f94 <xTimerGenericCommand>
 8004084:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800408c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004090:	f383 8811 	msr	BASEPRI, r3
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	f3bf 8f4f 	dsb	sy
 800409c:	60fb      	str	r3, [r7, #12]
}
 800409e:	bf00      	nop
 80040a0:	e7fe      	b.n	80040a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040a8:	f023 0301 	bic.w	r3, r3, #1
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	6978      	ldr	r0, [r7, #20]
 80040ba:	4798      	blx	r3
}
 80040bc:	bf00      	nop
 80040be:	3718      	adds	r7, #24
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000cb4 	.word	0x20000cb4

080040c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040d0:	f107 0308 	add.w	r3, r7, #8
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 f857 	bl	8004188 <prvGetNextExpireTime>
 80040da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	4619      	mov	r1, r3
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 f803 	bl	80040ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040e6:	f000 f8d5 	bl	8004294 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040ea:	e7f1      	b.n	80040d0 <prvTimerTask+0x8>

080040ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040f6:	f7ff fa43 	bl	8003580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	4618      	mov	r0, r3
 8004100:	f000 f866 	bl	80041d0 <prvSampleTimeNow>
 8004104:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d130      	bne.n	800416e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10a      	bne.n	8004128 <prvProcessTimerOrBlockTask+0x3c>
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	429a      	cmp	r2, r3
 8004118:	d806      	bhi.n	8004128 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800411a:	f7ff fa3f 	bl	800359c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f7ff ff85 	bl	8004030 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004126:	e024      	b.n	8004172 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d008      	beq.n	8004140 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800412e:	4b13      	ldr	r3, [pc, #76]	; (800417c <prvProcessTimerOrBlockTask+0x90>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <prvProcessTimerOrBlockTask+0x50>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <prvProcessTimerOrBlockTask+0x52>
 800413c:	2300      	movs	r3, #0
 800413e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004140:	4b0f      	ldr	r3, [pc, #60]	; (8004180 <prvProcessTimerOrBlockTask+0x94>)
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	683a      	ldr	r2, [r7, #0]
 800414c:	4619      	mov	r1, r3
 800414e:	f7fe ffa7 	bl	80030a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004152:	f7ff fa23 	bl	800359c <xTaskResumeAll>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10a      	bne.n	8004172 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800415c:	4b09      	ldr	r3, [pc, #36]	; (8004184 <prvProcessTimerOrBlockTask+0x98>)
 800415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004162:	601a      	str	r2, [r3, #0]
 8004164:	f3bf 8f4f 	dsb	sy
 8004168:	f3bf 8f6f 	isb	sy
}
 800416c:	e001      	b.n	8004172 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800416e:	f7ff fa15 	bl	800359c <xTaskResumeAll>
}
 8004172:	bf00      	nop
 8004174:	3710      	adds	r7, #16
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000cb8 	.word	0x20000cb8
 8004180:	20000cbc 	.word	0x20000cbc
 8004184:	e000ed04 	.word	0xe000ed04

08004188 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004188:	b480      	push	{r7}
 800418a:	b085      	sub	sp, #20
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004190:	4b0e      	ldr	r3, [pc, #56]	; (80041cc <prvGetNextExpireTime+0x44>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d101      	bne.n	800419e <prvGetNextExpireTime+0x16>
 800419a:	2201      	movs	r2, #1
 800419c:	e000      	b.n	80041a0 <prvGetNextExpireTime+0x18>
 800419e:	2200      	movs	r2, #0
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d105      	bne.n	80041b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041ac:	4b07      	ldr	r3, [pc, #28]	; (80041cc <prvGetNextExpireTime+0x44>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]
 80041b6:	e001      	b.n	80041bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041bc:	68fb      	ldr	r3, [r7, #12]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
 80041ca:	bf00      	nop
 80041cc:	20000cb4 	.word	0x20000cb4

080041d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b084      	sub	sp, #16
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041d8:	f7ff fa7e 	bl	80036d8 <xTaskGetTickCount>
 80041dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041de:	4b0b      	ldr	r3, [pc, #44]	; (800420c <prvSampleTimeNow+0x3c>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d205      	bcs.n	80041f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041e8:	f000 f936 	bl	8004458 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	601a      	str	r2, [r3, #0]
 80041f2:	e002      	b.n	80041fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041fa:	4a04      	ldr	r2, [pc, #16]	; (800420c <prvSampleTimeNow+0x3c>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004200:	68fb      	ldr	r3, [r7, #12]
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	20000cc4 	.word	0x20000cc4

08004210 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800421e:	2300      	movs	r3, #0
 8004220:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	68ba      	ldr	r2, [r7, #8]
 8004226:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800422e:	68ba      	ldr	r2, [r7, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	429a      	cmp	r2, r3
 8004234:	d812      	bhi.n	800425c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad2      	subs	r2, r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e01b      	b.n	8004282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800424a:	4b10      	ldr	r3, [pc, #64]	; (800428c <prvInsertTimerInActiveList+0x7c>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe fa08 	bl	800266a <vListInsert>
 800425a:	e012      	b.n	8004282 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	429a      	cmp	r2, r3
 8004262:	d206      	bcs.n	8004272 <prvInsertTimerInActiveList+0x62>
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d302      	bcc.n	8004272 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800426c:	2301      	movs	r3, #1
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	e007      	b.n	8004282 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <prvInsertTimerInActiveList+0x80>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f7fe f9f4 	bl	800266a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004282:	697b      	ldr	r3, [r7, #20]
}
 8004284:	4618      	mov	r0, r3
 8004286:	3718      	adds	r7, #24
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}
 800428c:	20000cb8 	.word	0x20000cb8
 8004290:	20000cb4 	.word	0x20000cb4

08004294 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	; 0x38
 8004298:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800429a:	e0ca      	b.n	8004432 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	da18      	bge.n	80042d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042a2:	1d3b      	adds	r3, r7, #4
 80042a4:	3304      	adds	r3, #4
 80042a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d10a      	bne.n	80042c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	61fb      	str	r3, [r7, #28]
}
 80042c0:	bf00      	nop
 80042c2:	e7fe      	b.n	80042c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ca:	6850      	ldr	r0, [r2, #4]
 80042cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042ce:	6892      	ldr	r2, [r2, #8]
 80042d0:	4611      	mov	r1, r2
 80042d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f2c0 80ab 	blt.w	8004432 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	3304      	adds	r3, #4
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7fe f9f5 	bl	80026dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042f2:	463b      	mov	r3, r7
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff ff6b 	bl	80041d0 <prvSampleTimeNow>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b09      	cmp	r3, #9
 8004300:	f200 8096 	bhi.w	8004430 <prvProcessReceivedCommands+0x19c>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <prvProcessReceivedCommands+0x78>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004335 	.word	0x08004335
 8004310:	08004335 	.word	0x08004335
 8004314:	08004335 	.word	0x08004335
 8004318:	080043a9 	.word	0x080043a9
 800431c:	080043bd 	.word	0x080043bd
 8004320:	08004407 	.word	0x08004407
 8004324:	08004335 	.word	0x08004335
 8004328:	08004335 	.word	0x08004335
 800432c:	080043a9 	.word	0x080043a9
 8004330:	080043bd 	.word	0x080043bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433a:	f043 0301 	orr.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	18d1      	adds	r1, r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004354:	f7ff ff5c 	bl	8004210 <prvInsertTimerInActiveList>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d069      	beq.n	8004432 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800435e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004364:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436c:	f003 0304 	and.w	r3, r3, #4
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05e      	beq.n	8004432 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004374:	68ba      	ldr	r2, [r7, #8]
 8004376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	441a      	add	r2, r3
 800437c:	2300      	movs	r3, #0
 800437e:	9300      	str	r3, [sp, #0]
 8004380:	2300      	movs	r3, #0
 8004382:	2100      	movs	r1, #0
 8004384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004386:	f7ff fe05 	bl	8003f94 <xTimerGenericCommand>
 800438a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d14f      	bne.n	8004432 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004396:	f383 8811 	msr	BASEPRI, r3
 800439a:	f3bf 8f6f 	isb	sy
 800439e:	f3bf 8f4f 	dsb	sy
 80043a2:	61bb      	str	r3, [r7, #24]
}
 80043a4:	bf00      	nop
 80043a6:	e7fe      	b.n	80043a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043ba:	e03a      	b.n	8004432 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10a      	bne.n	80043f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	617b      	str	r3, [r7, #20]
}
 80043ee:	bf00      	nop
 80043f0:	e7fe      	b.n	80043f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f4:	699a      	ldr	r2, [r3, #24]
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	18d1      	adds	r1, r2, r3
 80043fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004400:	f7ff ff06 	bl	8004210 <prvInsertTimerInActiveList>
					break;
 8004404:	e015      	b.n	8004432 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004408:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004416:	f000 fbdb 	bl	8004bd0 <vPortFree>
 800441a:	e00a      	b.n	8004432 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	b2da      	uxtb	r2, r3
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800442e:	e000      	b.n	8004432 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8004430:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004432:	4b08      	ldr	r3, [pc, #32]	; (8004454 <prvProcessReceivedCommands+0x1c0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	1d39      	adds	r1, r7, #4
 8004438:	2200      	movs	r2, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f7fe fc16 	bl	8002c6c <xQueueReceive>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	f47f af2a 	bne.w	800429c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3730      	adds	r7, #48	; 0x30
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	20000cbc 	.word	0x20000cbc

08004458 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b088      	sub	sp, #32
 800445c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800445e:	e048      	b.n	80044f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004460:	4b2d      	ldr	r3, [pc, #180]	; (8004518 <prvSwitchTimerLists+0xc0>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	68db      	ldr	r3, [r3, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800446a:	4b2b      	ldr	r3, [pc, #172]	; (8004518 <prvSwitchTimerLists+0xc0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3304      	adds	r3, #4
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe f92f 	bl	80026dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6a1b      	ldr	r3, [r3, #32]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d02e      	beq.n	80044f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d90e      	bls.n	80044c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	68ba      	ldr	r2, [r7, #8]
 80044aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68fa      	ldr	r2, [r7, #12]
 80044b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <prvSwitchTimerLists+0xc0>)
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	3304      	adds	r3, #4
 80044ba:	4619      	mov	r1, r3
 80044bc:	4610      	mov	r0, r2
 80044be:	f7fe f8d4 	bl	800266a <vListInsert>
 80044c2:	e016      	b.n	80044f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044c4:	2300      	movs	r3, #0
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	2300      	movs	r3, #0
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	2100      	movs	r1, #0
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff fd60 	bl	8003f94 <xTimerGenericCommand>
 80044d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d10a      	bne.n	80044f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	603b      	str	r3, [r7, #0]
}
 80044ee:	bf00      	nop
 80044f0:	e7fe      	b.n	80044f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044f2:	4b09      	ldr	r3, [pc, #36]	; (8004518 <prvSwitchTimerLists+0xc0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1b1      	bne.n	8004460 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044fc:	4b06      	ldr	r3, [pc, #24]	; (8004518 <prvSwitchTimerLists+0xc0>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004502:	4b06      	ldr	r3, [pc, #24]	; (800451c <prvSwitchTimerLists+0xc4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a04      	ldr	r2, [pc, #16]	; (8004518 <prvSwitchTimerLists+0xc0>)
 8004508:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800450a:	4a04      	ldr	r2, [pc, #16]	; (800451c <prvSwitchTimerLists+0xc4>)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	3718      	adds	r7, #24
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000cb4 	.word	0x20000cb4
 800451c:	20000cb8 	.word	0x20000cb8

08004520 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004526:	f000 f965 	bl	80047f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800452a:	4b15      	ldr	r3, [pc, #84]	; (8004580 <prvCheckForValidListAndQueue+0x60>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d120      	bne.n	8004574 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004532:	4814      	ldr	r0, [pc, #80]	; (8004584 <prvCheckForValidListAndQueue+0x64>)
 8004534:	f7fe f848 	bl	80025c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004538:	4813      	ldr	r0, [pc, #76]	; (8004588 <prvCheckForValidListAndQueue+0x68>)
 800453a:	f7fe f845 	bl	80025c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <prvCheckForValidListAndQueue+0x6c>)
 8004540:	4a10      	ldr	r2, [pc, #64]	; (8004584 <prvCheckForValidListAndQueue+0x64>)
 8004542:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004544:	4b12      	ldr	r3, [pc, #72]	; (8004590 <prvCheckForValidListAndQueue+0x70>)
 8004546:	4a10      	ldr	r2, [pc, #64]	; (8004588 <prvCheckForValidListAndQueue+0x68>)
 8004548:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800454a:	2300      	movs	r3, #0
 800454c:	9300      	str	r3, [sp, #0]
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <prvCheckForValidListAndQueue+0x74>)
 8004550:	4a11      	ldr	r2, [pc, #68]	; (8004598 <prvCheckForValidListAndQueue+0x78>)
 8004552:	2110      	movs	r1, #16
 8004554:	200a      	movs	r0, #10
 8004556:	f7fe f953 	bl	8002800 <xQueueGenericCreateStatic>
 800455a:	4603      	mov	r3, r0
 800455c:	4a08      	ldr	r2, [pc, #32]	; (8004580 <prvCheckForValidListAndQueue+0x60>)
 800455e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <prvCheckForValidListAndQueue+0x60>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d005      	beq.n	8004574 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004568:	4b05      	ldr	r3, [pc, #20]	; (8004580 <prvCheckForValidListAndQueue+0x60>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	490b      	ldr	r1, [pc, #44]	; (800459c <prvCheckForValidListAndQueue+0x7c>)
 800456e:	4618      	mov	r0, r3
 8004570:	f7fe fd6c 	bl	800304c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004574:	f000 f96e 	bl	8004854 <vPortExitCritical>
}
 8004578:	bf00      	nop
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	20000cbc 	.word	0x20000cbc
 8004584:	20000c8c 	.word	0x20000c8c
 8004588:	20000ca0 	.word	0x20000ca0
 800458c:	20000cb4 	.word	0x20000cb4
 8004590:	20000cb8 	.word	0x20000cb8
 8004594:	20000d68 	.word	0x20000d68
 8004598:	20000cc8 	.word	0x20000cc8
 800459c:	08004ed8 	.word	0x08004ed8

080045a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3b04      	subs	r3, #4
 80045b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	3b04      	subs	r3, #4
 80045be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f023 0201 	bic.w	r2, r3, #1
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045d0:	4a0c      	ldr	r2, [pc, #48]	; (8004604 <pxPortInitialiseStack+0x64>)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3b14      	subs	r3, #20
 80045da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	3b04      	subs	r3, #4
 80045e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f06f 0202 	mvn.w	r2, #2
 80045ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	3b20      	subs	r3, #32
 80045f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045f6:	68fb      	ldr	r3, [r7, #12]
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr
 8004604:	08004609 	.word	0x08004609

08004608 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800460e:	2300      	movs	r3, #0
 8004610:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004612:	4b12      	ldr	r3, [pc, #72]	; (800465c <prvTaskExitError+0x54>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461a:	d00a      	beq.n	8004632 <prvTaskExitError+0x2a>
	__asm volatile
 800461c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004620:	f383 8811 	msr	BASEPRI, r3
 8004624:	f3bf 8f6f 	isb	sy
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	60fb      	str	r3, [r7, #12]
}
 800462e:	bf00      	nop
 8004630:	e7fe      	b.n	8004630 <prvTaskExitError+0x28>
	__asm volatile
 8004632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004636:	f383 8811 	msr	BASEPRI, r3
 800463a:	f3bf 8f6f 	isb	sy
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	60bb      	str	r3, [r7, #8]
}
 8004644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004646:	bf00      	nop
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0fc      	beq.n	8004648 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800464e:	bf00      	nop
 8004650:	bf00      	nop
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr
 800465c:	2000000c 	.word	0x2000000c

08004660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <pxCurrentTCBConst2>)
 8004662:	6819      	ldr	r1, [r3, #0]
 8004664:	6808      	ldr	r0, [r1, #0]
 8004666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	f380 8809 	msr	PSP, r0
 800466e:	f3bf 8f6f 	isb	sy
 8004672:	f04f 0000 	mov.w	r0, #0
 8004676:	f380 8811 	msr	BASEPRI, r0
 800467a:	4770      	bx	lr
 800467c:	f3af 8000 	nop.w

08004680 <pxCurrentTCBConst2>:
 8004680:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop

08004688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004688:	4808      	ldr	r0, [pc, #32]	; (80046ac <prvPortStartFirstTask+0x24>)
 800468a:	6800      	ldr	r0, [r0, #0]
 800468c:	6800      	ldr	r0, [r0, #0]
 800468e:	f380 8808 	msr	MSP, r0
 8004692:	f04f 0000 	mov.w	r0, #0
 8004696:	f380 8814 	msr	CONTROL, r0
 800469a:	b662      	cpsie	i
 800469c:	b661      	cpsie	f
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	f3bf 8f6f 	isb	sy
 80046a6:	df00      	svc	0
 80046a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046aa:	bf00      	nop
 80046ac:	e000ed08 	.word	0xe000ed08

080046b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046b6:	4b46      	ldr	r3, [pc, #280]	; (80047d0 <xPortStartScheduler+0x120>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a46      	ldr	r2, [pc, #280]	; (80047d4 <xPortStartScheduler+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d10a      	bne.n	80046d6 <xPortStartScheduler+0x26>
	__asm volatile
 80046c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c4:	f383 8811 	msr	BASEPRI, r3
 80046c8:	f3bf 8f6f 	isb	sy
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	613b      	str	r3, [r7, #16]
}
 80046d2:	bf00      	nop
 80046d4:	e7fe      	b.n	80046d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046d6:	4b3e      	ldr	r3, [pc, #248]	; (80047d0 <xPortStartScheduler+0x120>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <xPortStartScheduler+0x128>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d10a      	bne.n	80046f6 <xPortStartScheduler+0x46>
	__asm volatile
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60fb      	str	r3, [r7, #12]
}
 80046f2:	bf00      	nop
 80046f4:	e7fe      	b.n	80046f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046f6:	4b39      	ldr	r3, [pc, #228]	; (80047dc <xPortStartScheduler+0x12c>)
 80046f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	22ff      	movs	r2, #255	; 0xff
 8004706:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004710:	78fb      	ldrb	r3, [r7, #3]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4b31      	ldr	r3, [pc, #196]	; (80047e0 <xPortStartScheduler+0x130>)
 800471c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800471e:	4b31      	ldr	r3, [pc, #196]	; (80047e4 <xPortStartScheduler+0x134>)
 8004720:	2207      	movs	r2, #7
 8004722:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004724:	e009      	b.n	800473a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004726:	4b2f      	ldr	r3, [pc, #188]	; (80047e4 <xPortStartScheduler+0x134>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	3b01      	subs	r3, #1
 800472c:	4a2d      	ldr	r2, [pc, #180]	; (80047e4 <xPortStartScheduler+0x134>)
 800472e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	005b      	lsls	r3, r3, #1
 8004736:	b2db      	uxtb	r3, r3
 8004738:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800473a:	78fb      	ldrb	r3, [r7, #3]
 800473c:	b2db      	uxtb	r3, r3
 800473e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004742:	2b80      	cmp	r3, #128	; 0x80
 8004744:	d0ef      	beq.n	8004726 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <xPortStartScheduler+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f1c3 0307 	rsb	r3, r3, #7
 800474e:	2b04      	cmp	r3, #4
 8004750:	d00a      	beq.n	8004768 <xPortStartScheduler+0xb8>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60bb      	str	r3, [r7, #8]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <xPortStartScheduler+0x134>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	021b      	lsls	r3, r3, #8
 800476e:	4a1d      	ldr	r2, [pc, #116]	; (80047e4 <xPortStartScheduler+0x134>)
 8004770:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004772:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <xPortStartScheduler+0x134>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800477a:	4a1a      	ldr	r2, [pc, #104]	; (80047e4 <xPortStartScheduler+0x134>)
 800477c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004786:	4b18      	ldr	r3, [pc, #96]	; (80047e8 <xPortStartScheduler+0x138>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a17      	ldr	r2, [pc, #92]	; (80047e8 <xPortStartScheduler+0x138>)
 800478c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004790:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004792:	4b15      	ldr	r3, [pc, #84]	; (80047e8 <xPortStartScheduler+0x138>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a14      	ldr	r2, [pc, #80]	; (80047e8 <xPortStartScheduler+0x138>)
 8004798:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800479c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800479e:	f000 f8dd 	bl	800495c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047a2:	4b12      	ldr	r3, [pc, #72]	; (80047ec <xPortStartScheduler+0x13c>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047a8:	f000 f8fc 	bl	80049a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047ac:	4b10      	ldr	r3, [pc, #64]	; (80047f0 <xPortStartScheduler+0x140>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a0f      	ldr	r2, [pc, #60]	; (80047f0 <xPortStartScheduler+0x140>)
 80047b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047b8:	f7ff ff66 	bl	8004688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047bc:	f7ff f856 	bl	800386c <vTaskSwitchContext>
	prvTaskExitError();
 80047c0:	f7ff ff22 	bl	8004608 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3718      	adds	r7, #24
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	e000ed00 	.word	0xe000ed00
 80047d4:	410fc271 	.word	0x410fc271
 80047d8:	410fc270 	.word	0x410fc270
 80047dc:	e000e400 	.word	0xe000e400
 80047e0:	20000db8 	.word	0x20000db8
 80047e4:	20000dbc 	.word	0x20000dbc
 80047e8:	e000ed20 	.word	0xe000ed20
 80047ec:	2000000c 	.word	0x2000000c
 80047f0:	e000ef34 	.word	0xe000ef34

080047f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
	__asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
}
 800480c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <vPortEnterCritical+0x58>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <vPortEnterCritical+0x58>)
 8004816:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <vPortEnterCritical+0x58>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10f      	bne.n	8004840 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortEnterCritical+0x5c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <vPortEnterCritical+0x4c>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
}
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vPortEnterCritical+0x4a>
	}
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	2000000c 	.word	0x2000000c
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <vPortExitCritical+0x50>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vPortExitCritical+0x24>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <vPortExitCritical+0x50>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3b01      	subs	r3, #1
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <vPortExitCritical+0x50>)
 8004880:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <vPortExitCritical+0x50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <vPortExitCritical+0x42>
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f383 8811 	msr	BASEPRI, r3
}
 8004894:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	2000000c 	.word	0x2000000c
	...

080048b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <pxCurrentTCBConst>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f01e 0f10 	tst.w	lr, #16
 80048c0:	bf08      	it	eq
 80048c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048d4:	f380 8811 	msr	BASEPRI, r0
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f7fe ffc4 	bl	800386c <vTaskSwitchContext>
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f380 8811 	msr	BASEPRI, r0
 80048ec:	bc09      	pop	{r0, r3}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	f01e 0f10 	tst.w	lr, #16
 80048fa:	bf08      	it	eq
 80048fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004900:	f380 8809 	msr	PSP, r0
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst>:
 8004910:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
}
 8004930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004932:	f7fe fee1 	bl	80036f8 <xTaskIncrementTick>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800493c:	4b06      	ldr	r3, [pc, #24]	; (8004958 <xPortSysTickHandler+0x40>)
 800493e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004942:	601a      	str	r2, [r3, #0]
 8004944:	2300      	movs	r3, #0
 8004946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	f383 8811 	msr	BASEPRI, r3
}
 800494e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004950:	bf00      	nop
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004960:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004962:	2200      	movs	r2, #0
 8004964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004966:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <vPortSetupTimerInterrupt+0x38>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800496c:	4b0a      	ldr	r3, [pc, #40]	; (8004998 <vPortSetupTimerInterrupt+0x3c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a0a      	ldr	r2, [pc, #40]	; (800499c <vPortSetupTimerInterrupt+0x40>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	099b      	lsrs	r3, r3, #6
 8004978:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <vPortSetupTimerInterrupt+0x44>)
 800497a:	3b01      	subs	r3, #1
 800497c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800497e:	4b04      	ldr	r3, [pc, #16]	; (8004990 <vPortSetupTimerInterrupt+0x34>)
 8004980:	2207      	movs	r2, #7
 8004982:	601a      	str	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000e010 	.word	0xe000e010
 8004994:	e000e018 	.word	0xe000e018
 8004998:	20000000 	.word	0x20000000
 800499c:	10624dd3 	.word	0x10624dd3
 80049a0:	e000e014 	.word	0xe000e014

080049a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049b4 <vPortEnableVFP+0x10>
 80049a8:	6801      	ldr	r1, [r0, #0]
 80049aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049ae:	6001      	str	r1, [r0, #0]
 80049b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049b2:	bf00      	nop
 80049b4:	e000ed88 	.word	0xe000ed88

080049b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049be:	f3ef 8305 	mrs	r3, IPSR
 80049c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b0f      	cmp	r3, #15
 80049c8:	d914      	bls.n	80049f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049ca:	4a17      	ldr	r2, [pc, #92]	; (8004a28 <vPortValidateInterruptPriority+0x70>)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	4413      	add	r3, r2
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049d4:	4b15      	ldr	r3, [pc, #84]	; (8004a2c <vPortValidateInterruptPriority+0x74>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	7afa      	ldrb	r2, [r7, #11]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d20a      	bcs.n	80049f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049e2:	f383 8811 	msr	BASEPRI, r3
 80049e6:	f3bf 8f6f 	isb	sy
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	607b      	str	r3, [r7, #4]
}
 80049f0:	bf00      	nop
 80049f2:	e7fe      	b.n	80049f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049f4:	4b0e      	ldr	r3, [pc, #56]	; (8004a30 <vPortValidateInterruptPriority+0x78>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <vPortValidateInterruptPriority+0x7c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d90a      	bls.n	8004a1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a08:	f383 8811 	msr	BASEPRI, r3
 8004a0c:	f3bf 8f6f 	isb	sy
 8004a10:	f3bf 8f4f 	dsb	sy
 8004a14:	603b      	str	r3, [r7, #0]
}
 8004a16:	bf00      	nop
 8004a18:	e7fe      	b.n	8004a18 <vPortValidateInterruptPriority+0x60>
	}
 8004a1a:	bf00      	nop
 8004a1c:	3714      	adds	r7, #20
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e3f0 	.word	0xe000e3f0
 8004a2c:	20000db8 	.word	0x20000db8
 8004a30:	e000ed0c 	.word	0xe000ed0c
 8004a34:	20000dbc 	.word	0x20000dbc

08004a38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a40:	2300      	movs	r3, #0
 8004a42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a44:	f7fe fd9c 	bl	8003580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a48:	4b5b      	ldr	r3, [pc, #364]	; (8004bb8 <pvPortMalloc+0x180>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a50:	f000 f920 	bl	8004c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a54:	4b59      	ldr	r3, [pc, #356]	; (8004bbc <pvPortMalloc+0x184>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f040 8093 	bne.w	8004b88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01d      	beq.n	8004aa4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a68:	2208      	movs	r2, #8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d014      	beq.n	8004aa4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f023 0307 	bic.w	r3, r3, #7
 8004a80:	3308      	adds	r3, #8
 8004a82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f003 0307 	and.w	r3, r3, #7
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00a      	beq.n	8004aa4 <pvPortMalloc+0x6c>
	__asm volatile
 8004a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a92:	f383 8811 	msr	BASEPRI, r3
 8004a96:	f3bf 8f6f 	isb	sy
 8004a9a:	f3bf 8f4f 	dsb	sy
 8004a9e:	617b      	str	r3, [r7, #20]
}
 8004aa0:	bf00      	nop
 8004aa2:	e7fe      	b.n	8004aa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d06e      	beq.n	8004b88 <pvPortMalloc+0x150>
 8004aaa:	4b45      	ldr	r3, [pc, #276]	; (8004bc0 <pvPortMalloc+0x188>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d869      	bhi.n	8004b88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ab4:	4b43      	ldr	r3, [pc, #268]	; (8004bc4 <pvPortMalloc+0x18c>)
 8004ab6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ab8:	4b42      	ldr	r3, [pc, #264]	; (8004bc4 <pvPortMalloc+0x18c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004abe:	e004      	b.n	8004aca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d903      	bls.n	8004adc <pvPortMalloc+0xa4>
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d1f1      	bne.n	8004ac0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004adc:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <pvPortMalloc+0x180>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d050      	beq.n	8004b88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ae6:	6a3b      	ldr	r3, [r7, #32]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2208      	movs	r2, #8
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	2308      	movs	r3, #8
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d91f      	bls.n	8004b48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <pvPortMalloc+0xf8>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	613b      	str	r3, [r7, #16]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	685a      	ldr	r2, [r3, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad2      	subs	r2, r2, r3
 8004b38:	69bb      	ldr	r3, [r7, #24]
 8004b3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b42:	69b8      	ldr	r0, [r7, #24]
 8004b44:	f000 f908 	bl	8004d58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b48:	4b1d      	ldr	r3, [pc, #116]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	4a1b      	ldr	r2, [pc, #108]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b56:	4b1a      	ldr	r3, [pc, #104]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <pvPortMalloc+0x190>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d203      	bcs.n	8004b6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b62:	4b17      	ldr	r3, [pc, #92]	; (8004bc0 <pvPortMalloc+0x188>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a18      	ldr	r2, [pc, #96]	; (8004bc8 <pvPortMalloc+0x190>)
 8004b68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <pvPortMalloc+0x184>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <pvPortMalloc+0x194>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3301      	adds	r3, #1
 8004b84:	4a11      	ldr	r2, [pc, #68]	; (8004bcc <pvPortMalloc+0x194>)
 8004b86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b88:	f7fe fd08 	bl	800359c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b8c:	69fb      	ldr	r3, [r7, #28]
 8004b8e:	f003 0307 	and.w	r3, r3, #7
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <pvPortMalloc+0x174>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60fb      	str	r3, [r7, #12]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <pvPortMalloc+0x172>
	return pvReturn;
 8004bac:	69fb      	ldr	r3, [r7, #28]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3728      	adds	r7, #40	; 0x28
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	200049c8 	.word	0x200049c8
 8004bbc:	200049dc 	.word	0x200049dc
 8004bc0:	200049cc 	.word	0x200049cc
 8004bc4:	200049c0 	.word	0x200049c0
 8004bc8:	200049d0 	.word	0x200049d0
 8004bcc:	200049d4 	.word	0x200049d4

08004bd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d04d      	beq.n	8004c7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004be2:	2308      	movs	r3, #8
 8004be4:	425b      	negs	r3, r3
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4413      	add	r3, r2
 8004bea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	4b24      	ldr	r3, [pc, #144]	; (8004c88 <vPortFree+0xb8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4013      	ands	r3, r2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10a      	bne.n	8004c14 <vPortFree+0x44>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	f383 8811 	msr	BASEPRI, r3
 8004c06:	f3bf 8f6f 	isb	sy
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	60fb      	str	r3, [r7, #12]
}
 8004c10:	bf00      	nop
 8004c12:	e7fe      	b.n	8004c12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d00a      	beq.n	8004c32 <vPortFree+0x62>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	60bb      	str	r3, [r7, #8]
}
 8004c2e:	bf00      	nop
 8004c30:	e7fe      	b.n	8004c30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <vPortFree+0xb8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01e      	beq.n	8004c7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d11a      	bne.n	8004c7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <vPortFree+0xb8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	401a      	ands	r2, r3
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c58:	f7fe fc92 	bl	8003580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	685a      	ldr	r2, [r3, #4]
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <vPortFree+0xbc>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4413      	add	r3, r2
 8004c66:	4a09      	ldr	r2, [pc, #36]	; (8004c8c <vPortFree+0xbc>)
 8004c68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c6a:	6938      	ldr	r0, [r7, #16]
 8004c6c:	f000 f874 	bl	8004d58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c70:	4b07      	ldr	r3, [pc, #28]	; (8004c90 <vPortFree+0xc0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	3301      	adds	r3, #1
 8004c76:	4a06      	ldr	r2, [pc, #24]	; (8004c90 <vPortFree+0xc0>)
 8004c78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c7a:	f7fe fc8f 	bl	800359c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c7e:	bf00      	nop
 8004c80:	3718      	adds	r7, #24
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	200049dc 	.word	0x200049dc
 8004c8c:	200049cc 	.word	0x200049cc
 8004c90:	200049d8 	.word	0x200049d8

08004c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004c9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ca0:	4b27      	ldr	r3, [pc, #156]	; (8004d40 <prvHeapInit+0xac>)
 8004ca2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d00c      	beq.n	8004cc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	3307      	adds	r3, #7
 8004cb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004cbc:	68ba      	ldr	r2, [r7, #8]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	4a1f      	ldr	r2, [pc, #124]	; (8004d40 <prvHeapInit+0xac>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004ccc:	4a1d      	ldr	r2, [pc, #116]	; (8004d44 <prvHeapInit+0xb0>)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004cd2:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <prvHeapInit+0xb0>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	4413      	add	r3, r2
 8004cde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ce0:	2208      	movs	r2, #8
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	1a9b      	subs	r3, r3, r2
 8004ce6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0307 	bic.w	r3, r3, #7
 8004cee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4a15      	ldr	r2, [pc, #84]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cf6:	4b14      	ldr	r3, [pc, #80]	; (8004d48 <prvHeapInit+0xb4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cfe:	4b12      	ldr	r3, [pc, #72]	; (8004d48 <prvHeapInit+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2200      	movs	r2, #0
 8004d04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d14:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <prvHeapInit+0xb4>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	4a0a      	ldr	r2, [pc, #40]	; (8004d4c <prvHeapInit+0xb8>)
 8004d22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	4a09      	ldr	r2, [pc, #36]	; (8004d50 <prvHeapInit+0xbc>)
 8004d2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d2c:	4b09      	ldr	r3, [pc, #36]	; (8004d54 <prvHeapInit+0xc0>)
 8004d2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d32:	601a      	str	r2, [r3, #0]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000dc0 	.word	0x20000dc0
 8004d44:	200049c0 	.word	0x200049c0
 8004d48:	200049c8 	.word	0x200049c8
 8004d4c:	200049d0 	.word	0x200049d0
 8004d50:	200049cc 	.word	0x200049cc
 8004d54:	200049dc 	.word	0x200049dc

08004d58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b085      	sub	sp, #20
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d60:	4b28      	ldr	r3, [pc, #160]	; (8004e04 <prvInsertBlockIntoFreeList+0xac>)
 8004d62:	60fb      	str	r3, [r7, #12]
 8004d64:	e002      	b.n	8004d6c <prvInsertBlockIntoFreeList+0x14>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8f7      	bhi.n	8004d66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	4413      	add	r3, r2
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d108      	bne.n	8004d9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	68ba      	ldr	r2, [r7, #8]
 8004da4:	441a      	add	r2, r3
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d118      	bne.n	8004de0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b15      	ldr	r3, [pc, #84]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d00d      	beq.n	8004dd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	441a      	add	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	e008      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dd6:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <prvInsertBlockIntoFreeList+0xb0>)
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	e003      	b.n	8004de8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d002      	beq.n	8004df6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004df6:	bf00      	nop
 8004df8:	3714      	adds	r7, #20
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	200049c0 	.word	0x200049c0
 8004e08:	200049c8 	.word	0x200049c8

08004e0c <memset>:
 8004e0c:	4402      	add	r2, r0
 8004e0e:	4603      	mov	r3, r0
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d100      	bne.n	8004e16 <memset+0xa>
 8004e14:	4770      	bx	lr
 8004e16:	f803 1b01 	strb.w	r1, [r3], #1
 8004e1a:	e7f9      	b.n	8004e10 <memset+0x4>

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4d0d      	ldr	r5, [pc, #52]	; (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2600      	movs	r6, #0
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4d0b      	ldr	r5, [pc, #44]	; (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	; (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 f826 	bl	8004e80 <_init>
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2600      	movs	r6, #0
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08004fd8 	.word	0x08004fd8
 8004e58:	08004fd8 	.word	0x08004fd8
 8004e5c:	08004fd8 	.word	0x08004fd8
 8004e60:	08004fdc 	.word	0x08004fdc

08004e64 <memcpy>:
 8004e64:	440a      	add	r2, r1
 8004e66:	4291      	cmp	r1, r2
 8004e68:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e6c:	d100      	bne.n	8004e70 <memcpy+0xc>
 8004e6e:	4770      	bx	lr
 8004e70:	b510      	push	{r4, lr}
 8004e72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7a:	4291      	cmp	r1, r2
 8004e7c:	d1f9      	bne.n	8004e72 <memcpy+0xe>
 8004e7e:	bd10      	pop	{r4, pc}

08004e80 <_init>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr

08004e8c <_fini>:
 8004e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e8e:	bf00      	nop
 8004e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e92:	bc08      	pop	{r3}
 8004e94:	469e      	mov	lr, r3
 8004e96:	4770      	bx	lr
