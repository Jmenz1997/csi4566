
Partie2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08004f28  08004f28  00014f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005060  08005060  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005060  08005060  00015060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005068  08005068  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800506c  0800506c  0001506c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049d0  20000010  08005080  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049e0  08005080  000249e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000121db  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c0c  00000000  00000000  0003225e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f20  00000000  00000000  00034e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9b  00000000  00000000  00035d90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b77  00000000  00000000  0003692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011221  00000000  00000000  000394a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d232f  00000000  00000000  0004a6c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e14  00000000  00000000  0011c9f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00120808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004f10 	.word	0x08004f10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08004f10 	.word	0x08004f10

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f000 fb08 	bl	8000b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f85e 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 f8f8 	bl	800070c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 f8cc 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000520:	f001 ff68 	bl	80023f4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000524:	4a19      	ldr	r2, [pc, #100]	; (800058c <main+0x80>)
 8000526:	2100      	movs	r1, #0
 8000528:	4819      	ldr	r0, [pc, #100]	; (8000590 <main+0x84>)
 800052a:	f001 ffad 	bl	8002488 <osThreadNew>
 800052e:	4603      	mov	r3, r0
 8000530:	4a18      	ldr	r2, [pc, #96]	; (8000594 <main+0x88>)
 8000532:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000534:	4a18      	ldr	r2, [pc, #96]	; (8000598 <main+0x8c>)
 8000536:	2100      	movs	r1, #0
 8000538:	4818      	ldr	r0, [pc, #96]	; (800059c <main+0x90>)
 800053a:	f001 ffa5 	bl	8002488 <osThreadNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a17      	ldr	r2, [pc, #92]	; (80005a0 <main+0x94>)
 8000542:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000544:	4a17      	ldr	r2, [pc, #92]	; (80005a4 <main+0x98>)
 8000546:	2100      	movs	r1, #0
 8000548:	4817      	ldr	r0, [pc, #92]	; (80005a8 <main+0x9c>)
 800054a:	f001 ff9d 	bl	8002488 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a16      	ldr	r2, [pc, #88]	; (80005ac <main+0xa0>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task4 */
  Task4Handle = osThreadNew(StartTask4, NULL, &Task4_attributes);
 8000554:	4a16      	ldr	r2, [pc, #88]	; (80005b0 <main+0xa4>)
 8000556:	2100      	movs	r1, #0
 8000558:	4816      	ldr	r0, [pc, #88]	; (80005b4 <main+0xa8>)
 800055a:	f001 ff95 	bl	8002488 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a15      	ldr	r2, [pc, #84]	; (80005b8 <main+0xac>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task5 */
  Task5Handle = osThreadNew(StartTask5, NULL, &Task5_attributes);
 8000564:	4a15      	ldr	r2, [pc, #84]	; (80005bc <main+0xb0>)
 8000566:	2100      	movs	r1, #0
 8000568:	4815      	ldr	r0, [pc, #84]	; (80005c0 <main+0xb4>)
 800056a:	f001 ff8d 	bl	8002488 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a14      	ldr	r2, [pc, #80]	; (80005c4 <main+0xb8>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of Task6 */
  Task6Handle = osThreadNew(StartTask6, NULL, &Task6_attributes);
 8000574:	4a14      	ldr	r2, [pc, #80]	; (80005c8 <main+0xbc>)
 8000576:	2100      	movs	r1, #0
 8000578:	4814      	ldr	r0, [pc, #80]	; (80005cc <main+0xc0>)
 800057a:	f001 ff85 	bl	8002488 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a13      	ldr	r2, [pc, #76]	; (80005d0 <main+0xc4>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f001 ff5a 	bl	800243c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x7c>
 800058a:	bf00      	nop
 800058c:	08004f70 	.word	0x08004f70
 8000590:	080007ed 	.word	0x080007ed
 8000594:	20000074 	.word	0x20000074
 8000598:	08004f94 	.word	0x08004f94
 800059c:	0800082d 	.word	0x0800082d
 80005a0:	20000078 	.word	0x20000078
 80005a4:	08004fb8 	.word	0x08004fb8
 80005a8:	0800088d 	.word	0x0800088d
 80005ac:	2000007c 	.word	0x2000007c
 80005b0:	08004fdc 	.word	0x08004fdc
 80005b4:	080008d5 	.word	0x080008d5
 80005b8:	20000080 	.word	0x20000080
 80005bc:	08005000 	.word	0x08005000
 80005c0:	08000921 	.word	0x08000921
 80005c4:	20000084 	.word	0x20000084
 80005c8:	08005024 	.word	0x08005024
 80005cc:	08000969 	.word	0x08000969
 80005d0:	20000088 	.word	0x20000088

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	; 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 031c 	add.w	r3, r7, #28
 80005de:	2234      	movs	r2, #52	; 0x34
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f004 fc5a 	bl	8004e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	4b2c      	ldr	r3, [pc, #176]	; (80006b0 <SystemClock_Config+0xdc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	4a2b      	ldr	r2, [pc, #172]	; (80006b0 <SystemClock_Config+0xdc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	; 0x40
 8000608:	4b29      	ldr	r3, [pc, #164]	; (80006b0 <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000610:	607b      	str	r3, [r7, #4]
 8000612:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	603b      	str	r3, [r7, #0]
 8000618:	4b26      	ldr	r3, [pc, #152]	; (80006b4 <SystemClock_Config+0xe0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a25      	ldr	r2, [pc, #148]	; (80006b4 <SystemClock_Config+0xe0>)
 800061e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	603b      	str	r3, [r7, #0]
 800062e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000648:	23b4      	movs	r3, #180	; 0xb4
 800064a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000654:	2302      	movs	r3, #2
 8000656:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4618      	mov	r0, r3
 800065e:	f001 f933 	bl	80018c8 <HAL_RCC_OscConfig>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000668:	f000 f983 	bl	8000972 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800066c:	f000 fd92 	bl	8001194 <HAL_PWREx_EnableOverDrive>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000676:	f000 f97c 	bl	8000972 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800067e:	2302      	movs	r3, #2
 8000680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000686:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800068a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800068c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000690:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000692:	f107 0308 	add.w	r3, r7, #8
 8000696:	2105      	movs	r1, #5
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fdcb 	bl	8001234 <HAL_RCC_ClockConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006a4:	f000 f965 	bl	8000972 <Error_Handler>
  }
}
 80006a8:	bf00      	nop
 80006aa:	3750      	adds	r7, #80	; 0x50
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40023800 	.word	0x40023800
 80006b4:	40007000 	.word	0x40007000

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006be:	4a12      	ldr	r2, [pc, #72]	; (8000708 <MX_USART2_UART_Init+0x50>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b10      	ldr	r3, [pc, #64]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0b      	ldr	r3, [pc, #44]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b09      	ldr	r3, [pc, #36]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b08      	ldr	r3, [pc, #32]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b06      	ldr	r3, [pc, #24]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f001 fb88 	bl	8001e04 <HAL_UART_Init>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006fa:	f000 f93a 	bl	8000972 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	2000002c 	.word	0x2000002c
 8000708:	40004400 	.word	0x40004400

0800070c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b2e      	ldr	r3, [pc, #184]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a2d      	ldr	r2, [pc, #180]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800072c:	f043 0304 	orr.w	r3, r3, #4
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b2b      	ldr	r3, [pc, #172]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0304 	and.w	r3, r3, #4
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b27      	ldr	r3, [pc, #156]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1f      	ldr	r2, [pc, #124]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1d      	ldr	r3, [pc, #116]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <MX_GPIO_Init+0xd4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a18      	ldr	r2, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <MX_GPIO_Init+0xd4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000792:	2200      	movs	r2, #0
 8000794:	f44f 711e 	mov.w	r1, #632	; 0x278
 8000798:	4812      	ldr	r0, [pc, #72]	; (80007e4 <MX_GPIO_Init+0xd8>)
 800079a:	f000 fcc7 	bl	800112c <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800079e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a4:	2300      	movs	r3, #0
 80007a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	4619      	mov	r1, r3
 80007b2:	480d      	ldr	r0, [pc, #52]	; (80007e8 <MX_GPIO_Init+0xdc>)
 80007b4:	f000 fb0e 	bl	8000dd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80007b8:	f44f 731e 	mov.w	r3, #632	; 0x278
 80007bc:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xd8>)
 80007d2:	f000 faff 	bl	8000dd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d6:	bf00      	nop
 80007d8:	3728      	adds	r7, #40	; 0x28
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40020400 	.word	0x40020400
 80007e8:	40020800 	.word	0x40020800

080007ec <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument) // auto vert
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  // for btn press HAL_GPIO_ReadPin(GPIOC_ GPIO_PIN_13)
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80007f4:	2108      	movs	r1, #8
 80007f6:	480b      	ldr	r0, [pc, #44]	; (8000824 <StartTask1+0x38>)
 80007f8:	f000 fcb1 	bl	800115e <HAL_GPIO_TogglePin>
	  while(1){
		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 ){
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <StartTask1+0x3c>)
 8000802:	f000 fc7b 	bl	80010fc <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d000      	beq.n	800080e <StartTask1+0x22>
 800080c:	e7f6      	b.n	80007fc <StartTask1+0x10>
			  break;
 800080e:	bf00      	nop
		  }
	  }

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000810:	2108      	movs	r1, #8
 8000812:	4804      	ldr	r0, [pc, #16]	; (8000824 <StartTask1+0x38>)
 8000814:	f000 fca3 	bl	800115e <HAL_GPIO_TogglePin>
	  osDelay(17000);
 8000818:	f244 2068 	movw	r0, #17000	; 0x4268
 800081c:	f001 fec6 	bl	80025ac <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8000820:	e7e8      	b.n	80007f4 <StartTask1+0x8>
 8000822:	bf00      	nop
 8000824:	40020400 	.word	0x40020400
 8000828:	40020800 	.word	0x40020800

0800082c <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument) // auto jaune
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	  while(1){
	  		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 ){
 8000834:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000838:	4812      	ldr	r0, [pc, #72]	; (8000884 <StartTask2+0x58>)
 800083a:	f000 fc5f 	bl	80010fc <HAL_GPIO_ReadPin>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d000      	beq.n	8000846 <StartTask2+0x1a>
 8000844:	e7f6      	b.n	8000834 <StartTask2+0x8>
	  			  break;
 8000846:	bf00      	nop
	  		  }
	  	  }

	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000848:	2110      	movs	r1, #16
 800084a:	480f      	ldr	r0, [pc, #60]	; (8000888 <StartTask2+0x5c>)
 800084c:	f000 fc87 	bl	800115e <HAL_GPIO_TogglePin>
	  	  osDelay(3000);
 8000850:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000854:	f001 feaa 	bl	80025ac <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000858:	2110      	movs	r1, #16
 800085a:	480b      	ldr	r0, [pc, #44]	; (8000888 <StartTask2+0x5c>)
 800085c:	f000 fc7f 	bl	800115e <HAL_GPIO_TogglePin>
	  	  osDelay(12000);
 8000860:	f642 60e0 	movw	r0, #12000	; 0x2ee0
 8000864:	f001 fea2 	bl	80025ac <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000868:	2110      	movs	r1, #16
 800086a:	4807      	ldr	r0, [pc, #28]	; (8000888 <StartTask2+0x5c>)
 800086c:	f000 fc77 	bl	800115e <HAL_GPIO_TogglePin>
	  	  osDelay(2000);
 8000870:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000874:	f001 fe9a 	bl	80025ac <osDelay>
	  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
 8000878:	2110      	movs	r1, #16
 800087a:	4803      	ldr	r0, [pc, #12]	; (8000888 <StartTask2+0x5c>)
 800087c:	f000 fc6f 	bl	800115e <HAL_GPIO_TogglePin>
  for(;;)
 8000880:	e7d8      	b.n	8000834 <StartTask2+0x8>
 8000882:	bf00      	nop
 8000884:	40020800 	.word	0x40020800
 8000888:	40020400 	.word	0x40020400

0800088c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument) // auto rouge
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	  while(1){
		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 ){
 8000894:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <StartTask3+0x40>)
 800089a:	f000 fc2f 	bl	80010fc <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d000      	beq.n	80008a6 <StartTask3+0x1a>
 80008a4:	e7f6      	b.n	8000894 <StartTask3+0x8>
			  break;
 80008a6:	bf00      	nop
		  }
	  }

	  osDelay(3000);
 80008a8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80008ac:	f001 fe7e 	bl	80025ac <osDelay>
  	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008b0:	2120      	movs	r1, #32
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <StartTask3+0x44>)
 80008b4:	f000 fc53 	bl	800115e <HAL_GPIO_TogglePin>

		 osDelay(14000);
 80008b8:	f243 60b0 	movw	r0, #14000	; 0x36b0
 80008bc:	f001 fe76 	bl	80025ac <osDelay>
		 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80008c0:	2120      	movs	r1, #32
 80008c2:	4803      	ldr	r0, [pc, #12]	; (80008d0 <StartTask3+0x44>)
 80008c4:	f000 fc4b 	bl	800115e <HAL_GPIO_TogglePin>
  for(;;)
 80008c8:	e7e4      	b.n	8000894 <StartTask3+0x8>
 80008ca:	bf00      	nop
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020400 	.word	0x40020400

080008d4 <StartTask4>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask4 */
void StartTask4(void *argument) // peiton rouge
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask4 */
  /* Infinite loop */
  for(;;)
  {

	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 80008dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <StartTask4+0x44>)
 80008e2:	f000 fc3c 	bl	800115e <HAL_GPIO_TogglePin>
	  while(1){
		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 ){
 80008e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ea:	480c      	ldr	r0, [pc, #48]	; (800091c <StartTask4+0x48>)
 80008ec:	f000 fc06 	bl	80010fc <HAL_GPIO_ReadPin>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d000      	beq.n	80008f8 <StartTask4+0x24>
 80008f6:	e7f6      	b.n	80008e6 <StartTask4+0x12>
			  break;
 80008f8:	bf00      	nop
		  }
	  }
	  osDelay(4000);
 80008fa:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80008fe:	f001 fe55 	bl	80025ac <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <StartTask4+0x44>)
 8000908:	f000 fc29 	bl	800115e <HAL_GPIO_TogglePin>
	  osDelay(10000);
 800090c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000910:	f001 fe4c 	bl	80025ac <osDelay>
	 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_9);
 8000914:	e7e2      	b.n	80008dc <StartTask4+0x8>
 8000916:	bf00      	nop
 8000918:	40020400 	.word	0x40020400
 800091c:	40020800 	.word	0x40020800

08000920 <StartTask5>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask5 */
void StartTask5(void *argument) // peiton vert
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask5 */
  /* Infinite loop */
  for(;;)
  {
	  while(1){
		  if( HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0 ){
 8000928:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <StartTask5+0x40>)
 800092e:	f000 fbe5 	bl	80010fc <HAL_GPIO_ReadPin>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d000      	beq.n	800093a <StartTask5+0x1a>
 8000938:	e7f6      	b.n	8000928 <StartTask5+0x8>
			  break;
 800093a:	bf00      	nop
		  }
	  }
	  osDelay(4000);
 800093c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000940:	f001 fe34 	bl	80025ac <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000944:	2140      	movs	r1, #64	; 0x40
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <StartTask5+0x44>)
 8000948:	f000 fc09 	bl	800115e <HAL_GPIO_TogglePin>
	  osDelay(9999);
 800094c:	f242 700f 	movw	r0, #9999	; 0x270f
 8000950:	f001 fe2c 	bl	80025ac <osDelay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4803      	ldr	r0, [pc, #12]	; (8000964 <StartTask5+0x44>)
 8000958:	f000 fc01 	bl	800115e <HAL_GPIO_TogglePin>
  for(;;)
 800095c:	e7e4      	b.n	8000928 <StartTask5+0x8>
 800095e:	bf00      	nop
 8000960:	40020800 	.word	0x40020800
 8000964:	40020400 	.word	0x40020400

08000968 <StartTask6>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask6 */
void StartTask6(void *argument)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask6 */
  /* Infinite loop */
  for(;;)
 8000970:	e7fe      	b.n	8000970 <StartTask6+0x8>

08000972 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000972:	b480      	push	{r7}
 8000974:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000976:	b672      	cpsid	i
}
 8000978:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097a:	e7fe      	b.n	800097a <Error_Handler+0x8>

0800097c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <HAL_MspInit+0x54>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <HAL_MspInit+0x54>)
 800098c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <HAL_MspInit+0x54>)
 8000994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000996:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_MspInit+0x54>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_MspInit+0x54>)
 80009a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_MspInit+0x54>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b6:	603b      	str	r3, [r7, #0]
 80009b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009ba:	2200      	movs	r2, #0
 80009bc:	210f      	movs	r1, #15
 80009be:	f06f 0001 	mvn.w	r0, #1
 80009c2:	f000 f9de 	bl	8000d82 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	2200      	movs	r2, #0
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	605a      	str	r2, [r3, #4]
 80009e6:	609a      	str	r2, [r3, #8]
 80009e8:	60da      	str	r2, [r3, #12]
 80009ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a19      	ldr	r2, [pc, #100]	; (8000a58 <HAL_UART_MspInit+0x84>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d12b      	bne.n	8000a4e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b18      	ldr	r3, [pc, #96]	; (8000a5c <HAL_UART_MspInit+0x88>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	4a17      	ldr	r2, [pc, #92]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	6413      	str	r3, [r2, #64]	; 0x40
 8000a06:	4b15      	ldr	r3, [pc, #84]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a10      	ldr	r2, [pc, #64]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b0e      	ldr	r3, [pc, #56]	; (8000a5c <HAL_UART_MspInit+0x88>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a2e:	230c      	movs	r3, #12
 8000a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a42:	f107 0314 	add.w	r3, r7, #20
 8000a46:	4619      	mov	r1, r3
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <HAL_UART_MspInit+0x8c>)
 8000a4a:	f000 f9c3 	bl	8000dd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a4e:	bf00      	nop
 8000a50:	3728      	adds	r7, #40	; 0x28
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40004400 	.word	0x40004400
 8000a5c:	40023800 	.word	0x40023800
 8000a60:	40020000 	.word	0x40020000

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f898 	bl	8000bc8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a98:	f003 f996 	bl	8003dc8 <xTaskGetSchedulerState>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b01      	cmp	r3, #1
 8000aa0:	d001      	beq.n	8000aa6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000aa2:	f003 ff81 	bl	80049a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
	...

08000aac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <SystemInit+0x20>)
 8000ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ab6:	4a05      	ldr	r2, [pc, #20]	; (8000acc <SystemInit+0x20>)
 8000ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b08 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ad4:	f7ff ffea 	bl	8000aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad8:	480c      	ldr	r0, [pc, #48]	; (8000b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ada:	490d      	ldr	r1, [pc, #52]	; (8000b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000adc:	4a0d      	ldr	r2, [pc, #52]	; (8000b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae0:	e002      	b.n	8000ae8 <LoopCopyDataInit>

08000ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ae6:	3304      	adds	r3, #4

08000ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000aec:	d3f9      	bcc.n	8000ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000af0:	4c0a      	ldr	r4, [pc, #40]	; (8000b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af4:	e001      	b.n	8000afa <LoopFillZerobss>

08000af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af8:	3204      	adds	r2, #4

08000afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000afc:	d3fb      	bcc.n	8000af6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000afe:	f004 f9d5 	bl	8004eac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b02:	f7ff fd03 	bl	800050c <main>
  bx  lr    
 8000b06:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b10:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b14:	08005070 	.word	0x08005070
  ldr r2, =_sbss
 8000b18:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b1c:	200049e0 	.word	0x200049e0

08000b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b20:	e7fe      	b.n	8000b20 <ADC_IRQHandler>
	...

08000b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b28:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0d      	ldr	r2, [pc, #52]	; (8000b64 <HAL_Init+0x40>)
 8000b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b34:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <HAL_Init+0x40>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a0a      	ldr	r2, [pc, #40]	; (8000b64 <HAL_Init+0x40>)
 8000b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x40>)
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f90d 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	200f      	movs	r0, #15
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff ff10 	bl	800097c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40023c00 	.word	0x40023c00

08000b68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f917 	bl	8000dba <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba4:	f000 f8ed 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000000 	.word	0x20000000
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000008 	.word	0x20000008
 8000bec:	2000008c 	.word	0x2000008c

08000bf0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <HAL_GetTick+0x14>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	2000008c 	.word	0x2000008c

08000c08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b085      	sub	sp, #20
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	f003 0307 	and.w	r3, r3, #7
 8000c16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c18:	4b0c      	ldr	r3, [pc, #48]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c24:	4013      	ands	r3, r2
 8000c26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3a:	4a04      	ldr	r2, [pc, #16]	; (8000c4c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3c:	68bb      	ldr	r3, [r7, #8]
 8000c3e:	60d3      	str	r3, [r2, #12]
}
 8000c40:	bf00      	nop
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c54:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <__NVIC_GetPriorityGrouping+0x18>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0a1b      	lsrs	r3, r3, #8
 8000c5a:	f003 0307 	and.w	r3, r3, #7
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff47 	bl	8000c08 <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff5c 	bl	8000c50 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff ffb0 	bl	8000d28 <SysTick_Config>
 8000dc8:	4603      	mov	r3, r0
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
	...

08000dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dde:	2300      	movs	r3, #0
 8000de0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dea:	2300      	movs	r3, #0
 8000dec:	61fb      	str	r3, [r7, #28]
 8000dee:	e165      	b.n	80010bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	697a      	ldr	r2, [r7, #20]
 8000e00:	4013      	ands	r3, r2
 8000e02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	f040 8154 	bne.w	80010b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 0303 	and.w	r3, r3, #3
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e22:	2b02      	cmp	r3, #2
 8000e24:	d130      	bne.n	8000e88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	68da      	ldr	r2, [r3, #12]
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	43db      	mvns	r3, r3
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	4013      	ands	r3, r2
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	091b      	lsrs	r3, r3, #4
 8000e72:	f003 0201 	and.w	r2, r3, #1
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b03      	cmp	r3, #3
 8000e92:	d017      	beq.n	8000ec4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	68db      	ldr	r3, [r3, #12]
 8000e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	689a      	ldr	r2, [r3, #8]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d123      	bne.n	8000f18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	08da      	lsrs	r2, r3, #3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	3208      	adds	r2, #8
 8000ed8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	f003 0307 	and.w	r3, r3, #7
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	08da      	lsrs	r2, r3, #3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3208      	adds	r2, #8
 8000f12:	69b9      	ldr	r1, [r7, #24]
 8000f14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0203 	and.w	r2, r3, #3
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	f000 80ae 	beq.w	80010b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b5d      	ldr	r3, [pc, #372]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	4a5c      	ldr	r2, [pc, #368]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f68:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6a:	4b5a      	ldr	r3, [pc, #360]	; (80010d4 <HAL_GPIO_Init+0x300>)
 8000f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f76:	4a58      	ldr	r2, [pc, #352]	; (80010d8 <HAL_GPIO_Init+0x304>)
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	089b      	lsrs	r3, r3, #2
 8000f7c:	3302      	adds	r3, #2
 8000f7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f84:	69fb      	ldr	r3, [r7, #28]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4f      	ldr	r2, [pc, #316]	; (80010dc <HAL_GPIO_Init+0x308>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d025      	beq.n	8000fee <HAL_GPIO_Init+0x21a>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4e      	ldr	r2, [pc, #312]	; (80010e0 <HAL_GPIO_Init+0x30c>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d01f      	beq.n	8000fea <HAL_GPIO_Init+0x216>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4d      	ldr	r2, [pc, #308]	; (80010e4 <HAL_GPIO_Init+0x310>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d019      	beq.n	8000fe6 <HAL_GPIO_Init+0x212>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4a4c      	ldr	r2, [pc, #304]	; (80010e8 <HAL_GPIO_Init+0x314>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d013      	beq.n	8000fe2 <HAL_GPIO_Init+0x20e>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a4b      	ldr	r2, [pc, #300]	; (80010ec <HAL_GPIO_Init+0x318>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d00d      	beq.n	8000fde <HAL_GPIO_Init+0x20a>
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a4a      	ldr	r2, [pc, #296]	; (80010f0 <HAL_GPIO_Init+0x31c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d007      	beq.n	8000fda <HAL_GPIO_Init+0x206>
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a49      	ldr	r2, [pc, #292]	; (80010f4 <HAL_GPIO_Init+0x320>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d101      	bne.n	8000fd6 <HAL_GPIO_Init+0x202>
 8000fd2:	2306      	movs	r3, #6
 8000fd4:	e00c      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fd6:	2307      	movs	r3, #7
 8000fd8:	e00a      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fda:	2305      	movs	r3, #5
 8000fdc:	e008      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fde:	2304      	movs	r3, #4
 8000fe0:	e006      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e004      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	e002      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fea:	2301      	movs	r3, #1
 8000fec:	e000      	b.n	8000ff0 <HAL_GPIO_Init+0x21c>
 8000fee:	2300      	movs	r3, #0
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	f002 0203 	and.w	r2, r2, #3
 8000ff6:	0092      	lsls	r2, r2, #2
 8000ff8:	4093      	lsls	r3, r2
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001000:	4935      	ldr	r1, [pc, #212]	; (80010d8 <HAL_GPIO_Init+0x304>)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	3302      	adds	r3, #2
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800100e:	4b3a      	ldr	r3, [pc, #232]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001010:	689b      	ldr	r3, [r3, #8]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001032:	4a31      	ldr	r2, [pc, #196]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800105c:	4a26      	ldr	r2, [pc, #152]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001062:	4b25      	ldr	r3, [pc, #148]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d003      	beq.n	8001086 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <HAL_GPIO_Init+0x324>)
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108c:	4b1a      	ldr	r3, [pc, #104]	; (80010f8 <HAL_GPIO_Init+0x324>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d003      	beq.n	80010b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010b0:	4a11      	ldr	r2, [pc, #68]	; (80010f8 <HAL_GPIO_Init+0x324>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3301      	adds	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	2b0f      	cmp	r3, #15
 80010c0:	f67f ae96 	bls.w	8000df0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	40023800 	.word	0x40023800
 80010d8:	40013800 	.word	0x40013800
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40020800 	.word	0x40020800
 80010e8:	40020c00 	.word	0x40020c00
 80010ec:	40021000 	.word	0x40021000
 80010f0:	40021400 	.word	0x40021400
 80010f4:	40021800 	.word	0x40021800
 80010f8:	40013c00 	.word	0x40013c00

080010fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691a      	ldr	r2, [r3, #16]
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	4013      	ands	r3, r2
 8001110:	2b00      	cmp	r3, #0
 8001112:	d002      	beq.n	800111a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001114:	2301      	movs	r3, #1
 8001116:	73fb      	strb	r3, [r7, #15]
 8001118:	e001      	b.n	800111e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800111a:	2300      	movs	r3, #0
 800111c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800111e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	460b      	mov	r3, r1
 8001136:	807b      	strh	r3, [r7, #2]
 8001138:	4613      	mov	r3, r2
 800113a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800113c:	787b      	ldrb	r3, [r7, #1]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d003      	beq.n	800114a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001142:	887a      	ldrh	r2, [r7, #2]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001148:	e003      	b.n	8001152 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	041a      	lsls	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	619a      	str	r2, [r3, #24]
}
 8001152:	bf00      	nop
 8001154:	370c      	adds	r7, #12
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	460b      	mov	r3, r1
 8001168:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001170:	887a      	ldrh	r2, [r7, #2]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	041a      	lsls	r2, r3, #16
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43d9      	mvns	r1, r3
 800117c:	887b      	ldrh	r3, [r7, #2]
 800117e:	400b      	ands	r3, r1
 8001180:	431a      	orrs	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800119a:	2300      	movs	r3, #0
 800119c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	603b      	str	r3, [r7, #0]
 80011a2:	4b20      	ldr	r3, [pc, #128]	; (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a6:	4a1f      	ldr	r2, [pc, #124]	; (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ac:	6413      	str	r3, [r2, #64]	; 0x40
 80011ae:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b6:	603b      	str	r3, [r7, #0]
 80011b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_PWREx_EnableOverDrive+0x94>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011c0:	f7ff fd16 	bl	8000bf0 <HAL_GetTick>
 80011c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011c6:	e009      	b.n	80011dc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011c8:	f7ff fd12 	bl	8000bf0 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d6:	d901      	bls.n	80011dc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011d8:	2303      	movs	r3, #3
 80011da:	e01f      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <HAL_PWREx_EnableOverDrive+0x98>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011e8:	d1ee      	bne.n	80011c8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011f0:	f7ff fcfe 	bl	8000bf0 <HAL_GetTick>
 80011f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011f6:	e009      	b.n	800120c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011f8:	f7ff fcfa 	bl	8000bf0 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001206:	d901      	bls.n	800120c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e007      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <HAL_PWREx_EnableOverDrive+0x98>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001214:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001218:	d1ee      	bne.n	80011f8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40023800 	.word	0x40023800
 8001228:	420e0040 	.word	0x420e0040
 800122c:	40007000 	.word	0x40007000
 8001230:	420e0044 	.word	0x420e0044

08001234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e0cc      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001248:	4b68      	ldr	r3, [pc, #416]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f003 030f 	and.w	r3, r3, #15
 8001250:	683a      	ldr	r2, [r7, #0]
 8001252:	429a      	cmp	r2, r3
 8001254:	d90c      	bls.n	8001270 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001256:	4b65      	ldr	r3, [pc, #404]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	b2d2      	uxtb	r2, r2
 800125c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800125e:	4b63      	ldr	r3, [pc, #396]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	683a      	ldr	r2, [r7, #0]
 8001268:	429a      	cmp	r2, r3
 800126a:	d001      	beq.n	8001270 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e0b8      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d020      	beq.n	80012be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0304 	and.w	r3, r3, #4
 8001284:	2b00      	cmp	r3, #0
 8001286:	d005      	beq.n	8001294 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001288:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	4a58      	ldr	r2, [pc, #352]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001292:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0308 	and.w	r3, r3, #8
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012a0:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	4a52      	ldr	r2, [pc, #328]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ac:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	689b      	ldr	r3, [r3, #8]
 80012b8:	494d      	ldr	r1, [pc, #308]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d044      	beq.n	8001354 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d107      	bne.n	80012e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d119      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e07f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d003      	beq.n	80012f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f2:	4b3f      	ldr	r3, [pc, #252]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d109      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e06f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001302:	4b3b      	ldr	r3, [pc, #236]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e067      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f023 0203 	bic.w	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	4934      	ldr	r1, [pc, #208]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001324:	f7ff fc64 	bl	8000bf0 <HAL_GetTick>
 8001328:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800132a:	e00a      	b.n	8001342 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800132c:	f7ff fc60 	bl	8000bf0 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e04f      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001342:	4b2b      	ldr	r3, [pc, #172]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 020c 	and.w	r2, r3, #12
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	429a      	cmp	r2, r3
 8001352:	d1eb      	bne.n	800132c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 030f 	and.w	r3, r3, #15
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d20c      	bcs.n	800137c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b22      	ldr	r3, [pc, #136]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 8001364:	683a      	ldr	r2, [r7, #0]
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_RCC_ClockConfig+0x1b8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	683a      	ldr	r2, [r7, #0]
 8001374:	429a      	cmp	r2, r3
 8001376:	d001      	beq.n	800137c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e032      	b.n	80013e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0304 	and.w	r3, r3, #4
 8001384:	2b00      	cmp	r3, #0
 8001386:	d008      	beq.n	800139a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001388:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	4313      	orrs	r3, r2
 8001398:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0308 	and.w	r3, r3, #8
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d009      	beq.n	80013ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013a6:	4b12      	ldr	r3, [pc, #72]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	490e      	ldr	r1, [pc, #56]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013ba:	f000 f855 	bl	8001468 <HAL_RCC_GetSysClockFreq>
 80013be:	4602      	mov	r2, r0
 80013c0:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_ClockConfig+0x1bc>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	490a      	ldr	r1, [pc, #40]	; (80013f4 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	5ccb      	ldrb	r3, [r1, r3]
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	4a09      	ldr	r2, [pc, #36]	; (80013f8 <HAL_RCC_ClockConfig+0x1c4>)
 80013d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <HAL_RCC_ClockConfig+0x1c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fbc4 	bl	8000b68 <HAL_InitTick>

  return HAL_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023c00 	.word	0x40023c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	08005048 	.word	0x08005048
 80013f8:	20000000 	.word	0x20000000
 80013fc:	20000004 	.word	0x20000004

08001400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_RCC_GetHCLKFreq+0x14>)
 8001406:	681b      	ldr	r3, [r3, #0]
}
 8001408:	4618      	mov	r0, r3
 800140a:	46bd      	mov	sp, r7
 800140c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001410:	4770      	bx	lr
 8001412:	bf00      	nop
 8001414:	20000000 	.word	0x20000000

08001418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800141c:	f7ff fff0 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 8001420:	4602      	mov	r2, r0
 8001422:	4b05      	ldr	r3, [pc, #20]	; (8001438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	0a9b      	lsrs	r3, r3, #10
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	4903      	ldr	r1, [pc, #12]	; (800143c <HAL_RCC_GetPCLK1Freq+0x24>)
 800142e:	5ccb      	ldrb	r3, [r1, r3]
 8001430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001434:	4618      	mov	r0, r3
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	08005058 	.word	0x08005058

08001440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001444:	f7ff ffdc 	bl	8001400 <HAL_RCC_GetHCLKFreq>
 8001448:	4602      	mov	r2, r0
 800144a:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	0b5b      	lsrs	r3, r3, #13
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	4903      	ldr	r1, [pc, #12]	; (8001464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001456:	5ccb      	ldrb	r3, [r1, r3]
 8001458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800145c:	4618      	mov	r0, r3
 800145e:	bd80      	pop	{r7, pc}
 8001460:	40023800 	.word	0x40023800
 8001464:	08005058 	.word	0x08005058

08001468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800146c:	b0ae      	sub	sp, #184	; 0xb8
 800146e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001476:	2300      	movs	r3, #0
 8001478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001488:	2300      	movs	r3, #0
 800148a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800148e:	4bcb      	ldr	r3, [pc, #812]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b0c      	cmp	r3, #12
 8001498:	f200 8206 	bhi.w	80018a8 <HAL_RCC_GetSysClockFreq+0x440>
 800149c:	a201      	add	r2, pc, #4	; (adr r2, 80014a4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a2:	bf00      	nop
 80014a4:	080014d9 	.word	0x080014d9
 80014a8:	080018a9 	.word	0x080018a9
 80014ac:	080018a9 	.word	0x080018a9
 80014b0:	080018a9 	.word	0x080018a9
 80014b4:	080014e1 	.word	0x080014e1
 80014b8:	080018a9 	.word	0x080018a9
 80014bc:	080018a9 	.word	0x080018a9
 80014c0:	080018a9 	.word	0x080018a9
 80014c4:	080014e9 	.word	0x080014e9
 80014c8:	080018a9 	.word	0x080018a9
 80014cc:	080018a9 	.word	0x080018a9
 80014d0:	080018a9 	.word	0x080018a9
 80014d4:	080016d9 	.word	0x080016d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014d8:	4bb9      	ldr	r3, [pc, #740]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x358>)
 80014da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80014de:	e1e7      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014e0:	4bb8      	ldr	r3, [pc, #736]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80014e6:	e1e3      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014e8:	4bb4      	ldr	r3, [pc, #720]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014f0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014f4:	4bb1      	ldr	r3, [pc, #708]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d071      	beq.n	80015e4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001500:	4bae      	ldr	r3, [pc, #696]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	099b      	lsrs	r3, r3, #6
 8001506:	2200      	movs	r2, #0
 8001508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800150c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001510:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001518:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800151c:	2300      	movs	r3, #0
 800151e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001522:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001526:	4622      	mov	r2, r4
 8001528:	462b      	mov	r3, r5
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	0159      	lsls	r1, r3, #5
 8001534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001538:	0150      	lsls	r0, r2, #5
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4621      	mov	r1, r4
 8001540:	1a51      	subs	r1, r2, r1
 8001542:	6439      	str	r1, [r7, #64]	; 0x40
 8001544:	4629      	mov	r1, r5
 8001546:	eb63 0301 	sbc.w	r3, r3, r1
 800154a:	647b      	str	r3, [r7, #68]	; 0x44
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001558:	4649      	mov	r1, r9
 800155a:	018b      	lsls	r3, r1, #6
 800155c:	4641      	mov	r1, r8
 800155e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001562:	4641      	mov	r1, r8
 8001564:	018a      	lsls	r2, r1, #6
 8001566:	4641      	mov	r1, r8
 8001568:	1a51      	subs	r1, r2, r1
 800156a:	63b9      	str	r1, [r7, #56]	; 0x38
 800156c:	4649      	mov	r1, r9
 800156e:	eb63 0301 	sbc.w	r3, r3, r1
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001580:	4649      	mov	r1, r9
 8001582:	00cb      	lsls	r3, r1, #3
 8001584:	4641      	mov	r1, r8
 8001586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800158a:	4641      	mov	r1, r8
 800158c:	00ca      	lsls	r2, r1, #3
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	4603      	mov	r3, r0
 8001594:	4622      	mov	r2, r4
 8001596:	189b      	adds	r3, r3, r2
 8001598:	633b      	str	r3, [r7, #48]	; 0x30
 800159a:	462b      	mov	r3, r5
 800159c:	460a      	mov	r2, r1
 800159e:	eb42 0303 	adc.w	r3, r2, r3
 80015a2:	637b      	str	r3, [r7, #52]	; 0x34
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	f04f 0300 	mov.w	r3, #0
 80015ac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80015b0:	4629      	mov	r1, r5
 80015b2:	024b      	lsls	r3, r1, #9
 80015b4:	4621      	mov	r1, r4
 80015b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ba:	4621      	mov	r1, r4
 80015bc:	024a      	lsls	r2, r1, #9
 80015be:	4610      	mov	r0, r2
 80015c0:	4619      	mov	r1, r3
 80015c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80015cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80015d0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80015d4:	f7fe fe1c 	bl	8000210 <__aeabi_uldivmod>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4613      	mov	r3, r2
 80015de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80015e2:	e067      	b.n	80016b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015e4:	4b75      	ldr	r3, [pc, #468]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	099b      	lsrs	r3, r3, #6
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80015f0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80015f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80015fe:	2300      	movs	r3, #0
 8001600:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001602:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001606:	4622      	mov	r2, r4
 8001608:	462b      	mov	r3, r5
 800160a:	f04f 0000 	mov.w	r0, #0
 800160e:	f04f 0100 	mov.w	r1, #0
 8001612:	0159      	lsls	r1, r3, #5
 8001614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001618:	0150      	lsls	r0, r2, #5
 800161a:	4602      	mov	r2, r0
 800161c:	460b      	mov	r3, r1
 800161e:	4621      	mov	r1, r4
 8001620:	1a51      	subs	r1, r2, r1
 8001622:	62b9      	str	r1, [r7, #40]	; 0x28
 8001624:	4629      	mov	r1, r5
 8001626:	eb63 0301 	sbc.w	r3, r3, r1
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001638:	4649      	mov	r1, r9
 800163a:	018b      	lsls	r3, r1, #6
 800163c:	4641      	mov	r1, r8
 800163e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001642:	4641      	mov	r1, r8
 8001644:	018a      	lsls	r2, r1, #6
 8001646:	4641      	mov	r1, r8
 8001648:	ebb2 0a01 	subs.w	sl, r2, r1
 800164c:	4649      	mov	r1, r9
 800164e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	f04f 0300 	mov.w	r3, #0
 800165a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800165e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001666:	4692      	mov	sl, r2
 8001668:	469b      	mov	fp, r3
 800166a:	4623      	mov	r3, r4
 800166c:	eb1a 0303 	adds.w	r3, sl, r3
 8001670:	623b      	str	r3, [r7, #32]
 8001672:	462b      	mov	r3, r5
 8001674:	eb4b 0303 	adc.w	r3, fp, r3
 8001678:	627b      	str	r3, [r7, #36]	; 0x24
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	f04f 0300 	mov.w	r3, #0
 8001682:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001686:	4629      	mov	r1, r5
 8001688:	028b      	lsls	r3, r1, #10
 800168a:	4621      	mov	r1, r4
 800168c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001690:	4621      	mov	r1, r4
 8001692:	028a      	lsls	r2, r1, #10
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800169c:	2200      	movs	r2, #0
 800169e:	673b      	str	r3, [r7, #112]	; 0x70
 80016a0:	677a      	str	r2, [r7, #116]	; 0x74
 80016a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80016a6:	f7fe fdb3 	bl	8000210 <__aeabi_uldivmod>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	4613      	mov	r3, r2
 80016b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016b4:	4b41      	ldr	r3, [pc, #260]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0c1b      	lsrs	r3, r3, #16
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	3301      	adds	r3, #1
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80016c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80016ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80016ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80016d6:	e0eb      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016d8:	4b38      	ldr	r3, [pc, #224]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e4:	4b35      	ldr	r3, [pc, #212]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d06b      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f0:	4b32      	ldr	r3, [pc, #200]	; (80017bc <HAL_RCC_GetSysClockFreq+0x354>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	2200      	movs	r2, #0
 80016f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80016fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80016fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80016fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001702:	663b      	str	r3, [r7, #96]	; 0x60
 8001704:	2300      	movs	r3, #0
 8001706:	667b      	str	r3, [r7, #100]	; 0x64
 8001708:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800170c:	4622      	mov	r2, r4
 800170e:	462b      	mov	r3, r5
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0159      	lsls	r1, r3, #5
 800171a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800171e:	0150      	lsls	r0, r2, #5
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4621      	mov	r1, r4
 8001726:	1a51      	subs	r1, r2, r1
 8001728:	61b9      	str	r1, [r7, #24]
 800172a:	4629      	mov	r1, r5
 800172c:	eb63 0301 	sbc.w	r3, r3, r1
 8001730:	61fb      	str	r3, [r7, #28]
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	f04f 0300 	mov.w	r3, #0
 800173a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800173e:	4659      	mov	r1, fp
 8001740:	018b      	lsls	r3, r1, #6
 8001742:	4651      	mov	r1, sl
 8001744:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001748:	4651      	mov	r1, sl
 800174a:	018a      	lsls	r2, r1, #6
 800174c:	4651      	mov	r1, sl
 800174e:	ebb2 0801 	subs.w	r8, r2, r1
 8001752:	4659      	mov	r1, fp
 8001754:	eb63 0901 	sbc.w	r9, r3, r1
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001764:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001768:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800176c:	4690      	mov	r8, r2
 800176e:	4699      	mov	r9, r3
 8001770:	4623      	mov	r3, r4
 8001772:	eb18 0303 	adds.w	r3, r8, r3
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	462b      	mov	r3, r5
 800177a:	eb49 0303 	adc.w	r3, r9, r3
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800178c:	4629      	mov	r1, r5
 800178e:	024b      	lsls	r3, r1, #9
 8001790:	4621      	mov	r1, r4
 8001792:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001796:	4621      	mov	r1, r4
 8001798:	024a      	lsls	r2, r1, #9
 800179a:	4610      	mov	r0, r2
 800179c:	4619      	mov	r1, r3
 800179e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017a2:	2200      	movs	r2, #0
 80017a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80017a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80017a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80017ac:	f7fe fd30 	bl	8000210 <__aeabi_uldivmod>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4613      	mov	r3, r2
 80017b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80017ba:	e065      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x420>
 80017bc:	40023800 	.word	0x40023800
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c8:	4b3d      	ldr	r3, [pc, #244]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	099b      	lsrs	r3, r3, #6
 80017ce:	2200      	movs	r2, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	4611      	mov	r1, r2
 80017d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017d8:	653b      	str	r3, [r7, #80]	; 0x50
 80017da:	2300      	movs	r3, #0
 80017dc:	657b      	str	r3, [r7, #84]	; 0x54
 80017de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80017e2:	4642      	mov	r2, r8
 80017e4:	464b      	mov	r3, r9
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4641      	mov	r1, r8
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	4649      	mov	r1, r9
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001814:	4659      	mov	r1, fp
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	4651      	mov	r1, sl
 800181a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181e:	4651      	mov	r1, sl
 8001820:	018a      	lsls	r2, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	1a54      	subs	r4, r2, r1
 8001826:	4659      	mov	r1, fp
 8001828:	eb63 0501 	sbc.w	r5, r3, r1
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	00eb      	lsls	r3, r5, #3
 8001836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800183a:	00e2      	lsls	r2, r4, #3
 800183c:	4614      	mov	r4, r2
 800183e:	461d      	mov	r5, r3
 8001840:	4643      	mov	r3, r8
 8001842:	18e3      	adds	r3, r4, r3
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	464b      	mov	r3, r9
 8001848:	eb45 0303 	adc.w	r3, r5, r3
 800184c:	607b      	str	r3, [r7, #4]
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	e9d7 4500 	ldrd	r4, r5, [r7]
 800185a:	4629      	mov	r1, r5
 800185c:	028b      	lsls	r3, r1, #10
 800185e:	4621      	mov	r1, r4
 8001860:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001864:	4621      	mov	r1, r4
 8001866:	028a      	lsls	r2, r1, #10
 8001868:	4610      	mov	r0, r2
 800186a:	4619      	mov	r1, r3
 800186c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001870:	2200      	movs	r2, #0
 8001872:	64bb      	str	r3, [r7, #72]	; 0x48
 8001874:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001876:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800187a:	f7fe fcc9 	bl	8000210 <__aeabi_uldivmod>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4613      	mov	r3, r2
 8001884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001888:	4b0d      	ldr	r3, [pc, #52]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	0f1b      	lsrs	r3, r3, #28
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8001896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800189a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800189e:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018a6:	e003      	b.n	80018b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80018aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80018ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	37b8      	adds	r7, #184	; 0xb8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800
 80018c4:	00f42400 	.word	0x00f42400

080018c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b086      	sub	sp, #24
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d101      	bne.n	80018da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e28d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	f000 8083 	beq.w	80019ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018e8:	4b94      	ldr	r3, [pc, #592]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 030c 	and.w	r3, r3, #12
 80018f0:	2b04      	cmp	r3, #4
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80018f4:	4b91      	ldr	r3, [pc, #580]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80018fc:	2b08      	cmp	r3, #8
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001900:	4b8e      	ldr	r3, [pc, #568]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800190c:	d00c      	beq.n	8001928 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800190e:	4b8b      	ldr	r3, [pc, #556]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001910:	689b      	ldr	r3, [r3, #8]
 8001912:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800191a:	4b88      	ldr	r3, [pc, #544]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001922:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001926:	d10b      	bne.n	8001940 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001928:	4b84      	ldr	r3, [pc, #528]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d05b      	beq.n	80019ec <HAL_RCC_OscConfig+0x124>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d157      	bne.n	80019ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	e25a      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001948:	d106      	bne.n	8001958 <HAL_RCC_OscConfig+0x90>
 800194a:	4b7c      	ldr	r3, [pc, #496]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7b      	ldr	r2, [pc, #492]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xb4>
 8001962:	4b76      	ldr	r3, [pc, #472]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a75      	ldr	r2, [pc, #468]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b73      	ldr	r3, [pc, #460]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a72      	ldr	r2, [pc, #456]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xcc>
 800197c:	4b6f      	ldr	r3, [pc, #444]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a6e      	ldr	r2, [pc, #440]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6c      	ldr	r3, [pc, #432]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6b      	ldr	r2, [pc, #428]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f928 	bl	8000bf0 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff f924 	bl	8000bf0 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e21f      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b61      	ldr	r3, [pc, #388]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xdc>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff f914 	bl	8000bf0 <HAL_GetTick>
 80019c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff f910 	bl	8000bf0 <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e20b      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	4b57      	ldr	r3, [pc, #348]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x104>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d06f      	beq.n	8001ada <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80019fa:	4b50      	ldr	r3, [pc, #320]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d017      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a06:	4b4d      	ldr	r3, [pc, #308]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001a0e:	2b08      	cmp	r3, #8
 8001a10:	d105      	bne.n	8001a1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a12:	4b4a      	ldr	r3, [pc, #296]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d00b      	beq.n	8001a36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1e:	4b47      	ldr	r3, [pc, #284]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d11c      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2a:	4b44      	ldr	r3, [pc, #272]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a36:	4b41      	ldr	r3, [pc, #260]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0302 	and.w	r3, r3, #2
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d001      	beq.n	8001a4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1d3      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b3b      	ldr	r3, [pc, #236]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a62:	e03a      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d020      	beq.n	8001aae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b34      	ldr	r3, [pc, #208]	; (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001a6e:	2201      	movs	r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f8bd 	bl	8000bf0 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f8b9 	bl	8000bf0 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1b4      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f0      	beq.n	8001a7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a98:	4b28      	ldr	r3, [pc, #160]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	00db      	lsls	r3, r3, #3
 8001aa6:	4925      	ldr	r1, [pc, #148]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	600b      	str	r3, [r1, #0]
 8001aac:	e015      	b.n	8001ada <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b24      	ldr	r3, [pc, #144]	; (8001b40 <HAL_RCC_OscConfig+0x278>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f89c 	bl	8000bf0 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001abc:	f7ff f898 	bl	8000bf0 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e193      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ace:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d036      	beq.n	8001b54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	695b      	ldr	r3, [r3, #20]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d016      	beq.n	8001b1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af4:	f7ff f87c 	bl	8000bf0 <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001afc:	f7ff f878 	bl	8000bf0 <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e173      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <HAL_RCC_OscConfig+0x274>)
 8001b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x234>
 8001b1a:	e01b      	b.n	8001b54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b1c:	4b09      	ldr	r3, [pc, #36]	; (8001b44 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b22:	f7ff f865 	bl	8000bf0 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b28:	e00e      	b.n	8001b48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b2a:	f7ff f861 	bl	8000bf0 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d907      	bls.n	8001b48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e15c      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	42470000 	.word	0x42470000
 8001b44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b48:	4b8a      	ldr	r3, [pc, #552]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ea      	bne.n	8001b2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0304 	and.w	r3, r3, #4
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8097 	beq.w	8001c90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b62:	2300      	movs	r3, #0
 8001b64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b66:	4b83      	ldr	r3, [pc, #524]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d10f      	bne.n	8001b92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60bb      	str	r3, [r7, #8]
 8001b76:	4b7f      	ldr	r3, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	4a7e      	ldr	r2, [pc, #504]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b80:	6413      	str	r3, [r2, #64]	; 0x40
 8001b82:	4b7c      	ldr	r3, [pc, #496]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	60bb      	str	r3, [r7, #8]
 8001b8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b92:	4b79      	ldr	r3, [pc, #484]	; (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d118      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9e:	4b76      	ldr	r3, [pc, #472]	; (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a75      	ldr	r2, [pc, #468]	; (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001baa:	f7ff f821 	bl	8000bf0 <HAL_GetTick>
 8001bae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb0:	e008      	b.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb2:	f7ff f81d 	bl	8000bf0 <HAL_GetTick>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d901      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e118      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc4:	4b6c      	ldr	r3, [pc, #432]	; (8001d78 <HAL_RCC_OscConfig+0x4b0>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0f0      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d106      	bne.n	8001be6 <HAL_RCC_OscConfig+0x31e>
 8001bd8:	4b66      	ldr	r3, [pc, #408]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bdc:	4a65      	ldr	r2, [pc, #404]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	f043 0301 	orr.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	; 0x70
 8001be4:	e01c      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x340>
 8001bee:	4b61      	ldr	r3, [pc, #388]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a60      	ldr	r2, [pc, #384]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b5e      	ldr	r3, [pc, #376]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a5d      	ldr	r2, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x358>
 8001c08:	4b5a      	ldr	r3, [pc, #360]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0c:	4a59      	ldr	r2, [pc, #356]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c0e:	f023 0301 	bic.w	r3, r3, #1
 8001c12:	6713      	str	r3, [r2, #112]	; 0x70
 8001c14:	4b57      	ldr	r3, [pc, #348]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c18:	4a56      	ldr	r2, [pc, #344]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c1a:	f023 0304 	bic.w	r3, r3, #4
 8001c1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d015      	beq.n	8001c54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c28:	f7fe ffe2 	bl	8000bf0 <HAL_GetTick>
 8001c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2e:	e00a      	b.n	8001c46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c30:	f7fe ffde 	bl	8000bf0 <HAL_GetTick>
 8001c34:	4602      	mov	r2, r0
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e0d7      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c46:	4b4b      	ldr	r3, [pc, #300]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0ee      	beq.n	8001c30 <HAL_RCC_OscConfig+0x368>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c54:	f7fe ffcc 	bl	8000bf0 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5a:	e00a      	b.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c5c:	f7fe ffc8 	bl	8000bf0 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0c1      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c72:	4b40      	ldr	r3, [pc, #256]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ee      	bne.n	8001c5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c7e:	7dfb      	ldrb	r3, [r7, #23]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d105      	bne.n	8001c90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c84:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c88:	4a3a      	ldr	r2, [pc, #232]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	699b      	ldr	r3, [r3, #24]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80ad 	beq.w	8001df4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9a:	4b36      	ldr	r3, [pc, #216]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 030c 	and.w	r3, r3, #12
 8001ca2:	2b08      	cmp	r3, #8
 8001ca4:	d060      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d145      	bne.n	8001d3a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb4:	f7fe ff9c 	bl	8000bf0 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cbc:	f7fe ff98 	bl	8000bf0 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e093      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cce:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69da      	ldr	r2, [r3, #28]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6a1b      	ldr	r3, [r3, #32]
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	085b      	lsrs	r3, r3, #1
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	041b      	lsls	r3, r3, #16
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	061b      	lsls	r3, r3, #24
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d04:	071b      	lsls	r3, r3, #28
 8001d06:	491b      	ldr	r1, [pc, #108]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d0c:	4b1b      	ldr	r3, [pc, #108]	; (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d12:	f7fe ff6d 	bl	8000bf0 <HAL_GetTick>
 8001d16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d18:	e008      	b.n	8001d2c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d1a:	f7fe ff69 	bl	8000bf0 <HAL_GetTick>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d901      	bls.n	8001d2c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	e064      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d0f0      	beq.n	8001d1a <HAL_RCC_OscConfig+0x452>
 8001d38:	e05c      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <HAL_RCC_OscConfig+0x4b4>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d40:	f7fe ff56 	bl	8000bf0 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d48:	f7fe ff52 	bl	8000bf0 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e04d      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_RCC_OscConfig+0x4ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1f0      	bne.n	8001d48 <HAL_RCC_OscConfig+0x480>
 8001d66:	e045      	b.n	8001df4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d107      	bne.n	8001d80 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e040      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
 8001d74:	40023800 	.word	0x40023800
 8001d78:	40007000 	.word	0x40007000
 8001d7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d80:	4b1f      	ldr	r3, [pc, #124]	; (8001e00 <HAL_RCC_OscConfig+0x538>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	699b      	ldr	r3, [r3, #24]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d030      	beq.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d129      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d122      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001daa:	68fa      	ldr	r2, [r7, #12]
 8001dac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001db0:	4013      	ands	r3, r2
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001db6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d119      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc6:	085b      	lsrs	r3, r3, #1
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d10f      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d107      	bne.n	8001df0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e000      	b.n	8001df6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d101      	bne.n	8001e16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e042      	b.n	8001e9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d106      	bne.n	8001e30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fdd2 	bl	80009d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2224      	movs	r2, #36	; 0x24
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68da      	ldr	r2, [r3, #12]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f000 f82b 	bl	8001ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	68da      	ldr	r2, [r3, #12]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2220      	movs	r2, #32
 8001e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ea8:	b0c0      	sub	sp, #256	; 0x100
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec0:	68d9      	ldr	r1, [r3, #12]
 8001ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	ea40 0301 	orr.w	r3, r0, r1
 8001ecc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	431a      	orrs	r2, r3
 8001edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001efc:	f021 010c 	bic.w	r1, r1, #12
 8001f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001f0a:	430b      	orrs	r3, r1
 8001f0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	695b      	ldr	r3, [r3, #20]
 8001f16:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1e:	6999      	ldr	r1, [r3, #24]
 8001f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	ea40 0301 	orr.w	r3, r0, r1
 8001f2a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b8f      	ldr	r3, [pc, #572]	; (8002170 <UART_SetConfig+0x2cc>)
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d005      	beq.n	8001f44 <UART_SetConfig+0xa0>
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4b8d      	ldr	r3, [pc, #564]	; (8002174 <UART_SetConfig+0x2d0>)
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d104      	bne.n	8001f4e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f44:	f7ff fa7c 	bl	8001440 <HAL_RCC_GetPCLK2Freq>
 8001f48:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f4c:	e003      	b.n	8001f56 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f4e:	f7ff fa63 	bl	8001418 <HAL_RCC_GetPCLK1Freq>
 8001f52:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f5a:	69db      	ldr	r3, [r3, #28]
 8001f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f60:	f040 810c 	bne.w	800217c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f6e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f72:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f76:	4622      	mov	r2, r4
 8001f78:	462b      	mov	r3, r5
 8001f7a:	1891      	adds	r1, r2, r2
 8001f7c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f7e:	415b      	adcs	r3, r3
 8001f80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f82:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f86:	4621      	mov	r1, r4
 8001f88:	eb12 0801 	adds.w	r8, r2, r1
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	eb43 0901 	adc.w	r9, r3, r1
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	f04f 0300 	mov.w	r3, #0
 8001f9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001fa2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001fa6:	4690      	mov	r8, r2
 8001fa8:	4699      	mov	r9, r3
 8001faa:	4623      	mov	r3, r4
 8001fac:	eb18 0303 	adds.w	r3, r8, r3
 8001fb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001fb4:	462b      	mov	r3, r5
 8001fb6:	eb49 0303 	adc.w	r3, r9, r3
 8001fba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001fbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001fca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001fce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	18db      	adds	r3, r3, r3
 8001fd6:	653b      	str	r3, [r7, #80]	; 0x50
 8001fd8:	4613      	mov	r3, r2
 8001fda:	eb42 0303 	adc.w	r3, r2, r3
 8001fde:	657b      	str	r3, [r7, #84]	; 0x54
 8001fe0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fe4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fe8:	f7fe f912 	bl	8000210 <__aeabi_uldivmod>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4b61      	ldr	r3, [pc, #388]	; (8002178 <UART_SetConfig+0x2d4>)
 8001ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff6:	095b      	lsrs	r3, r3, #5
 8001ff8:	011c      	lsls	r4, r3, #4
 8001ffa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ffe:	2200      	movs	r2, #0
 8002000:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002004:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002008:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800200c:	4642      	mov	r2, r8
 800200e:	464b      	mov	r3, r9
 8002010:	1891      	adds	r1, r2, r2
 8002012:	64b9      	str	r1, [r7, #72]	; 0x48
 8002014:	415b      	adcs	r3, r3
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002018:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800201c:	4641      	mov	r1, r8
 800201e:	eb12 0a01 	adds.w	sl, r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	eb43 0b01 	adc.w	fp, r3, r1
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002034:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002038:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800203c:	4692      	mov	sl, r2
 800203e:	469b      	mov	fp, r3
 8002040:	4643      	mov	r3, r8
 8002042:	eb1a 0303 	adds.w	r3, sl, r3
 8002046:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800204a:	464b      	mov	r3, r9
 800204c:	eb4b 0303 	adc.w	r3, fp, r3
 8002050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002060:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002064:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002068:	460b      	mov	r3, r1
 800206a:	18db      	adds	r3, r3, r3
 800206c:	643b      	str	r3, [r7, #64]	; 0x40
 800206e:	4613      	mov	r3, r2
 8002070:	eb42 0303 	adc.w	r3, r2, r3
 8002074:	647b      	str	r3, [r7, #68]	; 0x44
 8002076:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800207a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800207e:	f7fe f8c7 	bl	8000210 <__aeabi_uldivmod>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4611      	mov	r1, r2
 8002088:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <UART_SetConfig+0x2d4>)
 800208a:	fba3 2301 	umull	r2, r3, r3, r1
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	2264      	movs	r2, #100	; 0x64
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	1acb      	subs	r3, r1, r3
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800209e:	4b36      	ldr	r3, [pc, #216]	; (8002178 <UART_SetConfig+0x2d4>)
 80020a0:	fba3 2302 	umull	r2, r3, r3, r2
 80020a4:	095b      	lsrs	r3, r3, #5
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020ac:	441c      	add	r4, r3
 80020ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020b2:	2200      	movs	r2, #0
 80020b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80020b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80020bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80020c0:	4642      	mov	r2, r8
 80020c2:	464b      	mov	r3, r9
 80020c4:	1891      	adds	r1, r2, r2
 80020c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80020c8:	415b      	adcs	r3, r3
 80020ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80020d0:	4641      	mov	r1, r8
 80020d2:	1851      	adds	r1, r2, r1
 80020d4:	6339      	str	r1, [r7, #48]	; 0x30
 80020d6:	4649      	mov	r1, r9
 80020d8:	414b      	adcs	r3, r1
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020e8:	4659      	mov	r1, fp
 80020ea:	00cb      	lsls	r3, r1, #3
 80020ec:	4651      	mov	r1, sl
 80020ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020f2:	4651      	mov	r1, sl
 80020f4:	00ca      	lsls	r2, r1, #3
 80020f6:	4610      	mov	r0, r2
 80020f8:	4619      	mov	r1, r3
 80020fa:	4603      	mov	r3, r0
 80020fc:	4642      	mov	r2, r8
 80020fe:	189b      	adds	r3, r3, r2
 8002100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002104:	464b      	mov	r3, r9
 8002106:	460a      	mov	r2, r1
 8002108:	eb42 0303 	adc.w	r3, r2, r3
 800210c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800211c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002120:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002124:	460b      	mov	r3, r1
 8002126:	18db      	adds	r3, r3, r3
 8002128:	62bb      	str	r3, [r7, #40]	; 0x28
 800212a:	4613      	mov	r3, r2
 800212c:	eb42 0303 	adc.w	r3, r2, r3
 8002130:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002132:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002136:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800213a:	f7fe f869 	bl	8000210 <__aeabi_uldivmod>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <UART_SetConfig+0x2d4>)
 8002144:	fba3 1302 	umull	r1, r3, r3, r2
 8002148:	095b      	lsrs	r3, r3, #5
 800214a:	2164      	movs	r1, #100	; 0x64
 800214c:	fb01 f303 	mul.w	r3, r1, r3
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	3332      	adds	r3, #50	; 0x32
 8002156:	4a08      	ldr	r2, [pc, #32]	; (8002178 <UART_SetConfig+0x2d4>)
 8002158:	fba2 2303 	umull	r2, r3, r2, r3
 800215c:	095b      	lsrs	r3, r3, #5
 800215e:	f003 0207 	and.w	r2, r3, #7
 8002162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4422      	add	r2, r4
 800216a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800216c:	e106      	b.n	800237c <UART_SetConfig+0x4d8>
 800216e:	bf00      	nop
 8002170:	40011000 	.word	0x40011000
 8002174:	40011400 	.word	0x40011400
 8002178:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800217c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002180:	2200      	movs	r2, #0
 8002182:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002186:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800218a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800218e:	4642      	mov	r2, r8
 8002190:	464b      	mov	r3, r9
 8002192:	1891      	adds	r1, r2, r2
 8002194:	6239      	str	r1, [r7, #32]
 8002196:	415b      	adcs	r3, r3
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
 800219a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800219e:	4641      	mov	r1, r8
 80021a0:	1854      	adds	r4, r2, r1
 80021a2:	4649      	mov	r1, r9
 80021a4:	eb43 0501 	adc.w	r5, r3, r1
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	f04f 0300 	mov.w	r3, #0
 80021b0:	00eb      	lsls	r3, r5, #3
 80021b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021b6:	00e2      	lsls	r2, r4, #3
 80021b8:	4614      	mov	r4, r2
 80021ba:	461d      	mov	r5, r3
 80021bc:	4643      	mov	r3, r8
 80021be:	18e3      	adds	r3, r4, r3
 80021c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80021c4:	464b      	mov	r3, r9
 80021c6:	eb45 0303 	adc.w	r3, r5, r3
 80021ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80021ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80021da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	f04f 0300 	mov.w	r3, #0
 80021e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021ea:	4629      	mov	r1, r5
 80021ec:	008b      	lsls	r3, r1, #2
 80021ee:	4621      	mov	r1, r4
 80021f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021f4:	4621      	mov	r1, r4
 80021f6:	008a      	lsls	r2, r1, #2
 80021f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021fc:	f7fe f808 	bl	8000210 <__aeabi_uldivmod>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4b60      	ldr	r3, [pc, #384]	; (8002388 <UART_SetConfig+0x4e4>)
 8002206:	fba3 2302 	umull	r2, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	011c      	lsls	r4, r3, #4
 800220e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002212:	2200      	movs	r2, #0
 8002214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002218:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800221c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002220:	4642      	mov	r2, r8
 8002222:	464b      	mov	r3, r9
 8002224:	1891      	adds	r1, r2, r2
 8002226:	61b9      	str	r1, [r7, #24]
 8002228:	415b      	adcs	r3, r3
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002230:	4641      	mov	r1, r8
 8002232:	1851      	adds	r1, r2, r1
 8002234:	6139      	str	r1, [r7, #16]
 8002236:	4649      	mov	r1, r9
 8002238:	414b      	adcs	r3, r1
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002248:	4659      	mov	r1, fp
 800224a:	00cb      	lsls	r3, r1, #3
 800224c:	4651      	mov	r1, sl
 800224e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002252:	4651      	mov	r1, sl
 8002254:	00ca      	lsls	r2, r1, #3
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	4603      	mov	r3, r0
 800225c:	4642      	mov	r2, r8
 800225e:	189b      	adds	r3, r3, r2
 8002260:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002264:	464b      	mov	r3, r9
 8002266:	460a      	mov	r2, r1
 8002268:	eb42 0303 	adc.w	r3, r2, r3
 800226c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	67bb      	str	r3, [r7, #120]	; 0x78
 800227a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	f04f 0300 	mov.w	r3, #0
 8002284:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002288:	4649      	mov	r1, r9
 800228a:	008b      	lsls	r3, r1, #2
 800228c:	4641      	mov	r1, r8
 800228e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002292:	4641      	mov	r1, r8
 8002294:	008a      	lsls	r2, r1, #2
 8002296:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800229a:	f7fd ffb9 	bl	8000210 <__aeabi_uldivmod>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	4b38      	ldr	r3, [pc, #224]	; (8002388 <UART_SetConfig+0x4e4>)
 80022a6:	fba3 2301 	umull	r2, r3, r3, r1
 80022aa:	095b      	lsrs	r3, r3, #5
 80022ac:	2264      	movs	r2, #100	; 0x64
 80022ae:	fb02 f303 	mul.w	r3, r2, r3
 80022b2:	1acb      	subs	r3, r1, r3
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	3332      	adds	r3, #50	; 0x32
 80022b8:	4a33      	ldr	r2, [pc, #204]	; (8002388 <UART_SetConfig+0x4e4>)
 80022ba:	fba2 2303 	umull	r2, r3, r2, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c4:	441c      	add	r4, r3
 80022c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80022ca:	2200      	movs	r2, #0
 80022cc:	673b      	str	r3, [r7, #112]	; 0x70
 80022ce:	677a      	str	r2, [r7, #116]	; 0x74
 80022d0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80022d4:	4642      	mov	r2, r8
 80022d6:	464b      	mov	r3, r9
 80022d8:	1891      	adds	r1, r2, r2
 80022da:	60b9      	str	r1, [r7, #8]
 80022dc:	415b      	adcs	r3, r3
 80022de:	60fb      	str	r3, [r7, #12]
 80022e0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022e4:	4641      	mov	r1, r8
 80022e6:	1851      	adds	r1, r2, r1
 80022e8:	6039      	str	r1, [r7, #0]
 80022ea:	4649      	mov	r1, r9
 80022ec:	414b      	adcs	r3, r1
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	f04f 0200 	mov.w	r2, #0
 80022f4:	f04f 0300 	mov.w	r3, #0
 80022f8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022fc:	4659      	mov	r1, fp
 80022fe:	00cb      	lsls	r3, r1, #3
 8002300:	4651      	mov	r1, sl
 8002302:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002306:	4651      	mov	r1, sl
 8002308:	00ca      	lsls	r2, r1, #3
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	4603      	mov	r3, r0
 8002310:	4642      	mov	r2, r8
 8002312:	189b      	adds	r3, r3, r2
 8002314:	66bb      	str	r3, [r7, #104]	; 0x68
 8002316:	464b      	mov	r3, r9
 8002318:	460a      	mov	r2, r1
 800231a:	eb42 0303 	adc.w	r3, r2, r3
 800231e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	663b      	str	r3, [r7, #96]	; 0x60
 800232a:	667a      	str	r2, [r7, #100]	; 0x64
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002338:	4649      	mov	r1, r9
 800233a:	008b      	lsls	r3, r1, #2
 800233c:	4641      	mov	r1, r8
 800233e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002342:	4641      	mov	r1, r8
 8002344:	008a      	lsls	r2, r1, #2
 8002346:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800234a:	f7fd ff61 	bl	8000210 <__aeabi_uldivmod>
 800234e:	4602      	mov	r2, r0
 8002350:	460b      	mov	r3, r1
 8002352:	4b0d      	ldr	r3, [pc, #52]	; (8002388 <UART_SetConfig+0x4e4>)
 8002354:	fba3 1302 	umull	r1, r3, r3, r2
 8002358:	095b      	lsrs	r3, r3, #5
 800235a:	2164      	movs	r1, #100	; 0x64
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	011b      	lsls	r3, r3, #4
 8002364:	3332      	adds	r3, #50	; 0x32
 8002366:	4a08      	ldr	r2, [pc, #32]	; (8002388 <UART_SetConfig+0x4e4>)
 8002368:	fba2 2303 	umull	r2, r3, r2, r3
 800236c:	095b      	lsrs	r3, r3, #5
 800236e:	f003 020f 	and.w	r2, r3, #15
 8002372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4422      	add	r2, r4
 800237a:	609a      	str	r2, [r3, #8]
}
 800237c:	bf00      	nop
 800237e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002382:	46bd      	mov	sp, r7
 8002384:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002388:	51eb851f 	.word	0x51eb851f

0800238c <__NVIC_SetPriority>:
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	6039      	str	r1, [r7, #0]
 8002396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	2b00      	cmp	r3, #0
 800239e:	db0a      	blt.n	80023b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	490c      	ldr	r1, [pc, #48]	; (80023d8 <__NVIC_SetPriority+0x4c>)
 80023a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023aa:	0112      	lsls	r2, r2, #4
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	440b      	add	r3, r1
 80023b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80023b4:	e00a      	b.n	80023cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	4908      	ldr	r1, [pc, #32]	; (80023dc <__NVIC_SetPriority+0x50>)
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	3b04      	subs	r3, #4
 80023c4:	0112      	lsls	r2, r2, #4
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	440b      	add	r3, r1
 80023ca:	761a      	strb	r2, [r3, #24]
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000e100 	.word	0xe000e100
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80023e4:	2100      	movs	r1, #0
 80023e6:	f06f 0004 	mvn.w	r0, #4
 80023ea:	f7ff ffcf 	bl	800238c <__NVIC_SetPriority>
#endif
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023fa:	f3ef 8305 	mrs	r3, IPSR
 80023fe:	603b      	str	r3, [r7, #0]
  return(result);
 8002400:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002406:	f06f 0305 	mvn.w	r3, #5
 800240a:	607b      	str	r3, [r7, #4]
 800240c:	e00c      	b.n	8002428 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <osKernelInitialize+0x44>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d105      	bne.n	8002422 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002416:	4b08      	ldr	r3, [pc, #32]	; (8002438 <osKernelInitialize+0x44>)
 8002418:	2201      	movs	r2, #1
 800241a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800241c:	2300      	movs	r3, #0
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	e002      	b.n	8002428 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002422:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002426:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	20000090 	.word	0x20000090

0800243c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002442:	f3ef 8305 	mrs	r3, IPSR
 8002446:	603b      	str	r3, [r7, #0]
  return(result);
 8002448:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <osKernelStart+0x1a>
    stat = osErrorISR;
 800244e:	f06f 0305 	mvn.w	r3, #5
 8002452:	607b      	str	r3, [r7, #4]
 8002454:	e010      	b.n	8002478 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002456:	4b0b      	ldr	r3, [pc, #44]	; (8002484 <osKernelStart+0x48>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d109      	bne.n	8002472 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800245e:	f7ff ffbf 	bl	80023e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002462:	4b08      	ldr	r3, [pc, #32]	; (8002484 <osKernelStart+0x48>)
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002468:	f001 f866 	bl	8003538 <vTaskStartScheduler>
      stat = osOK;
 800246c:	2300      	movs	r3, #0
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	e002      	b.n	8002478 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002476:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002478:	687b      	ldr	r3, [r7, #4]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000090 	.word	0x20000090

08002488 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af04      	add	r7, sp, #16
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002494:	2300      	movs	r3, #0
 8002496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002498:	f3ef 8305 	mrs	r3, IPSR
 800249c:	617b      	str	r3, [r7, #20]
  return(result);
 800249e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d17e      	bne.n	80025a2 <osThreadNew+0x11a>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d07b      	beq.n	80025a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80024aa:	2380      	movs	r3, #128	; 0x80
 80024ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80024ae:	2318      	movs	r3, #24
 80024b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d045      	beq.n	800254e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d002      	beq.n	80024d0 <osThreadNew+0x48>
        name = attr->name;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d002      	beq.n	80024de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d008      	beq.n	80024f6 <osThreadNew+0x6e>
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	2b38      	cmp	r3, #56	; 0x38
 80024e8:	d805      	bhi.n	80024f6 <osThreadNew+0x6e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <osThreadNew+0x72>
        return (NULL);
 80024f6:	2300      	movs	r3, #0
 80024f8:	e054      	b.n	80025a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00e      	beq.n	8002530 <osThreadNew+0xa8>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	2b5b      	cmp	r3, #91	; 0x5b
 8002518:	d90a      	bls.n	8002530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800251e:	2b00      	cmp	r3, #0
 8002520:	d006      	beq.n	8002530 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <osThreadNew+0xa8>
        mem = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	61bb      	str	r3, [r7, #24]
 800252e:	e010      	b.n	8002552 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10c      	bne.n	8002552 <osThreadNew+0xca>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d108      	bne.n	8002552 <osThreadNew+0xca>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d104      	bne.n	8002552 <osThreadNew+0xca>
          mem = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	e001      	b.n	8002552 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800254e:	2300      	movs	r3, #0
 8002550:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d110      	bne.n	800257a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002560:	9202      	str	r2, [sp, #8]
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a3a      	ldr	r2, [r7, #32]
 800256c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fe0c 	bl	800318c <xTaskCreateStatic>
 8002574:	4603      	mov	r3, r0
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e013      	b.n	80025a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d110      	bne.n	80025a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	b29a      	uxth	r2, r3
 8002584:	f107 0310 	add.w	r3, r7, #16
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fe57 	bl	8003246 <xTaskCreate>
 8002598:	4603      	mov	r3, r0
 800259a:	2b01      	cmp	r3, #1
 800259c:	d001      	beq.n	80025a2 <osThreadNew+0x11a>
            hTask = NULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80025a2:	693b      	ldr	r3, [r7, #16]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3728      	adds	r7, #40	; 0x28
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b4:	f3ef 8305 	mrs	r3, IPSR
 80025b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80025ba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <osDelay+0x1c>
    stat = osErrorISR;
 80025c0:	f06f 0305 	mvn.w	r3, #5
 80025c4:	60fb      	str	r3, [r7, #12]
 80025c6:	e007      	b.n	80025d8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d002      	beq.n	80025d8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 ff7c 	bl	80034d0 <vTaskDelay>
    }
  }

  return (stat);
 80025d8:	68fb      	ldr	r3, [r7, #12]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80025e4:	b480      	push	{r7}
 80025e6:	b085      	sub	sp, #20
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <vApplicationGetIdleTaskMemory+0x2c>)
 80025f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	4a06      	ldr	r2, [pc, #24]	; (8002614 <vApplicationGetIdleTaskMemory+0x30>)
 80025fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2280      	movs	r2, #128	; 0x80
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000094 	.word	0x20000094
 8002614:	200000f0 	.word	0x200000f0

08002618 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	4a07      	ldr	r2, [pc, #28]	; (8002644 <vApplicationGetTimerTaskMemory+0x2c>)
 8002628:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <vApplicationGetTimerTaskMemory+0x30>)
 800262e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	200002f0 	.word	0x200002f0
 8002648:	2000034c 	.word	0x2000034c

0800264c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f103 0208 	add.w	r2, r3, #8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002664:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f103 0208 	add.w	r2, r3, #8
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f103 0208 	add.w	r2, r3, #8
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002680:	bf00      	nop
 8002682:	370c      	adds	r7, #12
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr

0800268c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	689a      	ldr	r2, [r3, #8]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	1c5a      	adds	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	601a      	str	r2, [r3, #0]
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr

080026ee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80026ee:	b480      	push	{r7}
 80026f0:	b085      	sub	sp, #20
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
 80026f6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002704:	d103      	bne.n	800270e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	e00c      	b.n	8002728 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3308      	adds	r3, #8
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e002      	b.n	800271c <vListInsert+0x2e>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	60fb      	str	r3, [r7, #12]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	429a      	cmp	r2, r3
 8002726:	d2f6      	bcs.n	8002716 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	601a      	str	r2, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6892      	ldr	r2, [r2, #8]
 8002776:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	687a      	ldr	r2, [r7, #4]
 800277e:	6852      	ldr	r2, [r2, #4]
 8002780:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	429a      	cmp	r2, r3
 800278a:	d103      	bne.n	8002794 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	1e5a      	subs	r2, r3, #1
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80027c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027cc:	f383 8811 	msr	BASEPRI, r3
 80027d0:	f3bf 8f6f 	isb	sy
 80027d4:	f3bf 8f4f 	dsb	sy
 80027d8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80027da:	bf00      	nop
 80027dc:	e7fe      	b.n	80027dc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80027de:	f002 f851 	bl	8004884 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ea:	68f9      	ldr	r1, [r7, #12]
 80027ec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80027ee:	fb01 f303 	mul.w	r3, r1, r3
 80027f2:	441a      	add	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800280e:	3b01      	subs	r3, #1
 8002810:	68f9      	ldr	r1, [r7, #12]
 8002812:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002814:	fb01 f303 	mul.w	r3, r1, r3
 8002818:	441a      	add	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d114      	bne.n	800285e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d01a      	beq.n	8002872 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	3310      	adds	r3, #16
 8002840:	4618      	mov	r0, r3
 8002842:	f001 f903 	bl	8003a4c <xTaskRemoveFromEventList>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <xQueueGenericReset+0xcc>)
 800284e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	f3bf 8f4f 	dsb	sy
 8002858:	f3bf 8f6f 	isb	sy
 800285c:	e009      	b.n	8002872 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	3310      	adds	r3, #16
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fef2 	bl	800264c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	3324      	adds	r3, #36	; 0x24
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff feed 	bl	800264c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002872:	f002 f837 	bl	80048e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08e      	sub	sp, #56	; 0x38
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10a      	bne.n	80028ae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800289c:	f383 8811 	msr	BASEPRI, r3
 80028a0:	f3bf 8f6f 	isb	sy
 80028a4:	f3bf 8f4f 	dsb	sy
 80028a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028aa:	bf00      	nop
 80028ac:	e7fe      	b.n	80028ac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d10a      	bne.n	80028ca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80028b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b8:	f383 8811 	msr	BASEPRI, r3
 80028bc:	f3bf 8f6f 	isb	sy
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028c6:	bf00      	nop
 80028c8:	e7fe      	b.n	80028c8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d002      	beq.n	80028d6 <xQueueGenericCreateStatic+0x52>
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <xQueueGenericCreateStatic+0x56>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueGenericCreateStatic+0x58>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10a      	bne.n	80028f6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	623b      	str	r3, [r7, #32]
}
 80028f2:	bf00      	nop
 80028f4:	e7fe      	b.n	80028f4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d102      	bne.n	8002902 <xQueueGenericCreateStatic+0x7e>
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <xQueueGenericCreateStatic+0x82>
 8002902:	2301      	movs	r3, #1
 8002904:	e000      	b.n	8002908 <xQueueGenericCreateStatic+0x84>
 8002906:	2300      	movs	r3, #0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d10a      	bne.n	8002922 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800290c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61fb      	str	r3, [r7, #28]
}
 800291e:	bf00      	nop
 8002920:	e7fe      	b.n	8002920 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002922:	2350      	movs	r3, #80	; 0x50
 8002924:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d00a      	beq.n	8002942 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800292c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002930:	f383 8811 	msr	BASEPRI, r3
 8002934:	f3bf 8f6f 	isb	sy
 8002938:	f3bf 8f4f 	dsb	sy
 800293c:	61bb      	str	r3, [r7, #24]
}
 800293e:	bf00      	nop
 8002940:	e7fe      	b.n	8002940 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002942:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00d      	beq.n	800296a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002956:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4613      	mov	r3, r2
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	68b9      	ldr	r1, [r7, #8]
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 f805 	bl	8002974 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800296c:	4618      	mov	r0, r3
 800296e:	3730      	adds	r7, #48	; 0x30
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}

08002974 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d103      	bne.n	8002990 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	e002      	b.n	8002996 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029a2:	2101      	movs	r1, #1
 80029a4:	69b8      	ldr	r0, [r7, #24]
 80029a6:	f7ff ff05 	bl	80027b4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08e      	sub	sp, #56	; 0x38
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]
 80029c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80029ca:	2300      	movs	r3, #0
 80029cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d10a      	bne.n	80029ee <xQueueGenericSend+0x32>
	__asm volatile
 80029d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029dc:	f383 8811 	msr	BASEPRI, r3
 80029e0:	f3bf 8f6f 	isb	sy
 80029e4:	f3bf 8f4f 	dsb	sy
 80029e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80029ea:	bf00      	nop
 80029ec:	e7fe      	b.n	80029ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <xQueueGenericSend+0x40>
 80029f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d101      	bne.n	8002a00 <xQueueGenericSend+0x44>
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <xQueueGenericSend+0x46>
 8002a00:	2300      	movs	r3, #0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10a      	bne.n	8002a1c <xQueueGenericSend+0x60>
	__asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a18:	bf00      	nop
 8002a1a:	e7fe      	b.n	8002a1a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d103      	bne.n	8002a2a <xQueueGenericSend+0x6e>
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d101      	bne.n	8002a2e <xQueueGenericSend+0x72>
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e000      	b.n	8002a30 <xQueueGenericSend+0x74>
 8002a2e:	2300      	movs	r3, #0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <xQueueGenericSend+0x8e>
	__asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	623b      	str	r3, [r7, #32]
}
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a4a:	f001 f9bd 	bl	8003dc8 <xTaskGetSchedulerState>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d102      	bne.n	8002a5a <xQueueGenericSend+0x9e>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d101      	bne.n	8002a5e <xQueueGenericSend+0xa2>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <xQueueGenericSend+0xa4>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10a      	bne.n	8002a7a <xQueueGenericSend+0xbe>
	__asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	61fb      	str	r3, [r7, #28]
}
 8002a76:	bf00      	nop
 8002a78:	e7fe      	b.n	8002a78 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a7a:	f001 ff03 	bl	8004884 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d302      	bcc.n	8002a90 <xQueueGenericSend+0xd4>
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d129      	bne.n	8002ae4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	68b9      	ldr	r1, [r7, #8]
 8002a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002a96:	f000 fa0b 	bl	8002eb0 <prvCopyDataToQueue>
 8002a9a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d010      	beq.n	8002ac6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	3324      	adds	r3, #36	; 0x24
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 ffcf 	bl	8003a4c <xTaskRemoveFromEventList>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002ab4:	4b3f      	ldr	r3, [pc, #252]	; (8002bb4 <xQueueGenericSend+0x1f8>)
 8002ab6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	e00a      	b.n	8002adc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <xQueueGenericSend+0x1f8>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002adc:	f001 ff02 	bl	80048e4 <vPortExitCritical>
				return pdPASS;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e063      	b.n	8002bac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d103      	bne.n	8002af2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002aea:	f001 fefb 	bl	80048e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e05c      	b.n	8002bac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d106      	bne.n	8002b06 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af8:	f107 0314 	add.w	r3, r7, #20
 8002afc:	4618      	mov	r0, r3
 8002afe:	f001 f809 	bl	8003b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b02:	2301      	movs	r3, #1
 8002b04:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b06:	f001 feed 	bl	80048e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b0a:	f000 fd7b 	bl	8003604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b0e:	f001 feb9 	bl	8004884 <vPortEnterCritical>
 8002b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b18:	b25b      	sxtb	r3, r3
 8002b1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1e:	d103      	bne.n	8002b28 <xQueueGenericSend+0x16c>
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b34:	d103      	bne.n	8002b3e <xQueueGenericSend+0x182>
 8002b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b3e:	f001 fed1 	bl	80048e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b42:	1d3a      	adds	r2, r7, #4
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fff8 	bl	8003b40 <xTaskCheckForTimeOut>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d124      	bne.n	8002ba0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002b56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b58:	f000 faa2 	bl	80030a0 <prvIsQueueFull>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d018      	beq.n	8002b94 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	3310      	adds	r3, #16
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 ff1e 	bl	80039ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b70:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b72:	f000 fa2d 	bl	8002fd0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b76:	f000 fd53 	bl	8003620 <xTaskResumeAll>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f af7c 	bne.w	8002a7a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <xQueueGenericSend+0x1f8>)
 8002b84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b88:	601a      	str	r2, [r3, #0]
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	f3bf 8f6f 	isb	sy
 8002b92:	e772      	b.n	8002a7a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b96:	f000 fa1b 	bl	8002fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b9a:	f000 fd41 	bl	8003620 <xTaskResumeAll>
 8002b9e:	e76c      	b.n	8002a7a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002ba0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ba2:	f000 fa15 	bl	8002fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ba6:	f000 fd3b 	bl	8003620 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002baa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3738      	adds	r7, #56	; 0x38
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	e000ed04 	.word	0xe000ed04

08002bb8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b090      	sub	sp, #64	; 0x40
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
 8002bc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10a      	bne.n	8002be6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002be2:	bf00      	nop
 8002be4:	e7fe      	b.n	8002be4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <xQueueGenericSendFromISR+0x3c>
 8002bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d101      	bne.n	8002bf8 <xQueueGenericSendFromISR+0x40>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <xQueueGenericSendFromISR+0x42>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10a      	bne.n	8002c14 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c10:	bf00      	nop
 8002c12:	e7fe      	b.n	8002c12 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d103      	bne.n	8002c22 <xQueueGenericSendFromISR+0x6a>
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d101      	bne.n	8002c26 <xQueueGenericSendFromISR+0x6e>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e000      	b.n	8002c28 <xQueueGenericSendFromISR+0x70>
 8002c26:	2300      	movs	r3, #0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10a      	bne.n	8002c42 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c30:	f383 8811 	msr	BASEPRI, r3
 8002c34:	f3bf 8f6f 	isb	sy
 8002c38:	f3bf 8f4f 	dsb	sy
 8002c3c:	623b      	str	r3, [r7, #32]
}
 8002c3e:	bf00      	nop
 8002c40:	e7fe      	b.n	8002c40 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c42:	f001 ff01 	bl	8004a48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c46:	f3ef 8211 	mrs	r2, BASEPRI
 8002c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4e:	f383 8811 	msr	BASEPRI, r3
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	f3bf 8f4f 	dsb	sy
 8002c5a:	61fa      	str	r2, [r7, #28]
 8002c5c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c5e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c60:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d302      	bcc.n	8002c74 <xQueueGenericSendFromISR+0xbc>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d12f      	bne.n	8002cd4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002c8a:	f000 f911 	bl	8002eb0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c8e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c96:	d112      	bne.n	8002cbe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	3324      	adds	r3, #36	; 0x24
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 fed1 	bl	8003a4c <xTaskRemoveFromEventList>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d00e      	beq.n	8002cce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00b      	beq.n	8002cce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	601a      	str	r2, [r3, #0]
 8002cbc:	e007      	b.n	8002cce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	b25a      	sxtb	r2, r3
 8002cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002cd2:	e001      	b.n	8002cd8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cda:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002ce2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3740      	adds	r7, #64	; 0x40
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
	...

08002cf0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08c      	sub	sp, #48	; 0x30
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10a      	bne.n	8002d20 <xQueueReceive+0x30>
	__asm volatile
 8002d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d0e:	f383 8811 	msr	BASEPRI, r3
 8002d12:	f3bf 8f6f 	isb	sy
 8002d16:	f3bf 8f4f 	dsb	sy
 8002d1a:	623b      	str	r3, [r7, #32]
}
 8002d1c:	bf00      	nop
 8002d1e:	e7fe      	b.n	8002d1e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d103      	bne.n	8002d2e <xQueueReceive+0x3e>
 8002d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <xQueueReceive+0x42>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <xQueueReceive+0x44>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <xQueueReceive+0x5e>
	__asm volatile
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	f383 8811 	msr	BASEPRI, r3
 8002d40:	f3bf 8f6f 	isb	sy
 8002d44:	f3bf 8f4f 	dsb	sy
 8002d48:	61fb      	str	r3, [r7, #28]
}
 8002d4a:	bf00      	nop
 8002d4c:	e7fe      	b.n	8002d4c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d4e:	f001 f83b 	bl	8003dc8 <xTaskGetSchedulerState>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d102      	bne.n	8002d5e <xQueueReceive+0x6e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <xQueueReceive+0x72>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueReceive+0x74>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <xQueueReceive+0x8e>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	61bb      	str	r3, [r7, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	e7fe      	b.n	8002d7c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d7e:	f001 fd81 	bl	8004884 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01f      	beq.n	8002dce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d92:	f000 f8f7 	bl	8002f84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	1e5a      	subs	r2, r3, #1
 8002d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00f      	beq.n	8002dc6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	3310      	adds	r3, #16
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fe4e 	bl	8003a4c <xTaskRemoveFromEventList>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <xQueueReceive+0x1bc>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002dc6:	f001 fd8d 	bl	80048e4 <vPortExitCritical>
				return pdPASS;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e069      	b.n	8002ea2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d103      	bne.n	8002ddc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002dd4:	f001 fd86 	bl	80048e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	e062      	b.n	8002ea2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d106      	bne.n	8002df0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002de2:	f107 0310 	add.w	r3, r7, #16
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fe94 	bl	8003b14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002dec:	2301      	movs	r3, #1
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002df0:	f001 fd78 	bl	80048e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002df4:	f000 fc06 	bl	8003604 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002df8:	f001 fd44 	bl	8004884 <vPortEnterCritical>
 8002dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dfe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e02:	b25b      	sxtb	r3, r3
 8002e04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e08:	d103      	bne.n	8002e12 <xQueueReceive+0x122>
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e18:	b25b      	sxtb	r3, r3
 8002e1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1e:	d103      	bne.n	8002e28 <xQueueReceive+0x138>
 8002e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e28:	f001 fd5c 	bl	80048e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e2c:	1d3a      	adds	r2, r7, #4
 8002e2e:	f107 0310 	add.w	r3, r7, #16
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f000 fe83 	bl	8003b40 <xTaskCheckForTimeOut>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d123      	bne.n	8002e88 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e42:	f000 f917 	bl	8003074 <prvIsQueueEmpty>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d017      	beq.n	8002e7c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4e:	3324      	adds	r3, #36	; 0x24
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f000 fda9 	bl	80039ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e5c:	f000 f8b8 	bl	8002fd0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e60:	f000 fbde 	bl	8003620 <xTaskResumeAll>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d189      	bne.n	8002d7e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002e6a:	4b10      	ldr	r3, [pc, #64]	; (8002eac <xQueueReceive+0x1bc>)
 8002e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e70:	601a      	str	r2, [r3, #0]
 8002e72:	f3bf 8f4f 	dsb	sy
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	e780      	b.n	8002d7e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e7e:	f000 f8a7 	bl	8002fd0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e82:	f000 fbcd 	bl	8003620 <xTaskResumeAll>
 8002e86:	e77a      	b.n	8002d7e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e8a:	f000 f8a1 	bl	8002fd0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e8e:	f000 fbc7 	bl	8003620 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e94:	f000 f8ee 	bl	8003074 <prvIsQueueEmpty>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f43f af6f 	beq.w	8002d7e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002ea0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3730      	adds	r7, #48	; 0x30
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	e000ed04 	.word	0xe000ed04

08002eb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10d      	bne.n	8002eea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d14d      	bne.n	8002f72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ff92 	bl	8003e04 <xTaskPriorityDisinherit>
 8002ee0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	e043      	b.n	8002f72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d119      	bne.n	8002f24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6858      	ldr	r0, [r3, #4]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	461a      	mov	r2, r3
 8002efa:	68b9      	ldr	r1, [r7, #8]
 8002efc:	f001 fffa 	bl	8004ef4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f08:	441a      	add	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d32b      	bcc.n	8002f72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	e026      	b.n	8002f72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	68d8      	ldr	r0, [r3, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	68b9      	ldr	r1, [r7, #8]
 8002f30:	f001 ffe0 	bl	8004ef4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	425b      	negs	r3, r3
 8002f3e:	441a      	add	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f58:	425b      	negs	r3, r3
 8002f5a:	441a      	add	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d105      	bne.n	8002f72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	3b01      	subs	r3, #1
 8002f70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1c5a      	adds	r2, r3, #1
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f7a:	697b      	ldr	r3, [r7, #20]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3718      	adds	r7, #24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b082      	sub	sp, #8
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d018      	beq.n	8002fc8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	441a      	add	r2, r3
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d303      	bcc.n	8002fb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68d9      	ldr	r1, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	461a      	mov	r2, r3
 8002fc2:	6838      	ldr	r0, [r7, #0]
 8002fc4:	f001 ff96 	bl	8004ef4 <memcpy>
	}
}
 8002fc8:	bf00      	nop
 8002fca:	3708      	adds	r7, #8
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002fd8:	f001 fc54 	bl	8004884 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002fe2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fe4:	e011      	b.n	800300a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d012      	beq.n	8003014 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3324      	adds	r3, #36	; 0x24
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd2a 	bl	8003a4c <xTaskRemoveFromEventList>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002ffe:	f000 fe01 	bl	8003c04 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003002:	7bfb      	ldrb	r3, [r7, #15]
 8003004:	3b01      	subs	r3, #1
 8003006:	b2db      	uxtb	r3, r3
 8003008:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800300a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800300e:	2b00      	cmp	r3, #0
 8003010:	dce9      	bgt.n	8002fe6 <prvUnlockQueue+0x16>
 8003012:	e000      	b.n	8003016 <prvUnlockQueue+0x46>
					break;
 8003014:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	22ff      	movs	r2, #255	; 0xff
 800301a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800301e:	f001 fc61 	bl	80048e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003022:	f001 fc2f 	bl	8004884 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800302c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800302e:	e011      	b.n	8003054 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d012      	beq.n	800305e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3310      	adds	r3, #16
 800303c:	4618      	mov	r0, r3
 800303e:	f000 fd05 	bl	8003a4c <xTaskRemoveFromEventList>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003048:	f000 fddc 	bl	8003c04 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800304c:	7bbb      	ldrb	r3, [r7, #14]
 800304e:	3b01      	subs	r3, #1
 8003050:	b2db      	uxtb	r3, r3
 8003052:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003054:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003058:	2b00      	cmp	r3, #0
 800305a:	dce9      	bgt.n	8003030 <prvUnlockQueue+0x60>
 800305c:	e000      	b.n	8003060 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800305e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003068:	f001 fc3c 	bl	80048e4 <vPortExitCritical>
}
 800306c:	bf00      	nop
 800306e:	3710      	adds	r7, #16
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}

08003074 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800307c:	f001 fc02 	bl	8004884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d102      	bne.n	800308e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003088:	2301      	movs	r3, #1
 800308a:	60fb      	str	r3, [r7, #12]
 800308c:	e001      	b.n	8003092 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003092:	f001 fc27 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 8003096:	68fb      	ldr	r3, [r7, #12]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030a8:	f001 fbec 	bl	8004884 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d102      	bne.n	80030be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	e001      	b.n	80030c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030c2:	f001 fc0f 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	e014      	b.n	800310a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80030e0:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <vQueueAddToRegistry+0x50>)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10b      	bne.n	8003104 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <vQueueAddToRegistry+0x50>)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80030f6:	4a0a      	ldr	r2, [pc, #40]	; (8003120 <vQueueAddToRegistry+0x50>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	00db      	lsls	r3, r3, #3
 80030fc:	4413      	add	r3, r2
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003102:	e006      	b.n	8003112 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	3301      	adds	r3, #1
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b07      	cmp	r3, #7
 800310e:	d9e7      	bls.n	80030e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	2000074c 	.word	0x2000074c

08003124 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b086      	sub	sp, #24
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003134:	f001 fba6 	bl	8004884 <vPortEnterCritical>
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800313e:	b25b      	sxtb	r3, r3
 8003140:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003144:	d103      	bne.n	800314e <vQueueWaitForMessageRestricted+0x2a>
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003154:	b25b      	sxtb	r3, r3
 8003156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800315a:	d103      	bne.n	8003164 <vQueueWaitForMessageRestricted+0x40>
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003164:	f001 fbbe 	bl	80048e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316c:	2b00      	cmp	r3, #0
 800316e:	d106      	bne.n	800317e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	3324      	adds	r3, #36	; 0x24
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	68b9      	ldr	r1, [r7, #8]
 8003178:	4618      	mov	r0, r3
 800317a:	f000 fc3b 	bl	80039f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800317e:	6978      	ldr	r0, [r7, #20]
 8003180:	f7ff ff26 	bl	8002fd0 <prvUnlockQueue>
	}
 8003184:	bf00      	nop
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08e      	sub	sp, #56	; 0x38
 8003190:	af04      	add	r7, sp, #16
 8003192:	60f8      	str	r0, [r7, #12]
 8003194:	60b9      	str	r1, [r7, #8]
 8003196:	607a      	str	r2, [r7, #4]
 8003198:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800319a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10a      	bne.n	80031b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80031a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031a4:	f383 8811 	msr	BASEPRI, r3
 80031a8:	f3bf 8f6f 	isb	sy
 80031ac:	f3bf 8f4f 	dsb	sy
 80031b0:	623b      	str	r3, [r7, #32]
}
 80031b2:	bf00      	nop
 80031b4:	e7fe      	b.n	80031b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80031b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10a      	bne.n	80031d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80031bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031c0:	f383 8811 	msr	BASEPRI, r3
 80031c4:	f3bf 8f6f 	isb	sy
 80031c8:	f3bf 8f4f 	dsb	sy
 80031cc:	61fb      	str	r3, [r7, #28]
}
 80031ce:	bf00      	nop
 80031d0:	e7fe      	b.n	80031d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031d2:	235c      	movs	r3, #92	; 0x5c
 80031d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2b5c      	cmp	r3, #92	; 0x5c
 80031da:	d00a      	beq.n	80031f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80031dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	61bb      	str	r3, [r7, #24]
}
 80031ee:	bf00      	nop
 80031f0:	e7fe      	b.n	80031f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80031f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80031f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01e      	beq.n	8003238 <xTaskCreateStatic+0xac>
 80031fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d01b      	beq.n	8003238 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003202:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003208:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800320a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320c:	2202      	movs	r2, #2
 800320e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003212:	2300      	movs	r3, #0
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	9302      	str	r3, [sp, #8]
 800321a:	f107 0314 	add.w	r3, r7, #20
 800321e:	9301      	str	r3, [sp, #4]
 8003220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003222:	9300      	str	r3, [sp, #0]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	68b9      	ldr	r1, [r7, #8]
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f850 	bl	80032d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003232:	f000 f8dd 	bl	80033f0 <prvAddNewTaskToReadyList>
 8003236:	e001      	b.n	800323c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800323c:	697b      	ldr	r3, [r7, #20]
	}
 800323e:	4618      	mov	r0, r3
 8003240:	3728      	adds	r7, #40	; 0x28
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003246:	b580      	push	{r7, lr}
 8003248:	b08c      	sub	sp, #48	; 0x30
 800324a:	af04      	add	r7, sp, #16
 800324c:	60f8      	str	r0, [r7, #12]
 800324e:	60b9      	str	r1, [r7, #8]
 8003250:	603b      	str	r3, [r7, #0]
 8003252:	4613      	mov	r3, r2
 8003254:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003256:	88fb      	ldrh	r3, [r7, #6]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fc34 	bl	8004ac8 <pvPortMalloc>
 8003260:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00e      	beq.n	8003286 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003268:	205c      	movs	r0, #92	; 0x5c
 800326a:	f001 fc2d 	bl	8004ac8 <pvPortMalloc>
 800326e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	697a      	ldr	r2, [r7, #20]
 800327a:	631a      	str	r2, [r3, #48]	; 0x30
 800327c:	e005      	b.n	800328a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800327e:	6978      	ldr	r0, [r7, #20]
 8003280:	f001 fcee 	bl	8004c60 <vPortFree>
 8003284:	e001      	b.n	800328a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d017      	beq.n	80032c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003298:	88fa      	ldrh	r2, [r7, #6]
 800329a:	2300      	movs	r3, #0
 800329c:	9303      	str	r3, [sp, #12]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a4:	9301      	str	r3, [sp, #4]
 80032a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	68f8      	ldr	r0, [r7, #12]
 80032b0:	f000 f80e 	bl	80032d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032b4:	69f8      	ldr	r0, [r7, #28]
 80032b6:	f000 f89b 	bl	80033f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032ba:	2301      	movs	r3, #1
 80032bc:	61bb      	str	r3, [r7, #24]
 80032be:	e002      	b.n	80032c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032c6:	69bb      	ldr	r3, [r7, #24]
	}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3720      	adds	r7, #32
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
 80032dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	461a      	mov	r2, r3
 80032e8:	21a5      	movs	r1, #165	; 0xa5
 80032ea:	f001 fdd7 	bl	8004e9c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80032f8:	3b01      	subs	r3, #1
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	f023 0307 	bic.w	r3, r3, #7
 8003306:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <prvInitialiseNewTask+0x58>
	__asm volatile
 8003312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003316:	f383 8811 	msr	BASEPRI, r3
 800331a:	f3bf 8f6f 	isb	sy
 800331e:	f3bf 8f4f 	dsb	sy
 8003322:	617b      	str	r3, [r7, #20]
}
 8003324:	bf00      	nop
 8003326:	e7fe      	b.n	8003326 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d01f      	beq.n	800336e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	e012      	b.n	800335a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003334:	68ba      	ldr	r2, [r7, #8]
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	4413      	add	r3, r2
 800333a:	7819      	ldrb	r1, [r3, #0]
 800333c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	4413      	add	r3, r2
 8003342:	3334      	adds	r3, #52	; 0x34
 8003344:	460a      	mov	r2, r1
 8003346:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	4413      	add	r3, r2
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d006      	beq.n	8003362 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	3301      	adds	r3, #1
 8003358:	61fb      	str	r3, [r7, #28]
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2b0f      	cmp	r3, #15
 800335e:	d9e9      	bls.n	8003334 <prvInitialiseNewTask+0x64>
 8003360:	e000      	b.n	8003364 <prvInitialiseNewTask+0x94>
			{
				break;
 8003362:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800336c:	e003      	b.n	8003376 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800336e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	2b37      	cmp	r3, #55	; 0x37
 800337a:	d901      	bls.n	8003380 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800337c:	2337      	movs	r3, #55	; 0x37
 800337e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003382:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003384:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800338a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800338c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338e:	2200      	movs	r2, #0
 8003390:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003394:	3304      	adds	r3, #4
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f978 	bl	800268c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800339c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339e:	3318      	adds	r3, #24
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff f973 	bl	800268c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80033b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033be:	2200      	movs	r2, #0
 80033c0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033ca:	683a      	ldr	r2, [r7, #0]
 80033cc:	68f9      	ldr	r1, [r7, #12]
 80033ce:	69b8      	ldr	r0, [r7, #24]
 80033d0:	f001 f928 	bl	8004624 <pxPortInitialiseStack>
 80033d4:	4602      	mov	r2, r0
 80033d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d002      	beq.n	80033e6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033e6:	bf00      	nop
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
	...

080033f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80033f8:	f001 fa44 	bl	8004884 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80033fc:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <prvAddNewTaskToReadyList+0xc4>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3301      	adds	r3, #1
 8003402:	4a2c      	ldr	r2, [pc, #176]	; (80034b4 <prvAddNewTaskToReadyList+0xc4>)
 8003404:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003406:	4b2c      	ldr	r3, [pc, #176]	; (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800340e:	4a2a      	ldr	r2, [pc, #168]	; (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <prvAddNewTaskToReadyList+0xc4>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d110      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800341c:	f000 fc16 	bl	8003c4c <prvInitialiseTaskLists>
 8003420:	e00d      	b.n	800343e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003422:	4b26      	ldr	r3, [pc, #152]	; (80034bc <prvAddNewTaskToReadyList+0xcc>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d109      	bne.n	800343e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800342a:	4b23      	ldr	r3, [pc, #140]	; (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	429a      	cmp	r2, r3
 8003436:	d802      	bhi.n	800343e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003438:	4a1f      	ldr	r2, [pc, #124]	; (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800343e:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <prvAddNewTaskToReadyList+0xd0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	3301      	adds	r3, #1
 8003444:	4a1e      	ldr	r2, [pc, #120]	; (80034c0 <prvAddNewTaskToReadyList+0xd0>)
 8003446:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <prvAddNewTaskToReadyList+0xd0>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003454:	4b1b      	ldr	r3, [pc, #108]	; (80034c4 <prvAddNewTaskToReadyList+0xd4>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	429a      	cmp	r2, r3
 800345a:	d903      	bls.n	8003464 <prvAddNewTaskToReadyList+0x74>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <prvAddNewTaskToReadyList+0xd4>)
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <prvAddNewTaskToReadyList+0xd8>)
 8003472:	441a      	add	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4619      	mov	r1, r3
 800347a:	4610      	mov	r0, r2
 800347c:	f7ff f913 	bl	80026a6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003480:	f001 fa30 	bl	80048e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003484:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <prvAddNewTaskToReadyList+0xcc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800348c:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvAddNewTaskToReadyList+0xc8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003496:	429a      	cmp	r2, r3
 8003498:	d207      	bcs.n	80034aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800349a:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <prvAddNewTaskToReadyList+0xdc>)
 800349c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f3bf 8f4f 	dsb	sy
 80034a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000c60 	.word	0x20000c60
 80034b8:	2000078c 	.word	0x2000078c
 80034bc:	20000c6c 	.word	0x20000c6c
 80034c0:	20000c7c 	.word	0x20000c7c
 80034c4:	20000c68 	.word	0x20000c68
 80034c8:	20000790 	.word	0x20000790
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d017      	beq.n	8003512 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80034e2:	4b13      	ldr	r3, [pc, #76]	; (8003530 <vTaskDelay+0x60>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <vTaskDelay+0x30>
	__asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	60bb      	str	r3, [r7, #8]
}
 80034fc:	bf00      	nop
 80034fe:	e7fe      	b.n	80034fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003500:	f000 f880 	bl	8003604 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003504:	2100      	movs	r1, #0
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 fcea 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800350c:	f000 f888 	bl	8003620 <xTaskResumeAll>
 8003510:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d107      	bne.n	8003528 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003518:	4b06      	ldr	r3, [pc, #24]	; (8003534 <vTaskDelay+0x64>)
 800351a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800351e:	601a      	str	r2, [r3, #0]
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	20000c88 	.word	0x20000c88
 8003534:	e000ed04 	.word	0xe000ed04

08003538 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800353e:	2300      	movs	r3, #0
 8003540:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003542:	2300      	movs	r3, #0
 8003544:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003546:	463a      	mov	r2, r7
 8003548:	1d39      	adds	r1, r7, #4
 800354a:	f107 0308 	add.w	r3, r7, #8
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f848 	bl	80025e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003554:	6839      	ldr	r1, [r7, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68ba      	ldr	r2, [r7, #8]
 800355a:	9202      	str	r2, [sp, #8]
 800355c:	9301      	str	r3, [sp, #4]
 800355e:	2300      	movs	r3, #0
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2300      	movs	r3, #0
 8003564:	460a      	mov	r2, r1
 8003566:	4921      	ldr	r1, [pc, #132]	; (80035ec <vTaskStartScheduler+0xb4>)
 8003568:	4821      	ldr	r0, [pc, #132]	; (80035f0 <vTaskStartScheduler+0xb8>)
 800356a:	f7ff fe0f 	bl	800318c <xTaskCreateStatic>
 800356e:	4603      	mov	r3, r0
 8003570:	4a20      	ldr	r2, [pc, #128]	; (80035f4 <vTaskStartScheduler+0xbc>)
 8003572:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003574:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <vTaskStartScheduler+0xbc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800357c:	2301      	movs	r3, #1
 800357e:	617b      	str	r3, [r7, #20]
 8003580:	e001      	b.n	8003586 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d102      	bne.n	8003592 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800358c:	f000 fcfc 	bl	8003f88 <xTimerCreateTimerTask>
 8003590:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d116      	bne.n	80035c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	613b      	str	r3, [r7, #16]
}
 80035aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80035ac:	4b12      	ldr	r3, [pc, #72]	; (80035f8 <vTaskStartScheduler+0xc0>)
 80035ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <vTaskStartScheduler+0xc4>)
 80035b6:	2201      	movs	r2, #1
 80035b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035ba:	4b11      	ldr	r3, [pc, #68]	; (8003600 <vTaskStartScheduler+0xc8>)
 80035bc:	2200      	movs	r2, #0
 80035be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80035c0:	f001 f8be 	bl	8004740 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80035c4:	e00e      	b.n	80035e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035cc:	d10a      	bne.n	80035e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	60fb      	str	r3, [r7, #12]
}
 80035e0:	bf00      	nop
 80035e2:	e7fe      	b.n	80035e2 <vTaskStartScheduler+0xaa>
}
 80035e4:	bf00      	nop
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	08004f58 	.word	0x08004f58
 80035f0:	08003c1d 	.word	0x08003c1d
 80035f4:	20000c84 	.word	0x20000c84
 80035f8:	20000c80 	.word	0x20000c80
 80035fc:	20000c6c 	.word	0x20000c6c
 8003600:	20000c64 	.word	0x20000c64

08003604 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003604:	b480      	push	{r7}
 8003606:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <vTaskSuspendAll+0x18>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	3301      	adds	r3, #1
 800360e:	4a03      	ldr	r2, [pc, #12]	; (800361c <vTaskSuspendAll+0x18>)
 8003610:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	20000c88 	.word	0x20000c88

08003620 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800362a:	2300      	movs	r3, #0
 800362c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800362e:	4b42      	ldr	r3, [pc, #264]	; (8003738 <xTaskResumeAll+0x118>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10a      	bne.n	800364c <xTaskResumeAll+0x2c>
	__asm volatile
 8003636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800363a:	f383 8811 	msr	BASEPRI, r3
 800363e:	f3bf 8f6f 	isb	sy
 8003642:	f3bf 8f4f 	dsb	sy
 8003646:	603b      	str	r3, [r7, #0]
}
 8003648:	bf00      	nop
 800364a:	e7fe      	b.n	800364a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800364c:	f001 f91a 	bl	8004884 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003650:	4b39      	ldr	r3, [pc, #228]	; (8003738 <xTaskResumeAll+0x118>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	4a38      	ldr	r2, [pc, #224]	; (8003738 <xTaskResumeAll+0x118>)
 8003658:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800365a:	4b37      	ldr	r3, [pc, #220]	; (8003738 <xTaskResumeAll+0x118>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d162      	bne.n	8003728 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <xTaskResumeAll+0x11c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d05e      	beq.n	8003728 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800366a:	e02f      	b.n	80036cc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366c:	4b34      	ldr	r3, [pc, #208]	; (8003740 <xTaskResumeAll+0x120>)
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	3318      	adds	r3, #24
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff f871 	bl	8002760 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff f86c 	bl	8002760 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	4b2d      	ldr	r3, [pc, #180]	; (8003744 <xTaskResumeAll+0x124>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d903      	bls.n	800369c <xTaskResumeAll+0x7c>
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <xTaskResumeAll+0x124>)
 800369a:	6013      	str	r3, [r2, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a27      	ldr	r2, [pc, #156]	; (8003748 <xTaskResumeAll+0x128>)
 80036aa:	441a      	add	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	3304      	adds	r3, #4
 80036b0:	4619      	mov	r1, r3
 80036b2:	4610      	mov	r0, r2
 80036b4:	f7fe fff7 	bl	80026a6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036bc:	4b23      	ldr	r3, [pc, #140]	; (800374c <xTaskResumeAll+0x12c>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80036c6:	4b22      	ldr	r3, [pc, #136]	; (8003750 <xTaskResumeAll+0x130>)
 80036c8:	2201      	movs	r2, #1
 80036ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036cc:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <xTaskResumeAll+0x120>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1cb      	bne.n	800366c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80036da:	f000 fb55 	bl	8003d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036de:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <xTaskResumeAll+0x134>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d010      	beq.n	800370c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80036ea:	f000 f847 	bl	800377c <xTaskIncrementTick>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80036f4:	4b16      	ldr	r3, [pc, #88]	; (8003750 <xTaskResumeAll+0x130>)
 80036f6:	2201      	movs	r2, #1
 80036f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f1      	bne.n	80036ea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003706:	4b13      	ldr	r3, [pc, #76]	; (8003754 <xTaskResumeAll+0x134>)
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800370c:	4b10      	ldr	r3, [pc, #64]	; (8003750 <xTaskResumeAll+0x130>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d009      	beq.n	8003728 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003714:	2301      	movs	r3, #1
 8003716:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003718:	4b0f      	ldr	r3, [pc, #60]	; (8003758 <xTaskResumeAll+0x138>)
 800371a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	f3bf 8f4f 	dsb	sy
 8003724:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003728:	f001 f8dc 	bl	80048e4 <vPortExitCritical>

	return xAlreadyYielded;
 800372c:	68bb      	ldr	r3, [r7, #8]
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000c88 	.word	0x20000c88
 800373c:	20000c60 	.word	0x20000c60
 8003740:	20000c20 	.word	0x20000c20
 8003744:	20000c68 	.word	0x20000c68
 8003748:	20000790 	.word	0x20000790
 800374c:	2000078c 	.word	0x2000078c
 8003750:	20000c74 	.word	0x20000c74
 8003754:	20000c70 	.word	0x20000c70
 8003758:	e000ed04 	.word	0xe000ed04

0800375c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <xTaskGetTickCount+0x1c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003768:	687b      	ldr	r3, [r7, #4]
}
 800376a:	4618      	mov	r0, r3
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	20000c64 	.word	0x20000c64

0800377c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003782:	2300      	movs	r3, #0
 8003784:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003786:	4b4f      	ldr	r3, [pc, #316]	; (80038c4 <xTaskIncrementTick+0x148>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	f040 808f 	bne.w	80038ae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003790:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <xTaskIncrementTick+0x14c>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3301      	adds	r3, #1
 8003796:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003798:	4a4b      	ldr	r2, [pc, #300]	; (80038c8 <xTaskIncrementTick+0x14c>)
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d120      	bne.n	80037e6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80037a4:	4b49      	ldr	r3, [pc, #292]	; (80038cc <xTaskIncrementTick+0x150>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00a      	beq.n	80037c4 <xTaskIncrementTick+0x48>
	__asm volatile
 80037ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b2:	f383 8811 	msr	BASEPRI, r3
 80037b6:	f3bf 8f6f 	isb	sy
 80037ba:	f3bf 8f4f 	dsb	sy
 80037be:	603b      	str	r3, [r7, #0]
}
 80037c0:	bf00      	nop
 80037c2:	e7fe      	b.n	80037c2 <xTaskIncrementTick+0x46>
 80037c4:	4b41      	ldr	r3, [pc, #260]	; (80038cc <xTaskIncrementTick+0x150>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <xTaskIncrementTick+0x154>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3f      	ldr	r2, [pc, #252]	; (80038cc <xTaskIncrementTick+0x150>)
 80037d0:	6013      	str	r3, [r2, #0]
 80037d2:	4a3f      	ldr	r2, [pc, #252]	; (80038d0 <xTaskIncrementTick+0x154>)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6013      	str	r3, [r2, #0]
 80037d8:	4b3e      	ldr	r3, [pc, #248]	; (80038d4 <xTaskIncrementTick+0x158>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	4a3d      	ldr	r2, [pc, #244]	; (80038d4 <xTaskIncrementTick+0x158>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	f000 fad1 	bl	8003d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80037e6:	4b3c      	ldr	r3, [pc, #240]	; (80038d8 <xTaskIncrementTick+0x15c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d349      	bcc.n	8003884 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037f0:	4b36      	ldr	r3, [pc, #216]	; (80038cc <xTaskIncrementTick+0x150>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d104      	bne.n	8003804 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <xTaskIncrementTick+0x15c>)
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003800:	601a      	str	r2, [r3, #0]
					break;
 8003802:	e03f      	b.n	8003884 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003804:	4b31      	ldr	r3, [pc, #196]	; (80038cc <xTaskIncrementTick+0x150>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	429a      	cmp	r2, r3
 800381a:	d203      	bcs.n	8003824 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800381c:	4a2e      	ldr	r2, [pc, #184]	; (80038d8 <xTaskIncrementTick+0x15c>)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003822:	e02f      	b.n	8003884 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	3304      	adds	r3, #4
 8003828:	4618      	mov	r0, r3
 800382a:	f7fe ff99 	bl	8002760 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	3318      	adds	r3, #24
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe ff90 	bl	8002760 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <xTaskIncrementTick+0x160>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d903      	bls.n	8003854 <xTaskIncrementTick+0xd8>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	4a22      	ldr	r2, [pc, #136]	; (80038dc <xTaskIncrementTick+0x160>)
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <xTaskIncrementTick+0x164>)
 8003862:	441a      	add	r2, r3
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	3304      	adds	r3, #4
 8003868:	4619      	mov	r1, r3
 800386a:	4610      	mov	r0, r2
 800386c:	f7fe ff1b 	bl	80026a6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003874:	4b1b      	ldr	r3, [pc, #108]	; (80038e4 <xTaskIncrementTick+0x168>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d3b8      	bcc.n	80037f0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800387e:	2301      	movs	r3, #1
 8003880:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003882:	e7b5      	b.n	80037f0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003884:	4b17      	ldr	r3, [pc, #92]	; (80038e4 <xTaskIncrementTick+0x168>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	4915      	ldr	r1, [pc, #84]	; (80038e0 <xTaskIncrementTick+0x164>)
 800388c:	4613      	mov	r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	4413      	add	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d901      	bls.n	80038a0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800389c:	2301      	movs	r3, #1
 800389e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <xTaskIncrementTick+0x16c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d007      	beq.n	80038b8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80038a8:	2301      	movs	r3, #1
 80038aa:	617b      	str	r3, [r7, #20]
 80038ac:	e004      	b.n	80038b8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80038ae:	4b0f      	ldr	r3, [pc, #60]	; (80038ec <xTaskIncrementTick+0x170>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3301      	adds	r3, #1
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <xTaskIncrementTick+0x170>)
 80038b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80038b8:	697b      	ldr	r3, [r7, #20]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000c88 	.word	0x20000c88
 80038c8:	20000c64 	.word	0x20000c64
 80038cc:	20000c18 	.word	0x20000c18
 80038d0:	20000c1c 	.word	0x20000c1c
 80038d4:	20000c78 	.word	0x20000c78
 80038d8:	20000c80 	.word	0x20000c80
 80038dc:	20000c68 	.word	0x20000c68
 80038e0:	20000790 	.word	0x20000790
 80038e4:	2000078c 	.word	0x2000078c
 80038e8:	20000c74 	.word	0x20000c74
 80038ec:	20000c70 	.word	0x20000c70

080038f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038f6:	4b28      	ldr	r3, [pc, #160]	; (8003998 <vTaskSwitchContext+0xa8>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80038fe:	4b27      	ldr	r3, [pc, #156]	; (800399c <vTaskSwitchContext+0xac>)
 8003900:	2201      	movs	r2, #1
 8003902:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003904:	e041      	b.n	800398a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <vTaskSwitchContext+0xac>)
 8003908:	2200      	movs	r2, #0
 800390a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800390c:	4b24      	ldr	r3, [pc, #144]	; (80039a0 <vTaskSwitchContext+0xb0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
 8003912:	e010      	b.n	8003936 <vTaskSwitchContext+0x46>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10a      	bne.n	8003930 <vTaskSwitchContext+0x40>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	607b      	str	r3, [r7, #4]
}
 800392c:	bf00      	nop
 800392e:	e7fe      	b.n	800392e <vTaskSwitchContext+0x3e>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3b01      	subs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
 8003936:	491b      	ldr	r1, [pc, #108]	; (80039a4 <vTaskSwitchContext+0xb4>)
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	4613      	mov	r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d0e4      	beq.n	8003914 <vTaskSwitchContext+0x24>
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	4a13      	ldr	r2, [pc, #76]	; (80039a4 <vTaskSwitchContext+0xb4>)
 8003956:	4413      	add	r3, r2
 8003958:	60bb      	str	r3, [r7, #8]
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	3308      	adds	r3, #8
 800396c:	429a      	cmp	r2, r3
 800396e:	d104      	bne.n	800397a <vTaskSwitchContext+0x8a>
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	685a      	ldr	r2, [r3, #4]
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	605a      	str	r2, [r3, #4]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	4a09      	ldr	r2, [pc, #36]	; (80039a8 <vTaskSwitchContext+0xb8>)
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <vTaskSwitchContext+0xb0>)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6013      	str	r3, [r2, #0]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr
 8003996:	bf00      	nop
 8003998:	20000c88 	.word	0x20000c88
 800399c:	20000c74 	.word	0x20000c74
 80039a0:	20000c68 	.word	0x20000c68
 80039a4:	20000790 	.word	0x20000790
 80039a8:	2000078c 	.word	0x2000078c

080039ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10a      	bne.n	80039d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	60fb      	str	r3, [r7, #12]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039d2:	4b07      	ldr	r3, [pc, #28]	; (80039f0 <vTaskPlaceOnEventList+0x44>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	3318      	adds	r3, #24
 80039d8:	4619      	mov	r1, r3
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f7fe fe87 	bl	80026ee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039e0:	2101      	movs	r1, #1
 80039e2:	6838      	ldr	r0, [r7, #0]
 80039e4:	f000 fa7c 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	2000078c 	.word	0x2000078c

080039f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b086      	sub	sp, #24
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	60b9      	str	r1, [r7, #8]
 80039fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10a      	bne.n	8003a1c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0a:	f383 8811 	msr	BASEPRI, r3
 8003a0e:	f3bf 8f6f 	isb	sy
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	617b      	str	r3, [r7, #20]
}
 8003a18:	bf00      	nop
 8003a1a:	e7fe      	b.n	8003a1a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <vTaskPlaceOnEventListRestricted+0x54>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	3318      	adds	r3, #24
 8003a22:	4619      	mov	r1, r3
 8003a24:	68f8      	ldr	r0, [r7, #12]
 8003a26:	f7fe fe3e 	bl	80026a6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003a30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a34:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68b8      	ldr	r0, [r7, #8]
 8003a3a:	f000 fa51 	bl	8003ee0 <prvAddCurrentTaskToDelayedList>
	}
 8003a3e:	bf00      	nop
 8003a40:	3718      	adds	r7, #24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
 8003a46:	bf00      	nop
 8003a48:	2000078c 	.word	0x2000078c

08003a4c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b086      	sub	sp, #24
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	60fb      	str	r3, [r7, #12]
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	3318      	adds	r3, #24
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7fe fe6f 	bl	8002760 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a82:	4b1e      	ldr	r3, [pc, #120]	; (8003afc <xTaskRemoveFromEventList+0xb0>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11d      	bne.n	8003ac6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	3304      	adds	r3, #4
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe fe66 	bl	8002760 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	4b19      	ldr	r3, [pc, #100]	; (8003b00 <xTaskRemoveFromEventList+0xb4>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d903      	bls.n	8003aa8 <xTaskRemoveFromEventList+0x5c>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa4:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <xTaskRemoveFromEventList+0xb4>)
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4a13      	ldr	r2, [pc, #76]	; (8003b04 <xTaskRemoveFromEventList+0xb8>)
 8003ab6:	441a      	add	r2, r3
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	3304      	adds	r3, #4
 8003abc:	4619      	mov	r1, r3
 8003abe:	4610      	mov	r0, r2
 8003ac0:	f7fe fdf1 	bl	80026a6 <vListInsertEnd>
 8003ac4:	e005      	b.n	8003ad2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	4619      	mov	r1, r3
 8003acc:	480e      	ldr	r0, [pc, #56]	; (8003b08 <xTaskRemoveFromEventList+0xbc>)
 8003ace:	f7fe fdea 	bl	80026a6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <xTaskRemoveFromEventList+0xc0>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d905      	bls.n	8003aec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	; (8003b10 <xTaskRemoveFromEventList+0xc4>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]
 8003aea:	e001      	b.n	8003af0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003af0:	697b      	ldr	r3, [r7, #20]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3718      	adds	r7, #24
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	20000c88 	.word	0x20000c88
 8003b00:	20000c68 	.word	0x20000c68
 8003b04:	20000790 	.word	0x20000790
 8003b08:	20000c20 	.word	0x20000c20
 8003b0c:	2000078c 	.word	0x2000078c
 8003b10:	20000c74 	.word	0x20000c74

08003b14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003b1c:	4b06      	ldr	r3, [pc, #24]	; (8003b38 <vTaskInternalSetTimeOutState+0x24>)
 8003b1e:	681a      	ldr	r2, [r3, #0]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <vTaskInternalSetTimeOutState+0x28>)
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	605a      	str	r2, [r3, #4]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000c78 	.word	0x20000c78
 8003b3c:	20000c64 	.word	0x20000c64

08003b40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b088      	sub	sp, #32
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10a      	bne.n	8003b66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b54:	f383 8811 	msr	BASEPRI, r3
 8003b58:	f3bf 8f6f 	isb	sy
 8003b5c:	f3bf 8f4f 	dsb	sy
 8003b60:	613b      	str	r3, [r7, #16]
}
 8003b62:	bf00      	nop
 8003b64:	e7fe      	b.n	8003b64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10a      	bne.n	8003b82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b70:	f383 8811 	msr	BASEPRI, r3
 8003b74:	f3bf 8f6f 	isb	sy
 8003b78:	f3bf 8f4f 	dsb	sy
 8003b7c:	60fb      	str	r3, [r7, #12]
}
 8003b7e:	bf00      	nop
 8003b80:	e7fe      	b.n	8003b80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003b82:	f000 fe7f 	bl	8004884 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003b86:	4b1d      	ldr	r3, [pc, #116]	; (8003bfc <xTaskCheckForTimeOut+0xbc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b9e:	d102      	bne.n	8003ba6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	e023      	b.n	8003bee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	4b15      	ldr	r3, [pc, #84]	; (8003c00 <xTaskCheckForTimeOut+0xc0>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d007      	beq.n	8003bc2 <xTaskCheckForTimeOut+0x82>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d302      	bcc.n	8003bc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e015      	b.n	8003bee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d20b      	bcs.n	8003be4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad2      	subs	r2, r2, r3
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff ff9b 	bl	8003b14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61fb      	str	r3, [r7, #28]
 8003be2:	e004      	b.n	8003bee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	2200      	movs	r2, #0
 8003be8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003bea:	2301      	movs	r3, #1
 8003bec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003bee:	f000 fe79 	bl	80048e4 <vPortExitCritical>

	return xReturn;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3720      	adds	r7, #32
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}
 8003bfc:	20000c64 	.word	0x20000c64
 8003c00:	20000c78 	.word	0x20000c78

08003c04 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <vTaskMissedYield+0x14>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]
}
 8003c0e:	bf00      	nop
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	20000c74 	.word	0x20000c74

08003c1c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003c24:	f000 f852 	bl	8003ccc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <prvIdleTask+0x28>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d9f9      	bls.n	8003c24 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <prvIdleTask+0x2c>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003c40:	e7f0      	b.n	8003c24 <prvIdleTask+0x8>
 8003c42:	bf00      	nop
 8003c44:	20000790 	.word	0x20000790
 8003c48:	e000ed04 	.word	0xe000ed04

08003c4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c52:	2300      	movs	r3, #0
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	e00c      	b.n	8003c72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4a12      	ldr	r2, [pc, #72]	; (8003cac <prvInitialiseTaskLists+0x60>)
 8003c64:	4413      	add	r3, r2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fcf0 	bl	800264c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	3301      	adds	r3, #1
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b37      	cmp	r3, #55	; 0x37
 8003c76:	d9ef      	bls.n	8003c58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003c78:	480d      	ldr	r0, [pc, #52]	; (8003cb0 <prvInitialiseTaskLists+0x64>)
 8003c7a:	f7fe fce7 	bl	800264c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003c7e:	480d      	ldr	r0, [pc, #52]	; (8003cb4 <prvInitialiseTaskLists+0x68>)
 8003c80:	f7fe fce4 	bl	800264c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <prvInitialiseTaskLists+0x6c>)
 8003c86:	f7fe fce1 	bl	800264c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003c8a:	480c      	ldr	r0, [pc, #48]	; (8003cbc <prvInitialiseTaskLists+0x70>)
 8003c8c:	f7fe fcde 	bl	800264c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003c90:	480b      	ldr	r0, [pc, #44]	; (8003cc0 <prvInitialiseTaskLists+0x74>)
 8003c92:	f7fe fcdb 	bl	800264c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003c96:	4b0b      	ldr	r3, [pc, #44]	; (8003cc4 <prvInitialiseTaskLists+0x78>)
 8003c98:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <prvInitialiseTaskLists+0x64>)
 8003c9a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c9c:	4b0a      	ldr	r3, [pc, #40]	; (8003cc8 <prvInitialiseTaskLists+0x7c>)
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <prvInitialiseTaskLists+0x68>)
 8003ca0:	601a      	str	r2, [r3, #0]
}
 8003ca2:	bf00      	nop
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	20000790 	.word	0x20000790
 8003cb0:	20000bf0 	.word	0x20000bf0
 8003cb4:	20000c04 	.word	0x20000c04
 8003cb8:	20000c20 	.word	0x20000c20
 8003cbc:	20000c34 	.word	0x20000c34
 8003cc0:	20000c4c 	.word	0x20000c4c
 8003cc4:	20000c18 	.word	0x20000c18
 8003cc8:	20000c1c 	.word	0x20000c1c

08003ccc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cd2:	e019      	b.n	8003d08 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003cd4:	f000 fdd6 	bl	8004884 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cd8:	4b10      	ldr	r3, [pc, #64]	; (8003d1c <prvCheckTasksWaitingTermination+0x50>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe fd3b 	bl	8002760 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003cea:	4b0d      	ldr	r3, [pc, #52]	; (8003d20 <prvCheckTasksWaitingTermination+0x54>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	; (8003d20 <prvCheckTasksWaitingTermination+0x54>)
 8003cf2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	; (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	; (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003cfc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003cfe:	f000 fdf1 	bl	80048e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f000 f810 	bl	8003d28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003d08:	4b06      	ldr	r3, [pc, #24]	; (8003d24 <prvCheckTasksWaitingTermination+0x58>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e1      	bne.n	8003cd4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000c34 	.word	0x20000c34
 8003d20:	20000c60 	.word	0x20000c60
 8003d24:	20000c48 	.word	0x20000c48

08003d28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d108      	bne.n	8003d4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f000 ff8e 	bl	8004c60 <vPortFree>
				vPortFree( pxTCB );
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 ff8b 	bl	8004c60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003d4a:	e018      	b.n	8003d7e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d103      	bne.n	8003d5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f000 ff82 	bl	8004c60 <vPortFree>
	}
 8003d5c:	e00f      	b.n	8003d7e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d00a      	beq.n	8003d7e <prvDeleteTCB+0x56>
	__asm volatile
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	60fb      	str	r3, [r7, #12]
}
 8003d7a:	bf00      	nop
 8003d7c:	e7fe      	b.n	8003d7c <prvDeleteTCB+0x54>
	}
 8003d7e:	bf00      	nop
 8003d80:	3710      	adds	r7, #16
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
	...

08003d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d8e:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <prvResetNextTaskUnblockTime+0x38>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d104      	bne.n	8003da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003d98:	4b0a      	ldr	r3, [pc, #40]	; (8003dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003d9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003da0:	e008      	b.n	8003db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003da2:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <prvResetNextTaskUnblockTime+0x38>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	4a04      	ldr	r2, [pc, #16]	; (8003dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8003db2:	6013      	str	r3, [r2, #0]
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr
 8003dc0:	20000c18 	.word	0x20000c18
 8003dc4:	20000c80 	.word	0x20000c80

08003dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003dc8:	b480      	push	{r7}
 8003dca:	b083      	sub	sp, #12
 8003dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003dce:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <xTaskGetSchedulerState+0x34>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	607b      	str	r3, [r7, #4]
 8003dda:	e008      	b.n	8003dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ddc:	4b08      	ldr	r3, [pc, #32]	; (8003e00 <xTaskGetSchedulerState+0x38>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d102      	bne.n	8003dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003de4:	2302      	movs	r3, #2
 8003de6:	607b      	str	r3, [r7, #4]
 8003de8:	e001      	b.n	8003dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003dea:	2300      	movs	r3, #0
 8003dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003dee:	687b      	ldr	r3, [r7, #4]
	}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	20000c6c 	.word	0x20000c6c
 8003e00:	20000c88 	.word	0x20000c88

08003e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003e10:	2300      	movs	r3, #0
 8003e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d056      	beq.n	8003ec8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003e1a:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <xTaskPriorityDisinherit+0xd0>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d00a      	beq.n	8003e3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e28:	f383 8811 	msr	BASEPRI, r3
 8003e2c:	f3bf 8f6f 	isb	sy
 8003e30:	f3bf 8f4f 	dsb	sy
 8003e34:	60fb      	str	r3, [r7, #12]
}
 8003e36:	bf00      	nop
 8003e38:	e7fe      	b.n	8003e38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10a      	bne.n	8003e58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e46:	f383 8811 	msr	BASEPRI, r3
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	f3bf 8f4f 	dsb	sy
 8003e52:	60bb      	str	r3, [r7, #8]
}
 8003e54:	bf00      	nop
 8003e56:	e7fe      	b.n	8003e56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	1e5a      	subs	r2, r3, #1
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d02c      	beq.n	8003ec8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d128      	bne.n	8003ec8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc70 	bl	8002760 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <xTaskPriorityDisinherit+0xd4>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d903      	bls.n	8003ea8 <xTaskPriorityDisinherit+0xa4>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea4:	4a0c      	ldr	r2, [pc, #48]	; (8003ed8 <xTaskPriorityDisinherit+0xd4>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eac:	4613      	mov	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4a09      	ldr	r2, [pc, #36]	; (8003edc <xTaskPriorityDisinherit+0xd8>)
 8003eb6:	441a      	add	r2, r3
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f7fe fbf1 	bl	80026a6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003ec8:	697b      	ldr	r3, [r7, #20]
	}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3718      	adds	r7, #24
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	bf00      	nop
 8003ed4:	2000078c 	.word	0x2000078c
 8003ed8:	20000c68 	.word	0x20000c68
 8003edc:	20000790 	.word	0x20000790

08003ee0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003eea:	4b21      	ldr	r3, [pc, #132]	; (8003f70 <prvAddCurrentTaskToDelayedList+0x90>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef0:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	3304      	adds	r3, #4
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fc32 	bl	8002760 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f02:	d10a      	bne.n	8003f1a <prvAddCurrentTaskToDelayedList+0x3a>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d007      	beq.n	8003f1a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f0a:	4b1a      	ldr	r3, [pc, #104]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	3304      	adds	r3, #4
 8003f10:	4619      	mov	r1, r3
 8003f12:	4819      	ldr	r0, [pc, #100]	; (8003f78 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f14:	f7fe fbc7 	bl	80026a6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f18:	e026      	b.n	8003f68 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	4413      	add	r3, r2
 8003f20:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f22:	4b14      	ldr	r3, [pc, #80]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f2a:	68ba      	ldr	r2, [r7, #8]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d209      	bcs.n	8003f46 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	4b0f      	ldr	r3, [pc, #60]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe fbd5 	bl	80026ee <vListInsert>
}
 8003f44:	e010      	b.n	8003f68 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f46:	4b0e      	ldr	r3, [pc, #56]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b0a      	ldr	r3, [pc, #40]	; (8003f74 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	4610      	mov	r0, r2
 8003f54:	f7fe fbcb 	bl	80026ee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d202      	bcs.n	8003f68 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003f62:	4a08      	ldr	r2, [pc, #32]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6013      	str	r3, [r2, #0]
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}
 8003f70:	20000c64 	.word	0x20000c64
 8003f74:	2000078c 	.word	0x2000078c
 8003f78:	20000c4c 	.word	0x20000c4c
 8003f7c:	20000c1c 	.word	0x20000c1c
 8003f80:	20000c18 	.word	0x20000c18
 8003f84:	20000c80 	.word	0x20000c80

08003f88 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b08a      	sub	sp, #40	; 0x28
 8003f8c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f92:	f000 fb07 	bl	80045a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f96:	4b1c      	ldr	r3, [pc, #112]	; (8004008 <xTimerCreateTimerTask+0x80>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d021      	beq.n	8003fe2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003fa6:	1d3a      	adds	r2, r7, #4
 8003fa8:	f107 0108 	add.w	r1, r7, #8
 8003fac:	f107 030c 	add.w	r3, r7, #12
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7fe fb31 	bl	8002618 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003fb6:	6879      	ldr	r1, [r7, #4]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	9202      	str	r2, [sp, #8]
 8003fbe:	9301      	str	r3, [sp, #4]
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	460a      	mov	r2, r1
 8003fc8:	4910      	ldr	r1, [pc, #64]	; (800400c <xTimerCreateTimerTask+0x84>)
 8003fca:	4811      	ldr	r0, [pc, #68]	; (8004010 <xTimerCreateTimerTask+0x88>)
 8003fcc:	f7ff f8de 	bl	800318c <xTaskCreateStatic>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4a10      	ldr	r2, [pc, #64]	; (8004014 <xTimerCreateTimerTask+0x8c>)
 8003fd4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <xTimerCreateTimerTask+0x8c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10a      	bne.n	8003ffe <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fec:	f383 8811 	msr	BASEPRI, r3
 8003ff0:	f3bf 8f6f 	isb	sy
 8003ff4:	f3bf 8f4f 	dsb	sy
 8003ff8:	613b      	str	r3, [r7, #16]
}
 8003ffa:	bf00      	nop
 8003ffc:	e7fe      	b.n	8003ffc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003ffe:	697b      	ldr	r3, [r7, #20]
}
 8004000:	4618      	mov	r0, r3
 8004002:	3718      	adds	r7, #24
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	20000cbc 	.word	0x20000cbc
 800400c:	08004f60 	.word	0x08004f60
 8004010:	0800414d 	.word	0x0800414d
 8004014:	20000cc0 	.word	0x20000cc0

08004018 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08a      	sub	sp, #40	; 0x28
 800401c:	af00      	add	r7, sp, #0
 800401e:	60f8      	str	r0, [r7, #12]
 8004020:	60b9      	str	r1, [r7, #8]
 8004022:	607a      	str	r2, [r7, #4]
 8004024:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004026:	2300      	movs	r3, #0
 8004028:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10a      	bne.n	8004046 <xTimerGenericCommand+0x2e>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	623b      	str	r3, [r7, #32]
}
 8004042:	bf00      	nop
 8004044:	e7fe      	b.n	8004044 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004046:	4b1a      	ldr	r3, [pc, #104]	; (80040b0 <xTimerGenericCommand+0x98>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d02a      	beq.n	80040a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	2b05      	cmp	r3, #5
 800405e:	dc18      	bgt.n	8004092 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004060:	f7ff feb2 	bl	8003dc8 <xTaskGetSchedulerState>
 8004064:	4603      	mov	r3, r0
 8004066:	2b02      	cmp	r3, #2
 8004068:	d109      	bne.n	800407e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800406a:	4b11      	ldr	r3, [pc, #68]	; (80040b0 <xTimerGenericCommand+0x98>)
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	f107 0110 	add.w	r1, r7, #16
 8004072:	2300      	movs	r3, #0
 8004074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004076:	f7fe fca1 	bl	80029bc <xQueueGenericSend>
 800407a:	6278      	str	r0, [r7, #36]	; 0x24
 800407c:	e012      	b.n	80040a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800407e:	4b0c      	ldr	r3, [pc, #48]	; (80040b0 <xTimerGenericCommand+0x98>)
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	f107 0110 	add.w	r1, r7, #16
 8004086:	2300      	movs	r3, #0
 8004088:	2200      	movs	r2, #0
 800408a:	f7fe fc97 	bl	80029bc <xQueueGenericSend>
 800408e:	6278      	str	r0, [r7, #36]	; 0x24
 8004090:	e008      	b.n	80040a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <xTimerGenericCommand+0x98>)
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	f107 0110 	add.w	r1, r7, #16
 800409a:	2300      	movs	r3, #0
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	f7fe fd8b 	bl	8002bb8 <xQueueGenericSendFromISR>
 80040a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3728      	adds	r7, #40	; 0x28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	20000cbc 	.word	0x20000cbc

080040b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b088      	sub	sp, #32
 80040b8:	af02      	add	r7, sp, #8
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <prvProcessExpiredTimer+0x94>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	3304      	adds	r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f7fe fb47 	bl	8002760 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040d2:	697b      	ldr	r3, [r7, #20]
 80040d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d022      	beq.n	8004126 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	699a      	ldr	r2, [r3, #24]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	18d1      	adds	r1, r2, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	6978      	ldr	r0, [r7, #20]
 80040ee:	f000 f8d1 	bl	8004294 <prvInsertTimerInActiveList>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01f      	beq.n	8004138 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040f8:	2300      	movs	r3, #0
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	2300      	movs	r3, #0
 80040fe:	687a      	ldr	r2, [r7, #4]
 8004100:	2100      	movs	r1, #0
 8004102:	6978      	ldr	r0, [r7, #20]
 8004104:	f7ff ff88 	bl	8004018 <xTimerGenericCommand>
 8004108:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d113      	bne.n	8004138 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004114:	f383 8811 	msr	BASEPRI, r3
 8004118:	f3bf 8f6f 	isb	sy
 800411c:	f3bf 8f4f 	dsb	sy
 8004120:	60fb      	str	r3, [r7, #12]
}
 8004122:	bf00      	nop
 8004124:	e7fe      	b.n	8004124 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	b2da      	uxtb	r2, r3
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	4798      	blx	r3
}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	20000cb4 	.word	0x20000cb4

0800414c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004154:	f107 0308 	add.w	r3, r7, #8
 8004158:	4618      	mov	r0, r3
 800415a:	f000 f857 	bl	800420c <prvGetNextExpireTime>
 800415e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	4619      	mov	r1, r3
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f803 	bl	8004170 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800416a:	f000 f8d5 	bl	8004318 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800416e:	e7f1      	b.n	8004154 <prvTimerTask+0x8>

08004170 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
 8004178:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800417a:	f7ff fa43 	bl	8003604 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800417e:	f107 0308 	add.w	r3, r7, #8
 8004182:	4618      	mov	r0, r3
 8004184:	f000 f866 	bl	8004254 <prvSampleTimeNow>
 8004188:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d130      	bne.n	80041f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d10a      	bne.n	80041ac <prvProcessTimerOrBlockTask+0x3c>
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	429a      	cmp	r2, r3
 800419c:	d806      	bhi.n	80041ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800419e:	f7ff fa3f 	bl	8003620 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ff85 	bl	80040b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80041aa:	e024      	b.n	80041f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d008      	beq.n	80041c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <prvProcessTimerOrBlockTask+0x90>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d101      	bne.n	80041c0 <prvProcessTimerOrBlockTask+0x50>
 80041bc:	2301      	movs	r3, #1
 80041be:	e000      	b.n	80041c2 <prvProcessTimerOrBlockTask+0x52>
 80041c0:	2300      	movs	r3, #0
 80041c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80041c4:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <prvProcessTimerOrBlockTask+0x94>)
 80041c6:	6818      	ldr	r0, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	4619      	mov	r1, r3
 80041d2:	f7fe ffa7 	bl	8003124 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80041d6:	f7ff fa23 	bl	8003620 <xTaskResumeAll>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10a      	bne.n	80041f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80041e0:	4b09      	ldr	r3, [pc, #36]	; (8004208 <prvProcessTimerOrBlockTask+0x98>)
 80041e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	f3bf 8f6f 	isb	sy
}
 80041f0:	e001      	b.n	80041f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80041f2:	f7ff fa15 	bl	8003620 <xTaskResumeAll>
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	20000cb8 	.word	0x20000cb8
 8004204:	20000cbc 	.word	0x20000cbc
 8004208:	e000ed04 	.word	0xe000ed04

0800420c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800420c:	b480      	push	{r7}
 800420e:	b085      	sub	sp, #20
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <prvGetNextExpireTime+0x44>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <prvGetNextExpireTime+0x16>
 800421e:	2201      	movs	r2, #1
 8004220:	e000      	b.n	8004224 <prvGetNextExpireTime+0x18>
 8004222:	2200      	movs	r2, #0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d105      	bne.n	800423c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004230:	4b07      	ldr	r3, [pc, #28]	; (8004250 <prvGetNextExpireTime+0x44>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e001      	b.n	8004240 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004240:	68fb      	ldr	r3, [r7, #12]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000cb4 	.word	0x20000cb4

08004254 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800425c:	f7ff fa7e 	bl	800375c <xTaskGetTickCount>
 8004260:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004262:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <prvSampleTimeNow+0x3c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	429a      	cmp	r2, r3
 800426a:	d205      	bcs.n	8004278 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800426c:	f000 f936 	bl	80044dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]
 8004276:	e002      	b.n	800427e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800427e:	4a04      	ldr	r2, [pc, #16]	; (8004290 <prvSampleTimeNow+0x3c>)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004284:	68fb      	ldr	r3, [r7, #12]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3710      	adds	r7, #16
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000cc4 	.word	0x20000cc4

08004294 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80042a2:	2300      	movs	r3, #0
 80042a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80042b2:	68ba      	ldr	r2, [r7, #8]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d812      	bhi.n	80042e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	1ad2      	subs	r2, r2, r3
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d302      	bcc.n	80042ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80042c8:	2301      	movs	r3, #1
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	e01b      	b.n	8004306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80042ce:	4b10      	ldr	r3, [pc, #64]	; (8004310 <prvInsertTimerInActiveList+0x7c>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	3304      	adds	r3, #4
 80042d6:	4619      	mov	r1, r3
 80042d8:	4610      	mov	r0, r2
 80042da:	f7fe fa08 	bl	80026ee <vListInsert>
 80042de:	e012      	b.n	8004306 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d206      	bcs.n	80042f6 <prvInsertTimerInActiveList+0x62>
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d302      	bcc.n	80042f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80042f0:	2301      	movs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
 80042f4:	e007      	b.n	8004306 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042f6:	4b07      	ldr	r3, [pc, #28]	; (8004314 <prvInsertTimerInActiveList+0x80>)
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	3304      	adds	r3, #4
 80042fe:	4619      	mov	r1, r3
 8004300:	4610      	mov	r0, r2
 8004302:	f7fe f9f4 	bl	80026ee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004306:	697b      	ldr	r3, [r7, #20]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20000cb8 	.word	0x20000cb8
 8004314:	20000cb4 	.word	0x20000cb4

08004318 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08e      	sub	sp, #56	; 0x38
 800431c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800431e:	e0ca      	b.n	80044b6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2b00      	cmp	r3, #0
 8004324:	da18      	bge.n	8004358 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004326:	1d3b      	adds	r3, r7, #4
 8004328:	3304      	adds	r3, #4
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	2b00      	cmp	r3, #0
 8004330:	d10a      	bne.n	8004348 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	61fb      	str	r3, [r7, #28]
}
 8004344:	bf00      	nop
 8004346:	e7fe      	b.n	8004346 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800434e:	6850      	ldr	r0, [r2, #4]
 8004350:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004352:	6892      	ldr	r2, [r2, #8]
 8004354:	4611      	mov	r1, r2
 8004356:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	f2c0 80ab 	blt.w	80044b6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d004      	beq.n	8004376 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800436c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436e:	3304      	adds	r3, #4
 8004370:	4618      	mov	r0, r3
 8004372:	f7fe f9f5 	bl	8002760 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004376:	463b      	mov	r3, r7
 8004378:	4618      	mov	r0, r3
 800437a:	f7ff ff6b 	bl	8004254 <prvSampleTimeNow>
 800437e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b09      	cmp	r3, #9
 8004384:	f200 8096 	bhi.w	80044b4 <prvProcessReceivedCommands+0x19c>
 8004388:	a201      	add	r2, pc, #4	; (adr r2, 8004390 <prvProcessReceivedCommands+0x78>)
 800438a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800438e:	bf00      	nop
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043b9 	.word	0x080043b9
 8004398:	080043b9 	.word	0x080043b9
 800439c:	0800442d 	.word	0x0800442d
 80043a0:	08004441 	.word	0x08004441
 80043a4:	0800448b 	.word	0x0800448b
 80043a8:	080043b9 	.word	0x080043b9
 80043ac:	080043b9 	.word	0x080043b9
 80043b0:	0800442d 	.word	0x0800442d
 80043b4:	08004441 	.word	0x08004441
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043be:	f043 0301 	orr.w	r3, r3, #1
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	18d1      	adds	r1, r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d8:	f7ff ff5c 	bl	8004294 <prvInsertTimerInActiveList>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d069      	beq.n	80044b6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80043ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d05e      	beq.n	80044b6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80043f8:	68ba      	ldr	r2, [r7, #8]
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	441a      	add	r2, r3
 8004400:	2300      	movs	r3, #0
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	2300      	movs	r3, #0
 8004406:	2100      	movs	r1, #0
 8004408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800440a:	f7ff fe05 	bl	8004018 <xTimerGenericCommand>
 800440e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d14f      	bne.n	80044b6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800441a:	f383 8811 	msr	BASEPRI, r3
 800441e:	f3bf 8f6f 	isb	sy
 8004422:	f3bf 8f4f 	dsb	sy
 8004426:	61bb      	str	r3, [r7, #24]
}
 8004428:	bf00      	nop
 800442a:	e7fe      	b.n	800442a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800442c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	b2da      	uxtb	r2, r3
 8004438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800443a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800443e:	e03a      	b.n	80044b6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004446:	f043 0301 	orr.w	r3, r3, #1
 800444a:	b2da      	uxtb	r2, r3
 800444c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800444e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004456:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	617b      	str	r3, [r7, #20]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	699a      	ldr	r2, [r3, #24]
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	18d1      	adds	r1, r2, r3
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004484:	f7ff ff06 	bl	8004294 <prvInsertTimerInActiveList>
					break;
 8004488:	e015      	b.n	80044b6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004490:	f003 0302 	and.w	r3, r3, #2
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800449a:	f000 fbe1 	bl	8004c60 <vPortFree>
 800449e:	e00a      	b.n	80044b6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a6:	f023 0301 	bic.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80044b2:	e000      	b.n	80044b6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80044b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044b6:	4b08      	ldr	r3, [pc, #32]	; (80044d8 <prvProcessReceivedCommands+0x1c0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	1d39      	adds	r1, r7, #4
 80044bc:	2200      	movs	r2, #0
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe fc16 	bl	8002cf0 <xQueueReceive>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f47f af2a 	bne.w	8004320 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	3730      	adds	r7, #48	; 0x30
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	20000cbc 	.word	0x20000cbc

080044dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044e2:	e048      	b.n	8004576 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80044e4:	4b2d      	ldr	r3, [pc, #180]	; (800459c <prvSwitchTimerLists+0xc0>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <prvSwitchTimerLists+0xc0>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	3304      	adds	r3, #4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fe f92f 	bl	8002760 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a1b      	ldr	r3, [r3, #32]
 8004506:	68f8      	ldr	r0, [r7, #12]
 8004508:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d02e      	beq.n	8004576 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	429a      	cmp	r2, r3
 8004528:	d90e      	bls.n	8004548 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004536:	4b19      	ldr	r3, [pc, #100]	; (800459c <prvSwitchTimerLists+0xc0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	3304      	adds	r3, #4
 800453e:	4619      	mov	r1, r3
 8004540:	4610      	mov	r0, r2
 8004542:	f7fe f8d4 	bl	80026ee <vListInsert>
 8004546:	e016      	b.n	8004576 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004548:	2300      	movs	r3, #0
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	2300      	movs	r3, #0
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	2100      	movs	r1, #0
 8004552:	68f8      	ldr	r0, [r7, #12]
 8004554:	f7ff fd60 	bl	8004018 <xTimerGenericCommand>
 8004558:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d10a      	bne.n	8004576 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004564:	f383 8811 	msr	BASEPRI, r3
 8004568:	f3bf 8f6f 	isb	sy
 800456c:	f3bf 8f4f 	dsb	sy
 8004570:	603b      	str	r3, [r7, #0]
}
 8004572:	bf00      	nop
 8004574:	e7fe      	b.n	8004574 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004576:	4b09      	ldr	r3, [pc, #36]	; (800459c <prvSwitchTimerLists+0xc0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1b1      	bne.n	80044e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <prvSwitchTimerLists+0xc0>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004586:	4b06      	ldr	r3, [pc, #24]	; (80045a0 <prvSwitchTimerLists+0xc4>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a04      	ldr	r2, [pc, #16]	; (800459c <prvSwitchTimerLists+0xc0>)
 800458c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800458e:	4a04      	ldr	r2, [pc, #16]	; (80045a0 <prvSwitchTimerLists+0xc4>)
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	6013      	str	r3, [r2, #0]
}
 8004594:	bf00      	nop
 8004596:	3718      	adds	r7, #24
 8004598:	46bd      	mov	sp, r7
 800459a:	bd80      	pop	{r7, pc}
 800459c:	20000cb4 	.word	0x20000cb4
 80045a0:	20000cb8 	.word	0x20000cb8

080045a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80045aa:	f000 f96b 	bl	8004884 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80045ae:	4b15      	ldr	r3, [pc, #84]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d120      	bne.n	80045f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80045b6:	4814      	ldr	r0, [pc, #80]	; (8004608 <prvCheckForValidListAndQueue+0x64>)
 80045b8:	f7fe f848 	bl	800264c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80045bc:	4813      	ldr	r0, [pc, #76]	; (800460c <prvCheckForValidListAndQueue+0x68>)
 80045be:	f7fe f845 	bl	800264c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80045c2:	4b13      	ldr	r3, [pc, #76]	; (8004610 <prvCheckForValidListAndQueue+0x6c>)
 80045c4:	4a10      	ldr	r2, [pc, #64]	; (8004608 <prvCheckForValidListAndQueue+0x64>)
 80045c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80045c8:	4b12      	ldr	r3, [pc, #72]	; (8004614 <prvCheckForValidListAndQueue+0x70>)
 80045ca:	4a10      	ldr	r2, [pc, #64]	; (800460c <prvCheckForValidListAndQueue+0x68>)
 80045cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80045ce:	2300      	movs	r3, #0
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4b11      	ldr	r3, [pc, #68]	; (8004618 <prvCheckForValidListAndQueue+0x74>)
 80045d4:	4a11      	ldr	r2, [pc, #68]	; (800461c <prvCheckForValidListAndQueue+0x78>)
 80045d6:	2110      	movs	r1, #16
 80045d8:	200a      	movs	r0, #10
 80045da:	f7fe f953 	bl	8002884 <xQueueGenericCreateStatic>
 80045de:	4603      	mov	r3, r0
 80045e0:	4a08      	ldr	r2, [pc, #32]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80045ec:	4b05      	ldr	r3, [pc, #20]	; (8004604 <prvCheckForValidListAndQueue+0x60>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	490b      	ldr	r1, [pc, #44]	; (8004620 <prvCheckForValidListAndQueue+0x7c>)
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fe fd6c 	bl	80030d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f8:	f000 f974 	bl	80048e4 <vPortExitCritical>
}
 80045fc:	bf00      	nop
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20000cbc 	.word	0x20000cbc
 8004608:	20000c8c 	.word	0x20000c8c
 800460c:	20000ca0 	.word	0x20000ca0
 8004610:	20000cb4 	.word	0x20000cb4
 8004614:	20000cb8 	.word	0x20000cb8
 8004618:	20000d68 	.word	0x20000d68
 800461c:	20000cc8 	.word	0x20000cc8
 8004620:	08004f68 	.word	0x08004f68

08004624 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	3b04      	subs	r3, #4
 8004634:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800463c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3b04      	subs	r3, #4
 8004642:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f023 0201 	bic.w	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b04      	subs	r3, #4
 8004652:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004654:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <pxPortInitialiseStack+0x64>)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	3b14      	subs	r3, #20
 800465e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	3b04      	subs	r3, #4
 800466a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f06f 0202 	mvn.w	r2, #2
 8004672:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	3b20      	subs	r3, #32
 8004678:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr
 8004688:	0800468d 	.word	0x0800468d

0800468c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <prvTaskExitError+0x54>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469e:	d00a      	beq.n	80046b6 <prvTaskExitError+0x2a>
	__asm volatile
 80046a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a4:	f383 8811 	msr	BASEPRI, r3
 80046a8:	f3bf 8f6f 	isb	sy
 80046ac:	f3bf 8f4f 	dsb	sy
 80046b0:	60fb      	str	r3, [r7, #12]
}
 80046b2:	bf00      	nop
 80046b4:	e7fe      	b.n	80046b4 <prvTaskExitError+0x28>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
}
 80046c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046ca:	bf00      	nop
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0fc      	beq.n	80046cc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046d2:	bf00      	nop
 80046d4:	bf00      	nop
 80046d6:	3714      	adds	r7, #20
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	2000000c 	.word	0x2000000c
	...

080046f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80046f0:	4b07      	ldr	r3, [pc, #28]	; (8004710 <pxCurrentTCBConst2>)
 80046f2:	6819      	ldr	r1, [r3, #0]
 80046f4:	6808      	ldr	r0, [r1, #0]
 80046f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046fa:	f380 8809 	msr	PSP, r0
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f380 8811 	msr	BASEPRI, r0
 800470a:	4770      	bx	lr
 800470c:	f3af 8000 	nop.w

08004710 <pxCurrentTCBConst2>:
 8004710:	2000078c 	.word	0x2000078c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004714:	bf00      	nop
 8004716:	bf00      	nop

08004718 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004718:	4808      	ldr	r0, [pc, #32]	; (800473c <prvPortStartFirstTask+0x24>)
 800471a:	6800      	ldr	r0, [r0, #0]
 800471c:	6800      	ldr	r0, [r0, #0]
 800471e:	f380 8808 	msr	MSP, r0
 8004722:	f04f 0000 	mov.w	r0, #0
 8004726:	f380 8814 	msr	CONTROL, r0
 800472a:	b662      	cpsie	i
 800472c:	b661      	cpsie	f
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	df00      	svc	0
 8004738:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800473a:	bf00      	nop
 800473c:	e000ed08 	.word	0xe000ed08

08004740 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004746:	4b46      	ldr	r3, [pc, #280]	; (8004860 <xPortStartScheduler+0x120>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a46      	ldr	r2, [pc, #280]	; (8004864 <xPortStartScheduler+0x124>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d10a      	bne.n	8004766 <xPortStartScheduler+0x26>
	__asm volatile
 8004750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004754:	f383 8811 	msr	BASEPRI, r3
 8004758:	f3bf 8f6f 	isb	sy
 800475c:	f3bf 8f4f 	dsb	sy
 8004760:	613b      	str	r3, [r7, #16]
}
 8004762:	bf00      	nop
 8004764:	e7fe      	b.n	8004764 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004766:	4b3e      	ldr	r3, [pc, #248]	; (8004860 <xPortStartScheduler+0x120>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a3f      	ldr	r2, [pc, #252]	; (8004868 <xPortStartScheduler+0x128>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d10a      	bne.n	8004786 <xPortStartScheduler+0x46>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	60fb      	str	r3, [r7, #12]
}
 8004782:	bf00      	nop
 8004784:	e7fe      	b.n	8004784 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004786:	4b39      	ldr	r3, [pc, #228]	; (800486c <xPortStartScheduler+0x12c>)
 8004788:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	b2db      	uxtb	r3, r3
 8004790:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	22ff      	movs	r2, #255	; 0xff
 8004796:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047a0:	78fb      	ldrb	r3, [r7, #3]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047a8:	b2da      	uxtb	r2, r3
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <xPortStartScheduler+0x130>)
 80047ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047ae:	4b31      	ldr	r3, [pc, #196]	; (8004874 <xPortStartScheduler+0x134>)
 80047b0:	2207      	movs	r2, #7
 80047b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047b4:	e009      	b.n	80047ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80047b6:	4b2f      	ldr	r3, [pc, #188]	; (8004874 <xPortStartScheduler+0x134>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3b01      	subs	r3, #1
 80047bc:	4a2d      	ldr	r2, [pc, #180]	; (8004874 <xPortStartScheduler+0x134>)
 80047be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047c0:	78fb      	ldrb	r3, [r7, #3]
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	005b      	lsls	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047ca:	78fb      	ldrb	r3, [r7, #3]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047d2:	2b80      	cmp	r3, #128	; 0x80
 80047d4:	d0ef      	beq.n	80047b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047d6:	4b27      	ldr	r3, [pc, #156]	; (8004874 <xPortStartScheduler+0x134>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f1c3 0307 	rsb	r3, r3, #7
 80047de:	2b04      	cmp	r3, #4
 80047e0:	d00a      	beq.n	80047f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80047e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e6:	f383 8811 	msr	BASEPRI, r3
 80047ea:	f3bf 8f6f 	isb	sy
 80047ee:	f3bf 8f4f 	dsb	sy
 80047f2:	60bb      	str	r3, [r7, #8]
}
 80047f4:	bf00      	nop
 80047f6:	e7fe      	b.n	80047f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047f8:	4b1e      	ldr	r3, [pc, #120]	; (8004874 <xPortStartScheduler+0x134>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	4a1d      	ldr	r2, [pc, #116]	; (8004874 <xPortStartScheduler+0x134>)
 8004800:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004802:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <xPortStartScheduler+0x134>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800480a:	4a1a      	ldr	r2, [pc, #104]	; (8004874 <xPortStartScheduler+0x134>)
 800480c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	b2da      	uxtb	r2, r3
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004816:	4b18      	ldr	r3, [pc, #96]	; (8004878 <xPortStartScheduler+0x138>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	; (8004878 <xPortStartScheduler+0x138>)
 800481c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004820:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <xPortStartScheduler+0x138>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <xPortStartScheduler+0x138>)
 8004828:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800482c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800482e:	f000 f8dd 	bl	80049ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <xPortStartScheduler+0x13c>)
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004838:	f000 f8fc 	bl	8004a34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800483c:	4b10      	ldr	r3, [pc, #64]	; (8004880 <xPortStartScheduler+0x140>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a0f      	ldr	r2, [pc, #60]	; (8004880 <xPortStartScheduler+0x140>)
 8004842:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004846:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004848:	f7ff ff66 	bl	8004718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800484c:	f7ff f850 	bl	80038f0 <vTaskSwitchContext>
	prvTaskExitError();
 8004850:	f7ff ff1c 	bl	800468c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	e000ed00 	.word	0xe000ed00
 8004864:	410fc271 	.word	0x410fc271
 8004868:	410fc270 	.word	0x410fc270
 800486c:	e000e400 	.word	0xe000e400
 8004870:	20000db8 	.word	0x20000db8
 8004874:	20000dbc 	.word	0x20000dbc
 8004878:	e000ed20 	.word	0xe000ed20
 800487c:	2000000c 	.word	0x2000000c
 8004880:	e000ef34 	.word	0xe000ef34

08004884 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
	__asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	607b      	str	r3, [r7, #4]
}
 800489c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800489e:	4b0f      	ldr	r3, [pc, #60]	; (80048dc <vPortEnterCritical+0x58>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	3301      	adds	r3, #1
 80048a4:	4a0d      	ldr	r2, [pc, #52]	; (80048dc <vPortEnterCritical+0x58>)
 80048a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048a8:	4b0c      	ldr	r3, [pc, #48]	; (80048dc <vPortEnterCritical+0x58>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d10f      	bne.n	80048d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048b0:	4b0b      	ldr	r3, [pc, #44]	; (80048e0 <vPortEnterCritical+0x5c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	603b      	str	r3, [r7, #0]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <vPortEnterCritical+0x4a>
	}
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr
 80048dc:	2000000c 	.word	0x2000000c
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80048ea:	4b12      	ldr	r3, [pc, #72]	; (8004934 <vPortExitCritical+0x50>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10a      	bne.n	8004908 <vPortExitCritical+0x24>
	__asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
}
 8004904:	bf00      	nop
 8004906:	e7fe      	b.n	8004906 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <vPortExitCritical+0x50>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3b01      	subs	r3, #1
 800490e:	4a09      	ldr	r2, [pc, #36]	; (8004934 <vPortExitCritical+0x50>)
 8004910:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <vPortExitCritical+0x50>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d105      	bne.n	8004926 <vPortExitCritical+0x42>
 800491a:	2300      	movs	r3, #0
 800491c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f383 8811 	msr	BASEPRI, r3
}
 8004924:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	2000000c 	.word	0x2000000c
	...

08004940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004940:	f3ef 8009 	mrs	r0, PSP
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	4b15      	ldr	r3, [pc, #84]	; (80049a0 <pxCurrentTCBConst>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	f01e 0f10 	tst.w	lr, #16
 8004950:	bf08      	it	eq
 8004952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	6010      	str	r0, [r2, #0]
 800495c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004964:	f380 8811 	msr	BASEPRI, r0
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f7fe ffbe 	bl	80038f0 <vTaskSwitchContext>
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f380 8811 	msr	BASEPRI, r0
 800497c:	bc09      	pop	{r0, r3}
 800497e:	6819      	ldr	r1, [r3, #0]
 8004980:	6808      	ldr	r0, [r1, #0]
 8004982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004986:	f01e 0f10 	tst.w	lr, #16
 800498a:	bf08      	it	eq
 800498c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004990:	f380 8809 	msr	PSP, r0
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4770      	bx	lr
 800499a:	bf00      	nop
 800499c:	f3af 8000 	nop.w

080049a0 <pxCurrentTCBConst>:
 80049a0:	2000078c 	.word	0x2000078c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
}
 80049c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049c2:	f7fe fedb 	bl	800377c <xTaskIncrementTick>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <xPortSysTickHandler+0x40>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	2300      	movs	r3, #0
 80049d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	f383 8811 	msr	BASEPRI, r3
}
 80049de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80049e0:	bf00      	nop
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	e000ed04 	.word	0xe000ed04

080049ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049f0:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <vPortSetupTimerInterrupt+0x34>)
 80049f2:	2200      	movs	r2, #0
 80049f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049f6:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <vPortSetupTimerInterrupt+0x38>)
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049fc:	4b0a      	ldr	r3, [pc, #40]	; (8004a28 <vPortSetupTimerInterrupt+0x3c>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a0a      	ldr	r2, [pc, #40]	; (8004a2c <vPortSetupTimerInterrupt+0x40>)
 8004a02:	fba2 2303 	umull	r2, r3, r2, r3
 8004a06:	099b      	lsrs	r3, r3, #6
 8004a08:	4a09      	ldr	r2, [pc, #36]	; (8004a30 <vPortSetupTimerInterrupt+0x44>)
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a0e:	4b04      	ldr	r3, [pc, #16]	; (8004a20 <vPortSetupTimerInterrupt+0x34>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
}
 8004a14:	bf00      	nop
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	e000e010 	.word	0xe000e010
 8004a24:	e000e018 	.word	0xe000e018
 8004a28:	20000000 	.word	0x20000000
 8004a2c:	10624dd3 	.word	0x10624dd3
 8004a30:	e000e014 	.word	0xe000e014

08004a34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a44 <vPortEnableVFP+0x10>
 8004a38:	6801      	ldr	r1, [r0, #0]
 8004a3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a3e:	6001      	str	r1, [r0, #0]
 8004a40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a42:	bf00      	nop
 8004a44:	e000ed88 	.word	0xe000ed88

08004a48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a4e:	f3ef 8305 	mrs	r3, IPSR
 8004a52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b0f      	cmp	r3, #15
 8004a58:	d914      	bls.n	8004a84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a5a:	4a17      	ldr	r2, [pc, #92]	; (8004ab8 <vPortValidateInterruptPriority+0x70>)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	4413      	add	r3, r2
 8004a60:	781b      	ldrb	r3, [r3, #0]
 8004a62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a64:	4b15      	ldr	r3, [pc, #84]	; (8004abc <vPortValidateInterruptPriority+0x74>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	7afa      	ldrb	r2, [r7, #11]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d20a      	bcs.n	8004a84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	607b      	str	r3, [r7, #4]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a84:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <vPortValidateInterruptPriority+0x78>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a8c:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <vPortValidateInterruptPriority+0x7c>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d90a      	bls.n	8004aaa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a98:	f383 8811 	msr	BASEPRI, r3
 8004a9c:	f3bf 8f6f 	isb	sy
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	603b      	str	r3, [r7, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <vPortValidateInterruptPriority+0x60>
	}
 8004aaa:	bf00      	nop
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	e000e3f0 	.word	0xe000e3f0
 8004abc:	20000db8 	.word	0x20000db8
 8004ac0:	e000ed0c 	.word	0xe000ed0c
 8004ac4:	20000dbc 	.word	0x20000dbc

08004ac8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b08a      	sub	sp, #40	; 0x28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ad4:	f7fe fd96 	bl	8003604 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ad8:	4b5b      	ldr	r3, [pc, #364]	; (8004c48 <pvPortMalloc+0x180>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ae0:	f000 f920 	bl	8004d24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <pvPortMalloc+0x184>)
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4013      	ands	r3, r2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	f040 8093 	bne.w	8004c18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01d      	beq.n	8004b34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004af8:	2208      	movs	r2, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	4413      	add	r3, r2
 8004afe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d014      	beq.n	8004b34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	3308      	adds	r3, #8
 8004b12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <pvPortMalloc+0x6c>
	__asm volatile
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	617b      	str	r3, [r7, #20]
}
 8004b30:	bf00      	nop
 8004b32:	e7fe      	b.n	8004b32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d06e      	beq.n	8004c18 <pvPortMalloc+0x150>
 8004b3a:	4b45      	ldr	r3, [pc, #276]	; (8004c50 <pvPortMalloc+0x188>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d869      	bhi.n	8004c18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b44:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b48:	4b42      	ldr	r3, [pc, #264]	; (8004c54 <pvPortMalloc+0x18c>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b4e:	e004      	b.n	8004b5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d903      	bls.n	8004b6c <pvPortMalloc+0xa4>
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f1      	bne.n	8004b50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b6c:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <pvPortMalloc+0x180>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d050      	beq.n	8004c18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b76:	6a3b      	ldr	r3, [r7, #32]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	4413      	add	r3, r2
 8004b7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	685a      	ldr	r2, [r3, #4]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	1ad2      	subs	r2, r2, r3
 8004b90:	2308      	movs	r3, #8
 8004b92:	005b      	lsls	r3, r3, #1
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d91f      	bls.n	8004bd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	f003 0307 	and.w	r3, r3, #7
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <pvPortMalloc+0xf8>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	f383 8811 	msr	BASEPRI, r3
 8004bb2:	f3bf 8f6f 	isb	sy
 8004bb6:	f3bf 8f4f 	dsb	sy
 8004bba:	613b      	str	r3, [r7, #16]
}
 8004bbc:	bf00      	nop
 8004bbe:	e7fe      	b.n	8004bbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	1ad2      	subs	r2, r2, r3
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bd2:	69b8      	ldr	r0, [r7, #24]
 8004bd4:	f000 f908 	bl	8004de8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bd8:	4b1d      	ldr	r3, [pc, #116]	; (8004c50 <pvPortMalloc+0x188>)
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	4a1b      	ldr	r2, [pc, #108]	; (8004c50 <pvPortMalloc+0x188>)
 8004be4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004be6:	4b1a      	ldr	r3, [pc, #104]	; (8004c50 <pvPortMalloc+0x188>)
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	4b1b      	ldr	r3, [pc, #108]	; (8004c58 <pvPortMalloc+0x190>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d203      	bcs.n	8004bfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bf2:	4b17      	ldr	r3, [pc, #92]	; (8004c50 <pvPortMalloc+0x188>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a18      	ldr	r2, [pc, #96]	; (8004c58 <pvPortMalloc+0x190>)
 8004bf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	685a      	ldr	r2, [r3, #4]
 8004bfe:	4b13      	ldr	r3, [pc, #76]	; (8004c4c <pvPortMalloc+0x184>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	431a      	orrs	r2, r3
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004c0e:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <pvPortMalloc+0x194>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <pvPortMalloc+0x194>)
 8004c16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c18:	f7fe fd02 	bl	8003620 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	f003 0307 	and.w	r3, r3, #7
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <pvPortMalloc+0x174>
	__asm volatile
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	f383 8811 	msr	BASEPRI, r3
 8004c2e:	f3bf 8f6f 	isb	sy
 8004c32:	f3bf 8f4f 	dsb	sy
 8004c36:	60fb      	str	r3, [r7, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	e7fe      	b.n	8004c3a <pvPortMalloc+0x172>
	return pvReturn;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3728      	adds	r7, #40	; 0x28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	200049c8 	.word	0x200049c8
 8004c4c:	200049dc 	.word	0x200049dc
 8004c50:	200049cc 	.word	0x200049cc
 8004c54:	200049c0 	.word	0x200049c0
 8004c58:	200049d0 	.word	0x200049d0
 8004c5c:	200049d4 	.word	0x200049d4

08004c60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d04d      	beq.n	8004d0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c72:	2308      	movs	r3, #8
 8004c74:	425b      	negs	r3, r3
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	4b24      	ldr	r3, [pc, #144]	; (8004d18 <vPortFree+0xb8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4013      	ands	r3, r2
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <vPortFree+0x44>
	__asm volatile
 8004c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c92:	f383 8811 	msr	BASEPRI, r3
 8004c96:	f3bf 8f6f 	isb	sy
 8004c9a:	f3bf 8f4f 	dsb	sy
 8004c9e:	60fb      	str	r3, [r7, #12]
}
 8004ca0:	bf00      	nop
 8004ca2:	e7fe      	b.n	8004ca2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d00a      	beq.n	8004cc2 <vPortFree+0x62>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	60bb      	str	r3, [r7, #8]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <vPortFree+0xb8>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d01e      	beq.n	8004d0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d11a      	bne.n	8004d0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <vPortFree+0xb8>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	43db      	mvns	r3, r3
 8004ce2:	401a      	ands	r2, r3
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ce8:	f7fe fc8c 	bl	8003604 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	685a      	ldr	r2, [r3, #4]
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <vPortFree+0xbc>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <vPortFree+0xbc>)
 8004cf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cfa:	6938      	ldr	r0, [r7, #16]
 8004cfc:	f000 f874 	bl	8004de8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004d00:	4b07      	ldr	r3, [pc, #28]	; (8004d20 <vPortFree+0xc0>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3301      	adds	r3, #1
 8004d06:	4a06      	ldr	r2, [pc, #24]	; (8004d20 <vPortFree+0xc0>)
 8004d08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004d0a:	f7fe fc89 	bl	8003620 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200049dc 	.word	0x200049dc
 8004d1c:	200049cc 	.word	0x200049cc
 8004d20:	200049d8 	.word	0x200049d8

08004d24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004d2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d30:	4b27      	ldr	r3, [pc, #156]	; (8004dd0 <prvHeapInit+0xac>)
 8004d32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f003 0307 	and.w	r3, r3, #7
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00c      	beq.n	8004d58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3307      	adds	r3, #7
 8004d42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	4a1f      	ldr	r2, [pc, #124]	; (8004dd0 <prvHeapInit+0xac>)
 8004d54:	4413      	add	r3, r2
 8004d56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d5c:	4a1d      	ldr	r2, [pc, #116]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <prvHeapInit+0xb0>)
 8004d64:	2200      	movs	r2, #0
 8004d66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68ba      	ldr	r2, [r7, #8]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d70:	2208      	movs	r2, #8
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	1a9b      	subs	r3, r3, r2
 8004d76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0307 	bic.w	r3, r3, #7
 8004d7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d86:	4b14      	ldr	r3, [pc, #80]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d8e:	4b12      	ldr	r3, [pc, #72]	; (8004dd8 <prvHeapInit+0xb4>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2200      	movs	r2, #0
 8004d94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004da4:	4b0c      	ldr	r3, [pc, #48]	; (8004dd8 <prvHeapInit+0xb4>)
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a0a      	ldr	r2, [pc, #40]	; (8004ddc <prvHeapInit+0xb8>)
 8004db2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	4a09      	ldr	r2, [pc, #36]	; (8004de0 <prvHeapInit+0xbc>)
 8004dba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <prvHeapInit+0xc0>)
 8004dbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004dc2:	601a      	str	r2, [r3, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	3714      	adds	r7, #20
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000dc0 	.word	0x20000dc0
 8004dd4:	200049c0 	.word	0x200049c0
 8004dd8:	200049c8 	.word	0x200049c8
 8004ddc:	200049d0 	.word	0x200049d0
 8004de0:	200049cc 	.word	0x200049cc
 8004de4:	200049dc 	.word	0x200049dc

08004de8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004df0:	4b28      	ldr	r3, [pc, #160]	; (8004e94 <prvInsertBlockIntoFreeList+0xac>)
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	e002      	b.n	8004dfc <prvInsertBlockIntoFreeList+0x14>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d8f7      	bhi.n	8004df6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	4413      	add	r3, r2
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d108      	bne.n	8004e2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	685a      	ldr	r2, [r3, #4]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	441a      	add	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	441a      	add	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	429a      	cmp	r2, r3
 8004e3c:	d118      	bne.n	8004e70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b15      	ldr	r3, [pc, #84]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d00d      	beq.n	8004e66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685a      	ldr	r2, [r3, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	685b      	ldr	r3, [r3, #4]
 8004e54:	441a      	add	r2, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	e008      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e66:	4b0c      	ldr	r3, [pc, #48]	; (8004e98 <prvInsertBlockIntoFreeList+0xb0>)
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e003      	b.n	8004e78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d002      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e86:	bf00      	nop
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	200049c0 	.word	0x200049c0
 8004e98:	200049c8 	.word	0x200049c8

08004e9c <memset>:
 8004e9c:	4402      	add	r2, r0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d100      	bne.n	8004ea6 <memset+0xa>
 8004ea4:	4770      	bx	lr
 8004ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eaa:	e7f9      	b.n	8004ea0 <memset+0x4>

08004eac <__libc_init_array>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	4d0d      	ldr	r5, [pc, #52]	; (8004ee4 <__libc_init_array+0x38>)
 8004eb0:	4c0d      	ldr	r4, [pc, #52]	; (8004ee8 <__libc_init_array+0x3c>)
 8004eb2:	1b64      	subs	r4, r4, r5
 8004eb4:	10a4      	asrs	r4, r4, #2
 8004eb6:	2600      	movs	r6, #0
 8004eb8:	42a6      	cmp	r6, r4
 8004eba:	d109      	bne.n	8004ed0 <__libc_init_array+0x24>
 8004ebc:	4d0b      	ldr	r5, [pc, #44]	; (8004eec <__libc_init_array+0x40>)
 8004ebe:	4c0c      	ldr	r4, [pc, #48]	; (8004ef0 <__libc_init_array+0x44>)
 8004ec0:	f000 f826 	bl	8004f10 <_init>
 8004ec4:	1b64      	subs	r4, r4, r5
 8004ec6:	10a4      	asrs	r4, r4, #2
 8004ec8:	2600      	movs	r6, #0
 8004eca:	42a6      	cmp	r6, r4
 8004ecc:	d105      	bne.n	8004eda <__libc_init_array+0x2e>
 8004ece:	bd70      	pop	{r4, r5, r6, pc}
 8004ed0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ed4:	4798      	blx	r3
 8004ed6:	3601      	adds	r6, #1
 8004ed8:	e7ee      	b.n	8004eb8 <__libc_init_array+0xc>
 8004eda:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ede:	4798      	blx	r3
 8004ee0:	3601      	adds	r6, #1
 8004ee2:	e7f2      	b.n	8004eca <__libc_init_array+0x1e>
 8004ee4:	08005068 	.word	0x08005068
 8004ee8:	08005068 	.word	0x08005068
 8004eec:	08005068 	.word	0x08005068
 8004ef0:	0800506c 	.word	0x0800506c

08004ef4 <memcpy>:
 8004ef4:	440a      	add	r2, r1
 8004ef6:	4291      	cmp	r1, r2
 8004ef8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004efc:	d100      	bne.n	8004f00 <memcpy+0xc>
 8004efe:	4770      	bx	lr
 8004f00:	b510      	push	{r4, lr}
 8004f02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f06:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d1f9      	bne.n	8004f02 <memcpy+0xe>
 8004f0e:	bd10      	pop	{r4, pc}

08004f10 <_init>:
 8004f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f12:	bf00      	nop
 8004f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f16:	bc08      	pop	{r3}
 8004f18:	469e      	mov	lr, r3
 8004f1a:	4770      	bx	lr

08004f1c <_fini>:
 8004f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f1e:	bf00      	nop
 8004f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f22:	bc08      	pop	{r3}
 8004f24:	469e      	mov	lr, r3
 8004f26:	4770      	bx	lr
