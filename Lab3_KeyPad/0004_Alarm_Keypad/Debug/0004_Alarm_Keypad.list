
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e8c  080078c0  080078c0  000178c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800874c  0800874c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800874c  0800874c  0001874c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008754  08008754  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008754  08008754  00018754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008758  08008758  00018758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800875c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fd4  2000006c  080087c8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005040  080087c8  00025040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b0cd  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b4a  00000000  00000000  0003b1ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001838  00000000  00000000  0003ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fa  00000000  00000000  00040530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002461f  00000000  00000000  0004182a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cb84  00000000  00000000  00065e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de278  00000000  00000000  000829cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006c38  00000000  00000000  00160c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  00167880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080078a8 	.word	0x080078a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000070 	.word	0x20000070
 800020c:	080078a8 	.word	0x080078a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
	int done=1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	607b      	str	r3, [r7, #4]
	while(done)
 80005e6:	e19b      	b.n	8000920 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ee:	48b3      	ldr	r0, [pc, #716]	; (80008bc <Get_Key+0x2e0>)
 80005f0:	f001 fc34 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005f4:	2200      	movs	r2, #0
 80005f6:	2110      	movs	r1, #16
 80005f8:	48b0      	ldr	r0, [pc, #704]	; (80008bc <Get_Key+0x2e0>)
 80005fa:	f001 fc2f 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005fe:	2200      	movs	r2, #0
 8000600:	2120      	movs	r1, #32
 8000602:	48ae      	ldr	r0, [pc, #696]	; (80008bc <Get_Key+0x2e0>)
 8000604:	f001 fc2a 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 8000608:	2200      	movs	r2, #0
 800060a:	2108      	movs	r1, #8
 800060c:	48ab      	ldr	r0, [pc, #684]	; (80008bc <Get_Key+0x2e0>)
 800060e:	f001 fc25 	bl	8001e5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000612:	2140      	movs	r1, #64	; 0x40
 8000614:	48a9      	ldr	r0, [pc, #676]	; (80008bc <Get_Key+0x2e0>)
 8000616:	f001 fc09 	bl	8001e2c <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d00b      	beq.n	8000638 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000620:	bf00      	nop
 8000622:	2140      	movs	r1, #64	; 0x40
 8000624:	48a5      	ldr	r0, [pc, #660]	; (80008bc <Get_Key+0x2e0>)
 8000626:	f001 fc01 	bl	8001e2c <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1f8      	bne.n	8000622 <Get_Key+0x46>
		key='1';
 8000630:	4ba3      	ldr	r3, [pc, #652]	; (80008c0 <Get_Key+0x2e4>)
 8000632:	2231      	movs	r2, #49	; 0x31
 8000634:	701a      	strb	r2, [r3, #0]
		break;
 8000636:	e177      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	48a2      	ldr	r0, [pc, #648]	; (80008c4 <Get_Key+0x2e8>)
 800063c:	f001 fbf6 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d00b      	beq.n	800065e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000646:	bf00      	nop
 8000648:	2180      	movs	r1, #128	; 0x80
 800064a:	489e      	ldr	r0, [pc, #632]	; (80008c4 <Get_Key+0x2e8>)
 800064c:	f001 fbee 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d1f8      	bne.n	8000648 <Get_Key+0x6c>
		key='4';
 8000656:	4b9a      	ldr	r3, [pc, #616]	; (80008c0 <Get_Key+0x2e4>)
 8000658:	2234      	movs	r2, #52	; 0x34
 800065a:	701a      	strb	r2, [r3, #0]
		break;
 800065c:	e164      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800065e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000662:	4899      	ldr	r0, [pc, #612]	; (80008c8 <Get_Key+0x2ec>)
 8000664:	f001 fbe2 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d00c      	beq.n	8000688 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800066e:	bf00      	nop
 8000670:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000674:	4894      	ldr	r0, [pc, #592]	; (80008c8 <Get_Key+0x2ec>)
 8000676:	f001 fbd9 	bl	8001e2c <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f7      	bne.n	8000670 <Get_Key+0x94>
		key='7';
 8000680:	4b8f      	ldr	r3, [pc, #572]	; (80008c0 <Get_Key+0x2e4>)
 8000682:	2237      	movs	r2, #55	; 0x37
 8000684:	701a      	strb	r2, [r3, #0]
		break;
 8000686:	e14f      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000688:	f44f 7180 	mov.w	r1, #256	; 0x100
 800068c:	488e      	ldr	r0, [pc, #568]	; (80008c8 <Get_Key+0x2ec>)
 800068e:	f001 fbcd 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d00c      	beq.n	80006b2 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000698:	bf00      	nop
 800069a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800069e:	488a      	ldr	r0, [pc, #552]	; (80008c8 <Get_Key+0x2ec>)
 80006a0:	f001 fbc4 	bl	8001e2c <HAL_GPIO_ReadPin>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d1f7      	bne.n	800069a <Get_Key+0xbe>
		key='*';
 80006aa:	4b85      	ldr	r3, [pc, #532]	; (80008c0 <Get_Key+0x2e4>)
 80006ac:	222a      	movs	r2, #42	; 0x2a
 80006ae:	701a      	strb	r2, [r3, #0]
		break;
 80006b0:	e13a      	b.n	8000928 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 80006b2:	2200      	movs	r2, #0
 80006b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006b8:	4880      	ldr	r0, [pc, #512]	; (80008bc <Get_Key+0x2e0>)
 80006ba:	f001 fbcf 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 80006be:	2201      	movs	r2, #1
 80006c0:	2110      	movs	r1, #16
 80006c2:	487e      	ldr	r0, [pc, #504]	; (80008bc <Get_Key+0x2e0>)
 80006c4:	f001 fbca 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006c8:	2200      	movs	r2, #0
 80006ca:	2120      	movs	r1, #32
 80006cc:	487b      	ldr	r0, [pc, #492]	; (80008bc <Get_Key+0x2e0>)
 80006ce:	f001 fbc5 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006d2:	2200      	movs	r2, #0
 80006d4:	2108      	movs	r1, #8
 80006d6:	4879      	ldr	r0, [pc, #484]	; (80008bc <Get_Key+0x2e0>)
 80006d8:	f001 fbc0 	bl	8001e5c <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006dc:	2140      	movs	r1, #64	; 0x40
 80006de:	4877      	ldr	r0, [pc, #476]	; (80008bc <Get_Key+0x2e0>)
 80006e0:	f001 fba4 	bl	8001e2c <HAL_GPIO_ReadPin>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d00b      	beq.n	8000702 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ea:	bf00      	nop
 80006ec:	2140      	movs	r1, #64	; 0x40
 80006ee:	4873      	ldr	r0, [pc, #460]	; (80008bc <Get_Key+0x2e0>)
 80006f0:	f001 fb9c 	bl	8001e2c <HAL_GPIO_ReadPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d1f8      	bne.n	80006ec <Get_Key+0x110>
		key='2';
 80006fa:	4b71      	ldr	r3, [pc, #452]	; (80008c0 <Get_Key+0x2e4>)
 80006fc:	2232      	movs	r2, #50	; 0x32
 80006fe:	701a      	strb	r2, [r3, #0]
		break;
 8000700:	e112      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000702:	2180      	movs	r1, #128	; 0x80
 8000704:	486f      	ldr	r0, [pc, #444]	; (80008c4 <Get_Key+0x2e8>)
 8000706:	f001 fb91 	bl	8001e2c <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d00b      	beq.n	8000728 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000710:	bf00      	nop
 8000712:	2180      	movs	r1, #128	; 0x80
 8000714:	486b      	ldr	r0, [pc, #428]	; (80008c4 <Get_Key+0x2e8>)
 8000716:	f001 fb89 	bl	8001e2c <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d1f8      	bne.n	8000712 <Get_Key+0x136>
		key='5';
 8000720:	4b67      	ldr	r3, [pc, #412]	; (80008c0 <Get_Key+0x2e4>)
 8000722:	2235      	movs	r2, #53	; 0x35
 8000724:	701a      	strb	r2, [r3, #0]
		break;
 8000726:	e0ff      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000728:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072c:	4866      	ldr	r0, [pc, #408]	; (80008c8 <Get_Key+0x2ec>)
 800072e:	f001 fb7d 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d00c      	beq.n	8000752 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000738:	bf00      	nop
 800073a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800073e:	4862      	ldr	r0, [pc, #392]	; (80008c8 <Get_Key+0x2ec>)
 8000740:	f001 fb74 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d1f7      	bne.n	800073a <Get_Key+0x15e>
		key='8';
 800074a:	4b5d      	ldr	r3, [pc, #372]	; (80008c0 <Get_Key+0x2e4>)
 800074c:	2238      	movs	r2, #56	; 0x38
 800074e:	701a      	strb	r2, [r3, #0]
		break;
 8000750:	e0ea      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000756:	485c      	ldr	r0, [pc, #368]	; (80008c8 <Get_Key+0x2ec>)
 8000758:	f001 fb68 	bl	8001e2c <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000762:	bf00      	nop
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4857      	ldr	r0, [pc, #348]	; (80008c8 <Get_Key+0x2ec>)
 800076a:	f001 fb5f 	bl	8001e2c <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f7      	bne.n	8000764 <Get_Key+0x188>
		key='0';
 8000774:	4b52      	ldr	r3, [pc, #328]	; (80008c0 <Get_Key+0x2e4>)
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	701a      	strb	r2, [r3, #0]
		break;
 800077a:	e0d5      	b.n	8000928 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000782:	484e      	ldr	r0, [pc, #312]	; (80008bc <Get_Key+0x2e0>)
 8000784:	f001 fb6a 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000788:	2200      	movs	r2, #0
 800078a:	2110      	movs	r1, #16
 800078c:	484b      	ldr	r0, [pc, #300]	; (80008bc <Get_Key+0x2e0>)
 800078e:	f001 fb65 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000792:	2201      	movs	r2, #1
 8000794:	2120      	movs	r1, #32
 8000796:	4849      	ldr	r0, [pc, #292]	; (80008bc <Get_Key+0x2e0>)
 8000798:	f001 fb60 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800079c:	2200      	movs	r2, #0
 800079e:	2108      	movs	r1, #8
 80007a0:	4846      	ldr	r0, [pc, #280]	; (80008bc <Get_Key+0x2e0>)
 80007a2:	f001 fb5b 	bl	8001e5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80007a6:	2140      	movs	r1, #64	; 0x40
 80007a8:	4844      	ldr	r0, [pc, #272]	; (80008bc <Get_Key+0x2e0>)
 80007aa:	f001 fb3f 	bl	8001e2c <HAL_GPIO_ReadPin>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00b      	beq.n	80007cc <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80007b4:	bf00      	nop
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4840      	ldr	r0, [pc, #256]	; (80008bc <Get_Key+0x2e0>)
 80007ba:	f001 fb37 	bl	8001e2c <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d1f8      	bne.n	80007b6 <Get_Key+0x1da>
		key='3';
 80007c4:	4b3e      	ldr	r3, [pc, #248]	; (80008c0 <Get_Key+0x2e4>)
 80007c6:	2233      	movs	r2, #51	; 0x33
 80007c8:	701a      	strb	r2, [r3, #0]
		break;
 80007ca:	e0ad      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	483d      	ldr	r0, [pc, #244]	; (80008c4 <Get_Key+0x2e8>)
 80007d0:	f001 fb2c 	bl	8001e2c <HAL_GPIO_ReadPin>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d00b      	beq.n	80007f2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007da:	bf00      	nop
 80007dc:	2180      	movs	r1, #128	; 0x80
 80007de:	4839      	ldr	r0, [pc, #228]	; (80008c4 <Get_Key+0x2e8>)
 80007e0:	f001 fb24 	bl	8001e2c <HAL_GPIO_ReadPin>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d1f8      	bne.n	80007dc <Get_Key+0x200>
		key='6';
 80007ea:	4b35      	ldr	r3, [pc, #212]	; (80008c0 <Get_Key+0x2e4>)
 80007ec:	2236      	movs	r2, #54	; 0x36
 80007ee:	701a      	strb	r2, [r3, #0]
		break;
 80007f0:	e09a      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007f6:	4834      	ldr	r0, [pc, #208]	; (80008c8 <Get_Key+0x2ec>)
 80007f8:	f001 fb18 	bl	8001e2c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d00c      	beq.n	800081c <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000802:	bf00      	nop
 8000804:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000808:	482f      	ldr	r0, [pc, #188]	; (80008c8 <Get_Key+0x2ec>)
 800080a:	f001 fb0f 	bl	8001e2c <HAL_GPIO_ReadPin>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d1f7      	bne.n	8000804 <Get_Key+0x228>
		key='9';
 8000814:	4b2a      	ldr	r3, [pc, #168]	; (80008c0 <Get_Key+0x2e4>)
 8000816:	2239      	movs	r2, #57	; 0x39
 8000818:	701a      	strb	r2, [r3, #0]
		break;
 800081a:	e085      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 800081c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000820:	4829      	ldr	r0, [pc, #164]	; (80008c8 <Get_Key+0x2ec>)
 8000822:	f001 fb03 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d00c      	beq.n	8000846 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800082c:	bf00      	nop
 800082e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000832:	4825      	ldr	r0, [pc, #148]	; (80008c8 <Get_Key+0x2ec>)
 8000834:	f001 fafa 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d1f7      	bne.n	800082e <Get_Key+0x252>
		key='#';
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <Get_Key+0x2e4>)
 8000840:	2223      	movs	r2, #35	; 0x23
 8000842:	701a      	strb	r2, [r3, #0]
		break;
 8000844:	e070      	b.n	8000928 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	481b      	ldr	r0, [pc, #108]	; (80008bc <Get_Key+0x2e0>)
 800084e:	f001 fb05 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000852:	2200      	movs	r2, #0
 8000854:	2110      	movs	r1, #16
 8000856:	4819      	ldr	r0, [pc, #100]	; (80008bc <Get_Key+0x2e0>)
 8000858:	f001 fb00 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800085c:	2200      	movs	r2, #0
 800085e:	2120      	movs	r1, #32
 8000860:	4816      	ldr	r0, [pc, #88]	; (80008bc <Get_Key+0x2e0>)
 8000862:	f001 fafb 	bl	8001e5c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000866:	2201      	movs	r2, #1
 8000868:	2108      	movs	r1, #8
 800086a:	4814      	ldr	r0, [pc, #80]	; (80008bc <Get_Key+0x2e0>)
 800086c:	f001 faf6 	bl	8001e5c <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4812      	ldr	r0, [pc, #72]	; (80008bc <Get_Key+0x2e0>)
 8000874:	f001 fada 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d00b      	beq.n	8000896 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800087e:	bf00      	nop
 8000880:	2140      	movs	r1, #64	; 0x40
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <Get_Key+0x2e0>)
 8000884:	f001 fad2 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d1f8      	bne.n	8000880 <Get_Key+0x2a4>
		key='A';
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <Get_Key+0x2e4>)
 8000890:	2241      	movs	r2, #65	; 0x41
 8000892:	701a      	strb	r2, [r3, #0]
		break;
 8000894:	e048      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000896:	2180      	movs	r1, #128	; 0x80
 8000898:	480a      	ldr	r0, [pc, #40]	; (80008c4 <Get_Key+0x2e8>)
 800089a:	f001 fac7 	bl	8001e2c <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d013      	beq.n	80008cc <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80008a4:	bf00      	nop
 80008a6:	2180      	movs	r1, #128	; 0x80
 80008a8:	4806      	ldr	r0, [pc, #24]	; (80008c4 <Get_Key+0x2e8>)
 80008aa:	f001 fabf 	bl	8001e2c <HAL_GPIO_ReadPin>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1f8      	bne.n	80008a6 <Get_Key+0x2ca>
		key='B';
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <Get_Key+0x2e4>)
 80008b6:	2242      	movs	r2, #66	; 0x42
 80008b8:	701a      	strb	r2, [r3, #0]
		break;
 80008ba:	e035      	b.n	8000928 <Get_Key+0x34c>
 80008bc:	40020400 	.word	0x40020400
 80008c0:	20000088 	.word	0x20000088
 80008c4:	40020800 	.word	0x40020800
 80008c8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008d0:	4818      	ldr	r0, [pc, #96]	; (8000934 <Get_Key+0x358>)
 80008d2:	f001 faab 	bl	8001e2c <HAL_GPIO_ReadPin>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d00c      	beq.n	80008f6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008dc:	bf00      	nop
 80008de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e2:	4814      	ldr	r0, [pc, #80]	; (8000934 <Get_Key+0x358>)
 80008e4:	f001 faa2 	bl	8001e2c <HAL_GPIO_ReadPin>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d1f7      	bne.n	80008de <Get_Key+0x302>
		key='C';
 80008ee:	4b12      	ldr	r3, [pc, #72]	; (8000938 <Get_Key+0x35c>)
 80008f0:	2243      	movs	r2, #67	; 0x43
 80008f2:	701a      	strb	r2, [r3, #0]
		break;
 80008f4:	e018      	b.n	8000928 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008fa:	480e      	ldr	r0, [pc, #56]	; (8000934 <Get_Key+0x358>)
 80008fc:	f001 fa96 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d00c      	beq.n	8000920 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000906:	bf00      	nop
 8000908:	f44f 7180 	mov.w	r1, #256	; 0x100
 800090c:	4809      	ldr	r0, [pc, #36]	; (8000934 <Get_Key+0x358>)
 800090e:	f001 fa8d 	bl	8001e2c <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f7      	bne.n	8000908 <Get_Key+0x32c>
		key='D';
 8000918:	4b07      	ldr	r3, [pc, #28]	; (8000938 <Get_Key+0x35c>)
 800091a:	2244      	movs	r2, #68	; 0x44
 800091c:	701a      	strb	r2, [r3, #0]
		break;
 800091e:	e003      	b.n	8000928 <Get_Key+0x34c>
	while(done)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f47f ae60 	bne.w	80005e8 <Get_Key+0xc>
	}
}
	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	return(key);
 8000928:	4b03      	ldr	r3, [pc, #12]	; (8000938 <Get_Key+0x35c>)
 800092a:	781b      	ldrb	r3, [r3, #0]
}
 800092c:	4618      	mov	r0, r3
 800092e:	3708      	adds	r7, #8
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40020000 	.word	0x40020000
 8000938:	20000088 	.word	0x20000088

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000940:	f000 ff98 	bl	8001874 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000944:	f000 f886 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000948:	f000 f94a 	bl	8000be0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800094c:	f000 f91e 	bl	8000b8c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000950:	f000 f8ee 	bl	8000b30 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
    SSD1306_Init();
 8000954:	f000 fb04 	bl	8000f60 <SSD1306_Init>
    SSD1306_GotoXY (0,0);
 8000958:	2100      	movs	r1, #0
 800095a:	2000      	movs	r0, #0
 800095c:	f000 fc6a 	bl	8001234 <SSD1306_GotoXY>
    //SSD1306_Puts ("Voltage:", &Font_11x18, 1);
    SSD1306_Puts ("SET CODE:", &Font_11x18, 1);
 8000960:	2201      	movs	r2, #1
 8000962:	492c      	ldr	r1, [pc, #176]	; (8000a14 <main+0xd8>)
 8000964:	482c      	ldr	r0, [pc, #176]	; (8000a18 <main+0xdc>)
 8000966:	f000 fcfb 	bl	8001360 <SSD1306_Puts>
    SSD1306_GotoXY (0, 30);
 800096a:	211e      	movs	r1, #30
 800096c:	2000      	movs	r0, #0
 800096e:	f000 fc61 	bl	8001234 <SSD1306_GotoXY>
    SSD1306_UpdateScreen();
 8000972:	f000 fbb9 	bl	80010e8 <SSD1306_UpdateScreen>
    SSD1306_UpdateScreen();
 8000976:	f000 fbb7 	bl	80010e8 <SSD1306_UpdateScreen>

    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 800097a:	2140      	movs	r1, #64	; 0x40
 800097c:	4827      	ldr	r0, [pc, #156]	; (8000a1c <main+0xe0>)
 800097e:	f001 fa86 	bl	8001e8e <HAL_GPIO_TogglePin>

    HAL_Delay (500);
 8000982:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000986:	f000 ffb7 	bl	80018f8 <HAL_Delay>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800098a:	f003 fd73 	bl	8004474 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800098e:	4a24      	ldr	r2, [pc, #144]	; (8000a20 <main+0xe4>)
 8000990:	2100      	movs	r1, #0
 8000992:	4824      	ldr	r0, [pc, #144]	; (8000a24 <main+0xe8>)
 8000994:	f003 fdb8 	bl	8004508 <osThreadNew>
 8000998:	4603      	mov	r3, r0
 800099a:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <main+0xec>)
 800099c:	6013      	str	r3, [r2, #0]

  /* creation of Keypad */
  KeypadHandle = osThreadNew(TaskKeypad, NULL, &Keypad_attributes);
 800099e:	4a23      	ldr	r2, [pc, #140]	; (8000a2c <main+0xf0>)
 80009a0:	2100      	movs	r1, #0
 80009a2:	4823      	ldr	r0, [pc, #140]	; (8000a30 <main+0xf4>)
 80009a4:	f003 fdb0 	bl	8004508 <osThreadNew>
 80009a8:	4603      	mov	r3, r0
 80009aa:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <main+0xf8>)
 80009ac:	6013      	str	r3, [r2, #0]

  /* creation of lcd */
  lcdHandle = osThreadNew(TaskLCD, NULL, &lcd_attributes);
 80009ae:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <main+0xfc>)
 80009b0:	2100      	movs	r1, #0
 80009b2:	4822      	ldr	r0, [pc, #136]	; (8000a3c <main+0x100>)
 80009b4:	f003 fda8 	bl	8004508 <osThreadNew>
 80009b8:	4603      	mov	r3, r0
 80009ba:	4a21      	ldr	r2, [pc, #132]	; (8000a40 <main+0x104>)
 80009bc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009be:	f003 fd7d 	bl	80044bc <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	/* D10 to D7 as input pins for row 0 to row 3. D6 to D3 as output for column pins C1 to C3*/
	  key = Get_Key();
 80009c2:	f7ff fe0b 	bl	80005dc <Get_Key>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b1e      	ldr	r3, [pc, #120]	; (8000a44 <main+0x108>)
 80009cc:	701a      	strb	r2, [r3, #0]
	  sprintf(hold, "%c", key);
 80009ce:	4b1d      	ldr	r3, [pc, #116]	; (8000a44 <main+0x108>)
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	461a      	mov	r2, r3
 80009d4:	491c      	ldr	r1, [pc, #112]	; (8000a48 <main+0x10c>)
 80009d6:	481d      	ldr	r0, [pc, #116]	; (8000a4c <main+0x110>)
 80009d8:	f006 faa0 	bl	8006f1c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *)hold, strlen(hold), 100);
 80009dc:	481b      	ldr	r0, [pc, #108]	; (8000a4c <main+0x110>)
 80009de:	f7ff fc17 	bl	8000210 <strlen>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	2364      	movs	r3, #100	; 0x64
 80009e8:	4918      	ldr	r1, [pc, #96]	; (8000a4c <main+0x110>)
 80009ea:	4819      	ldr	r0, [pc, #100]	; (8000a50 <main+0x114>)
 80009ec:	f003 f942 	bl	8003c74 <HAL_UART_Transmit>
	  SSD1306_GotoXY (0, 30);
 80009f0:	211e      	movs	r1, #30
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 fc1e 	bl	8001234 <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 80009f8:	f000 fb76 	bl	80010e8 <SSD1306_UpdateScreen>
	  SSD1306_Puts (hold, &Font_11x18, 1);
 80009fc:	2201      	movs	r2, #1
 80009fe:	4905      	ldr	r1, [pc, #20]	; (8000a14 <main+0xd8>)
 8000a00:	4812      	ldr	r0, [pc, #72]	; (8000a4c <main+0x110>)
 8000a02:	f000 fcad 	bl	8001360 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000a06:	f000 fb6f 	bl	80010e8 <SSD1306_UpdateScreen>
	  HAL_Delay (500);
 8000a0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a0e:	f000 ff73 	bl	80018f8 <HAL_Delay>
	  key = Get_Key();
 8000a12:	e7d6      	b.n	80009c2 <main+0x86>
 8000a14:	20000000 	.word	0x20000000
 8000a18:	080078d8 	.word	0x080078d8
 8000a1c:	40020000 	.word	0x40020000
 8000a20:	08008694 	.word	0x08008694
 8000a24:	08000d19 	.word	0x08000d19
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	080086b8 	.word	0x080086b8
 8000a30:	08000d29 	.word	0x08000d29
 8000a34:	2000012c 	.word	0x2000012c
 8000a38:	080086dc 	.word	0x080086dc
 8000a3c:	08000e69 	.word	0x08000e69
 8000a40:	20000130 	.word	0x20000130
 8000a44:	20000088 	.word	0x20000088
 8000a48:	080078e4 	.word	0x080078e4
 8000a4c:	20000134 	.word	0x20000134
 8000a50:	200000e0 	.word	0x200000e0

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2234      	movs	r2, #52	; 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f006 fa9c 	bl	8006fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a80:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	; 0x40
 8000a88:	4b27      	ldr	r3, [pc, #156]	; (8000b28 <SystemClock_Config+0xd4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <SystemClock_Config+0xd8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000aa0:	4a22      	ldr	r2, [pc, #136]	; (8000b2c <SystemClock_Config+0xd8>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <SystemClock_Config+0xd8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000acc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ad0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fb36 	bl	8003154 <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aee:	f000 fa31 	bl	8000f54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 ffa4 	bl	8002a5c <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b1a:	f000 fa1b 	bl	8000f54 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3750      	adds	r7, #80	; 0x50
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b36:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <MX_I2C1_Init+0x54>)
 8000b38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b3c:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <MX_I2C1_Init+0x58>)
 8000b3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b40:	4b0f      	ldr	r3, [pc, #60]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b6c:	4804      	ldr	r0, [pc, #16]	; (8000b80 <MX_I2C1_Init+0x50>)
 8000b6e:	f001 f9a9 	bl	8001ec4 <HAL_I2C_Init>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b78:	f000 f9ec 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	2000008c 	.word	0x2000008c
 8000b84:	40005400 	.word	0x40005400
 8000b88:	00061a80 	.word	0x00061a80

08000b8c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b92:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_USART2_UART_Init+0x50>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b96:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000b98:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b9c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0b      	ldr	r3, [pc, #44]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <MX_USART2_UART_Init+0x4c>)
 8000bc4:	f003 f806 	bl	8003bd4 <HAL_UART_Init>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bce:	f000 f9c1 	bl	8000f54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	200000e0 	.word	0x200000e0
 8000bdc:	40004400 	.word	0x40004400

08000be0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	2200      	movs	r2, #0
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	605a      	str	r2, [r3, #4]
 8000bf0:	609a      	str	r2, [r3, #8]
 8000bf2:	60da      	str	r2, [r3, #12]
 8000bf4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	613b      	str	r3, [r7, #16]
 8000bfa:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a42      	ldr	r2, [pc, #264]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c00:	f043 0304 	orr.w	r3, r3, #4
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
 8000c06:	4b40      	ldr	r3, [pc, #256]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b3c      	ldr	r3, [pc, #240]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a3b      	ldr	r2, [pc, #236]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b39      	ldr	r3, [pc, #228]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
 8000c32:	4b35      	ldr	r3, [pc, #212]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a34      	ldr	r2, [pc, #208]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b32      	ldr	r3, [pc, #200]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	607b      	str	r3, [r7, #4]
 8000c4e:	4b2e      	ldr	r3, [pc, #184]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a2d      	ldr	r2, [pc, #180]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b2b      	ldr	r3, [pc, #172]	; (8000d08 <MX_GPIO_Init+0x128>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2160      	movs	r1, #96	; 0x60
 8000c6a:	4828      	ldr	r0, [pc, #160]	; (8000d0c <MX_GPIO_Init+0x12c>)
 8000c6c:	f001 f8f6 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c76:	4826      	ldr	r0, [pc, #152]	; (8000d10 <MX_GPIO_Init+0x130>)
 8000c78:	f001 f8f0 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000c7c:	2360      	movs	r3, #96	; 0x60
 8000c7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	481e      	ldr	r0, [pc, #120]	; (8000d0c <MX_GPIO_Init+0x12c>)
 8000c94:	f000 ff36 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000c98:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4817      	ldr	r0, [pc, #92]	; (8000d10 <MX_GPIO_Init+0x130>)
 8000cb2:	f000 ff27 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000cb6:	2380      	movs	r3, #128	; 0x80
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4812      	ldr	r0, [pc, #72]	; (8000d14 <MX_GPIO_Init+0x134>)
 8000cca:	f000 ff1b 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000cce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <MX_GPIO_Init+0x12c>)
 8000ce4:	f000 ff0e 	bl	8001b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cec:	2300      	movs	r3, #0
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf0:	2302      	movs	r3, #2
 8000cf2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000cf4:	f107 0314 	add.w	r3, r7, #20
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4805      	ldr	r0, [pc, #20]	; (8000d10 <MX_GPIO_Init+0x130>)
 8000cfc:	f000 ff02 	bl	8001b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d00:	bf00      	nop
 8000d02:	3728      	adds	r7, #40	; 0x28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40020800 	.word	0x40020800

08000d18 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f003 fc83 	bl	800462c <osDelay>
 8000d26:	e7fb      	b.n	8000d20 <StartDefaultTask+0x8>

08000d28 <TaskKeypad>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskKeypad */
void TaskKeypad(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskKeypad */
  /* Infinite loop */
  for(;;)
  {

	  memset(hold, '\0', sizeof(hold)); // clear the value of hold
 8000d30:	2206      	movs	r2, #6
 8000d32:	2100      	movs	r1, #0
 8000d34:	4843      	ldr	r0, [pc, #268]	; (8000e44 <TaskKeypad+0x11c>)
 8000d36:	f006 f933 	bl	8006fa0 <memset>
	  memset(codeDisplay, '\0', sizeof(codeDisplay)); // clear the value of codeDisplay
 8000d3a:	220b      	movs	r2, #11
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4842      	ldr	r0, [pc, #264]	; (8000e48 <TaskKeypad+0x120>)
 8000d40:	f006 f92e 	bl	8006fa0 <memset>
	  //strcat(codeDisplay, "Code:"); // reverts text back to "Code:"

	  for(int i = 0; i < 6; i++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
 8000d48:	e075      	b.n	8000e36 <TaskKeypad+0x10e>
		  if(i == 0){
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d10c      	bne.n	8000d6a <TaskKeypad+0x42>
			  SSD1306_GotoXY (0, 30); // tells to write on second line
 8000d50:	211e      	movs	r1, #30
 8000d52:	2000      	movs	r0, #0
 8000d54:	f000 fa6e 	bl	8001234 <SSD1306_GotoXY>
			  SSD1306_UpdateScreen();
 8000d58:	f000 f9c6 	bl	80010e8 <SSD1306_UpdateScreen>
			  SSD1306_Puts ("             ", &Font_11x18, 1); // displays '-' for every key pressed before '#'
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	493b      	ldr	r1, [pc, #236]	; (8000e4c <TaskKeypad+0x124>)
 8000d60:	483b      	ldr	r0, [pc, #236]	; (8000e50 <TaskKeypad+0x128>)
 8000d62:	f000 fafd 	bl	8001360 <SSD1306_Puts>
			  SSD1306_UpdateScreen();
 8000d66:	f000 f9bf 	bl	80010e8 <SSD1306_UpdateScreen>
		  }

		  key = Get_Key(); // gets value of pressed key
 8000d6a:	f7ff fc37 	bl	80005dc <Get_Key>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	461a      	mov	r2, r3
 8000d72:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <TaskKeypad+0x12c>)
 8000d74:	701a      	strb	r2, [r3, #0]

		  if(key == '#' && (strlen(hold) == 4 || strlen(hold) == 6)){ // checks if star key pressed and length of entered password is either 4 or 6
 8000d76:	4b37      	ldr	r3, [pc, #220]	; (8000e54 <TaskKeypad+0x12c>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b23      	cmp	r3, #35	; 0x23
 8000d7c:	d145      	bne.n	8000e0a <TaskKeypad+0xe2>
 8000d7e:	4831      	ldr	r0, [pc, #196]	; (8000e44 <TaskKeypad+0x11c>)
 8000d80:	f7ff fa46 	bl	8000210 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b04      	cmp	r3, #4
 8000d88:	d005      	beq.n	8000d96 <TaskKeypad+0x6e>
 8000d8a:	482e      	ldr	r0, [pc, #184]	; (8000e44 <TaskKeypad+0x11c>)
 8000d8c:	f7ff fa40 	bl	8000210 <strlen>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b06      	cmp	r3, #6
 8000d94:	d139      	bne.n	8000e0a <TaskKeypad+0xe2>
			  if(strlen(password) != 0 && (0 == strcmp(hold, password))){ // check to see is the password has been set and if password has the same value as hold(the code entered to arm or disarm)
 8000d96:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <TaskKeypad+0x130>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d019      	beq.n	8000dd2 <TaskKeypad+0xaa>
 8000d9e:	492e      	ldr	r1, [pc, #184]	; (8000e58 <TaskKeypad+0x130>)
 8000da0:	4828      	ldr	r0, [pc, #160]	; (8000e44 <TaskKeypad+0x11c>)
 8000da2:	f7ff fa3d 	bl	8000220 <strcmp>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d112      	bne.n	8000dd2 <TaskKeypad+0xaa>
				  armed = !armed; // changes the state of armed to the opposite of its current state
 8000dac:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <TaskKeypad+0x134>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bf14      	ite	ne
 8000db4:	2301      	movne	r3, #1
 8000db6:	2300      	moveq	r3, #0
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	f083 0301 	eor.w	r3, r3, #1
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	f003 0301 	and.w	r3, r3, #1
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4b25      	ldr	r3, [pc, #148]	; (8000e5c <TaskKeypad+0x134>)
 8000dc8:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // changes the state of the green light (will be on when disarmed and off when armed)
				  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // changes the state of the red light (will be on when armed and off when disarmed)
				  hasChanged = false;
 8000dca:	4b25      	ldr	r3, [pc, #148]	; (8000e60 <TaskKeypad+0x138>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
				  break;
 8000dd0:	e036      	b.n	8000e40 <TaskKeypad+0x118>
			  }
			  else if(strlen(password) == 0){ // checks to see if the password has not been set
 8000dd2:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <TaskKeypad+0x130>)
 8000dd4:	781b      	ldrb	r3, [r3, #0]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d131      	bne.n	8000e3e <TaskKeypad+0x116>
				  strncpy(password, hold, 6); // copies the value of hold(the code entered by the user) into password(the stored user set code)
 8000dda:	2206      	movs	r2, #6
 8000ddc:	4919      	ldr	r1, [pc, #100]	; (8000e44 <TaskKeypad+0x11c>)
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <TaskKeypad+0x130>)
 8000de0:	f006 f8cb 	bl	8006f7a <strncpy>
				  armed = !armed; // set the sate to armed after code initially set
 8000de4:	4b1d      	ldr	r3, [pc, #116]	; (8000e5c <TaskKeypad+0x134>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	bf14      	ite	ne
 8000dec:	2301      	movne	r3, #1
 8000dee:	2300      	moveq	r3, #0
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	f083 0301 	eor.w	r3, r3, #1
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	b2da      	uxtb	r2, r3
 8000dfe:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <TaskKeypad+0x134>)
 8000e00:	701a      	strb	r2, [r3, #0]
				  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // turns off the green light as the system is now armed
				  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6); // turns on the red light as the system is now armed
				  hasChanged = false;
 8000e02:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <TaskKeypad+0x138>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	701a      	strb	r2, [r3, #0]
				  break;
 8000e08:	e01a      	b.n	8000e40 <TaskKeypad+0x118>
			  }
			  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			  break; // exits the loop if invalid code tried
		  }
		  else{ // if key pressed that is not '#'
			  strcat(hold, &key); // puts key at the end of hold
 8000e0a:	4912      	ldr	r1, [pc, #72]	; (8000e54 <TaskKeypad+0x12c>)
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <TaskKeypad+0x11c>)
 8000e0e:	f006 f8a5 	bl	8006f5c <strcat>
			  strcat(codeDisplay, "-"); // puts '-' in the text displaying the code on the LCD
 8000e12:	480d      	ldr	r0, [pc, #52]	; (8000e48 <TaskKeypad+0x120>)
 8000e14:	f7ff f9fc 	bl	8000210 <strlen>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <TaskKeypad+0x120>)
 8000e1e:	4413      	add	r3, r2
 8000e20:	4910      	ldr	r1, [pc, #64]	; (8000e64 <TaskKeypad+0x13c>)
 8000e22:	461a      	mov	r2, r3
 8000e24:	460b      	mov	r3, r1
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	8013      	strh	r3, [r2, #0]
		  }
		  HAL_Delay(100);
 8000e2a:	2064      	movs	r0, #100	; 0x64
 8000e2c:	f000 fd64 	bl	80018f8 <HAL_Delay>
	  for(int i = 0; i < 6; i++){
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b05      	cmp	r3, #5
 8000e3a:	dd86      	ble.n	8000d4a <TaskKeypad+0x22>
 8000e3c:	e778      	b.n	8000d30 <TaskKeypad+0x8>
			  break; // exits the loop if invalid code tried
 8000e3e:	bf00      	nop
	  memset(hold, '\0', sizeof(hold)); // clear the value of hold
 8000e40:	e776      	b.n	8000d30 <TaskKeypad+0x8>
 8000e42:	bf00      	nop
 8000e44:	20000134 	.word	0x20000134
 8000e48:	20000144 	.word	0x20000144
 8000e4c:	20000000 	.word	0x20000000
 8000e50:	080078e8 	.word	0x080078e8
 8000e54:	20000088 	.word	0x20000088
 8000e58:	2000013c 	.word	0x2000013c
 8000e5c:	20000142 	.word	0x20000142
 8000e60:	20000008 	.word	0x20000008
 8000e64:	080078f8 	.word	0x080078f8

08000e68 <TaskLCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskLCD */
void TaskLCD(void *argument)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskLCD */
  /* Infinite loop */
  for(;;)
  {
	  // changes the value of armed or disarmed text
	  if(strlen(password) == 0){
 8000e70:	4b26      	ldr	r3, [pc, #152]	; (8000f0c <TaskLCD+0xa4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d10d      	bne.n	8000e94 <TaskLCD+0x2c>
		  SSD1306_GotoXY (0, 0); // tells to write on first line
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	f000 f9da 	bl	8001234 <SSD1306_GotoXY>
		  SSD1306_UpdateScreen();
 8000e80:	f000 f932 	bl	80010e8 <SSD1306_UpdateScreen>
		  SSD1306_Puts ("SET CODE", &Font_11x18, 1);
 8000e84:	2201      	movs	r2, #1
 8000e86:	4922      	ldr	r1, [pc, #136]	; (8000f10 <TaskLCD+0xa8>)
 8000e88:	4822      	ldr	r0, [pc, #136]	; (8000f14 <TaskLCD+0xac>)
 8000e8a:	f000 fa69 	bl	8001360 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000e8e:	f000 f92b 	bl	80010e8 <SSD1306_UpdateScreen>
 8000e92:	e02c      	b.n	8000eee <TaskLCD+0x86>
	  }
	  else if(armed){
 8000e94:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <TaskLCD+0xb0>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d01b      	beq.n	8000ed4 <TaskLCD+0x6c>
		  SSD1306_GotoXY (0, 0); // tells to write on first line
 8000e9c:	2100      	movs	r1, #0
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 f9c8 	bl	8001234 <SSD1306_GotoXY>
		  SSD1306_UpdateScreen();
 8000ea4:	f000 f920 	bl	80010e8 <SSD1306_UpdateScreen>
		  SSD1306_Puts ("ARMED    ", &Font_11x18, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4919      	ldr	r1, [pc, #100]	; (8000f10 <TaskLCD+0xa8>)
 8000eac:	481b      	ldr	r0, [pc, #108]	; (8000f1c <TaskLCD+0xb4>)
 8000eae:	f000 fa57 	bl	8001360 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000eb2:	f000 f919 	bl	80010e8 <SSD1306_UpdateScreen>
		  if(hasChanged == false){
 8000eb6:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <TaskLCD+0xb8>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	f083 0301 	eor.w	r3, r3, #1
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d014      	beq.n	8000eee <TaskLCD+0x86>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000ec4:	2120      	movs	r1, #32
 8000ec6:	4817      	ldr	r0, [pc, #92]	; (8000f24 <TaskLCD+0xbc>)
 8000ec8:	f000 ffe1 	bl	8001e8e <HAL_GPIO_TogglePin>
			  hasChanged = true;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <TaskLCD+0xb8>)
 8000ece:	2201      	movs	r2, #1
 8000ed0:	701a      	strb	r2, [r3, #0]
 8000ed2:	e00c      	b.n	8000eee <TaskLCD+0x86>
		  }
	  }
	  else{
		  SSD1306_GotoXY (0, 0); // tells to write on first line
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f000 f9ac 	bl	8001234 <SSD1306_GotoXY>
		  SSD1306_UpdateScreen();
 8000edc:	f000 f904 	bl	80010e8 <SSD1306_UpdateScreen>
		  SSD1306_Puts ("DISARMED  ", &Font_11x18, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	490b      	ldr	r1, [pc, #44]	; (8000f10 <TaskLCD+0xa8>)
 8000ee4:	4810      	ldr	r0, [pc, #64]	; (8000f28 <TaskLCD+0xc0>)
 8000ee6:	f000 fa3b 	bl	8001360 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000eea:	f000 f8fd 	bl	80010e8 <SSD1306_UpdateScreen>

	  // update code text
//	  if(strlen(codeDisplay) == 5){ // clears the display to ensure no leftover text (== 5 means only "Code:")
//		  SSD1306_Clear();
//	  }
	  SSD1306_GotoXY (0, 30); // tells to write on second line
 8000eee:	211e      	movs	r1, #30
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f99f 	bl	8001234 <SSD1306_GotoXY>
	  SSD1306_UpdateScreen();
 8000ef6:	f000 f8f7 	bl	80010e8 <SSD1306_UpdateScreen>
	  SSD1306_Puts (hold, &Font_11x18, 1); // displays '-' for every key pressed before '#'
 8000efa:	2201      	movs	r2, #1
 8000efc:	4904      	ldr	r1, [pc, #16]	; (8000f10 <TaskLCD+0xa8>)
 8000efe:	480b      	ldr	r0, [pc, #44]	; (8000f2c <TaskLCD+0xc4>)
 8000f00:	f000 fa2e 	bl	8001360 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8000f04:	f000 f8f0 	bl	80010e8 <SSD1306_UpdateScreen>
	  if(strlen(password) == 0){
 8000f08:	e7b2      	b.n	8000e70 <TaskLCD+0x8>
 8000f0a:	bf00      	nop
 8000f0c:	2000013c 	.word	0x2000013c
 8000f10:	20000000 	.word	0x20000000
 8000f14:	080078fc 	.word	0x080078fc
 8000f18:	20000142 	.word	0x20000142
 8000f1c:	08007908 	.word	0x08007908
 8000f20:	20000008 	.word	0x20000008
 8000f24:	40020000 	.word	0x40020000
 8000f28:	08007914 	.word	0x08007914
 8000f2c:	20000134 	.word	0x20000134

08000f30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a04      	ldr	r2, [pc, #16]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000f42:	f000 fcb9 	bl	80018b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000

08000f54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f58:	b672      	cpsid	i
}
 8000f5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <Error_Handler+0x8>
	...

08000f60 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f66:	f000 fa21 	bl	80013ac <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f6a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2178      	movs	r1, #120	; 0x78
 8000f72:	485b      	ldr	r0, [pc, #364]	; (80010e0 <SSD1306_Init+0x180>)
 8000f74:	f001 f9e8 	bl	8002348 <HAL_I2C_IsDeviceReady>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e0a9      	b.n	80010d6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8000f82:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8000f86:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f88:	e002      	b.n	8000f90 <SSD1306_Init+0x30>
		p--;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1f9      	bne.n	8000f8a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000f96:	22ae      	movs	r2, #174	; 0xae
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2078      	movs	r0, #120	; 0x78
 8000f9c:	f000 fa82 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8000fa0:	2220      	movs	r2, #32
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	2078      	movs	r0, #120	; 0x78
 8000fa6:	f000 fa7d 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000faa:	2210      	movs	r2, #16
 8000fac:	2100      	movs	r1, #0
 8000fae:	2078      	movs	r0, #120	; 0x78
 8000fb0:	f000 fa78 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fb4:	22b0      	movs	r2, #176	; 0xb0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2078      	movs	r0, #120	; 0x78
 8000fba:	f000 fa73 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fbe:	22c8      	movs	r2, #200	; 0xc8
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2078      	movs	r0, #120	; 0x78
 8000fc4:	f000 fa6e 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2100      	movs	r1, #0
 8000fcc:	2078      	movs	r0, #120	; 0x78
 8000fce:	f000 fa69 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000fd2:	2210      	movs	r2, #16
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	2078      	movs	r0, #120	; 0x78
 8000fd8:	f000 fa64 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000fdc:	2240      	movs	r2, #64	; 0x40
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2078      	movs	r0, #120	; 0x78
 8000fe2:	f000 fa5f 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000fe6:	2281      	movs	r2, #129	; 0x81
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2078      	movs	r0, #120	; 0x78
 8000fec:	f000 fa5a 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000ff0:	22ff      	movs	r2, #255	; 0xff
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	2078      	movs	r0, #120	; 0x78
 8000ff6:	f000 fa55 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000ffa:	22a1      	movs	r2, #161	; 0xa1
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	2078      	movs	r0, #120	; 0x78
 8001000:	f000 fa50 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001004:	22a6      	movs	r2, #166	; 0xa6
 8001006:	2100      	movs	r1, #0
 8001008:	2078      	movs	r0, #120	; 0x78
 800100a:	f000 fa4b 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800100e:	22a8      	movs	r2, #168	; 0xa8
 8001010:	2100      	movs	r1, #0
 8001012:	2078      	movs	r0, #120	; 0x78
 8001014:	f000 fa46 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001018:	223f      	movs	r2, #63	; 0x3f
 800101a:	2100      	movs	r1, #0
 800101c:	2078      	movs	r0, #120	; 0x78
 800101e:	f000 fa41 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001022:	22a4      	movs	r2, #164	; 0xa4
 8001024:	2100      	movs	r1, #0
 8001026:	2078      	movs	r0, #120	; 0x78
 8001028:	f000 fa3c 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800102c:	22d3      	movs	r2, #211	; 0xd3
 800102e:	2100      	movs	r1, #0
 8001030:	2078      	movs	r0, #120	; 0x78
 8001032:	f000 fa37 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2078      	movs	r0, #120	; 0x78
 800103c:	f000 fa32 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001040:	22d5      	movs	r2, #213	; 0xd5
 8001042:	2100      	movs	r1, #0
 8001044:	2078      	movs	r0, #120	; 0x78
 8001046:	f000 fa2d 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800104a:	22f0      	movs	r2, #240	; 0xf0
 800104c:	2100      	movs	r1, #0
 800104e:	2078      	movs	r0, #120	; 0x78
 8001050:	f000 fa28 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001054:	22d9      	movs	r2, #217	; 0xd9
 8001056:	2100      	movs	r1, #0
 8001058:	2078      	movs	r0, #120	; 0x78
 800105a:	f000 fa23 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800105e:	2222      	movs	r2, #34	; 0x22
 8001060:	2100      	movs	r1, #0
 8001062:	2078      	movs	r0, #120	; 0x78
 8001064:	f000 fa1e 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001068:	22da      	movs	r2, #218	; 0xda
 800106a:	2100      	movs	r1, #0
 800106c:	2078      	movs	r0, #120	; 0x78
 800106e:	f000 fa19 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001072:	2212      	movs	r2, #18
 8001074:	2100      	movs	r1, #0
 8001076:	2078      	movs	r0, #120	; 0x78
 8001078:	f000 fa14 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800107c:	22db      	movs	r2, #219	; 0xdb
 800107e:	2100      	movs	r1, #0
 8001080:	2078      	movs	r0, #120	; 0x78
 8001082:	f000 fa0f 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001086:	2220      	movs	r2, #32
 8001088:	2100      	movs	r1, #0
 800108a:	2078      	movs	r0, #120	; 0x78
 800108c:	f000 fa0a 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001090:	228d      	movs	r2, #141	; 0x8d
 8001092:	2100      	movs	r1, #0
 8001094:	2078      	movs	r0, #120	; 0x78
 8001096:	f000 fa05 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800109a:	2214      	movs	r2, #20
 800109c:	2100      	movs	r1, #0
 800109e:	2078      	movs	r0, #120	; 0x78
 80010a0:	f000 fa00 	bl	80014a4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010a4:	22af      	movs	r2, #175	; 0xaf
 80010a6:	2100      	movs	r1, #0
 80010a8:	2078      	movs	r0, #120	; 0x78
 80010aa:	f000 f9fb 	bl	80014a4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010ae:	222e      	movs	r2, #46	; 0x2e
 80010b0:	2100      	movs	r1, #0
 80010b2:	2078      	movs	r0, #120	; 0x78
 80010b4:	f000 f9f6 	bl	80014a4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f843 	bl	8001144 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 80010be:	f000 f813 	bl	80010e8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80010c2:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <SSD1306_Init+0x184>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <SSD1306_Init+0x184>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010ce:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <SSD1306_Init+0x184>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80010d4:	2301      	movs	r3, #1
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	2000008c 	.word	0x2000008c
 80010e4:	20000550 	.word	0x20000550

080010e8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e01d      	b.n	8001130 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	3b50      	subs	r3, #80	; 0x50
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	461a      	mov	r2, r3
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 f9d0 	bl	80014a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 f9cb 	bl	80014a4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800110e:	2210      	movs	r2, #16
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 f9c6 	bl	80014a4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	01db      	lsls	r3, r3, #7
 800111c:	4a08      	ldr	r2, [pc, #32]	; (8001140 <SSD1306_UpdateScreen+0x58>)
 800111e:	441a      	add	r2, r3
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	2140      	movs	r1, #64	; 0x40
 8001124:	2078      	movs	r0, #120	; 0x78
 8001126:	f000 f957 	bl	80013d8 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	3301      	adds	r3, #1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b07      	cmp	r3, #7
 8001134:	d9de      	bls.n	80010f4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001136:	bf00      	nop
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	20000150 	.word	0x20000150

08001144 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d101      	bne.n	8001158 <SSD1306_Fill+0x14>
 8001154:	2300      	movs	r3, #0
 8001156:	e000      	b.n	800115a <SSD1306_Fill+0x16>
 8001158:	23ff      	movs	r3, #255	; 0xff
 800115a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115e:	4619      	mov	r1, r3
 8001160:	4803      	ldr	r0, [pc, #12]	; (8001170 <SSD1306_Fill+0x2c>)
 8001162:	f005 ff1d 	bl	8006fa0 <memset>
}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000150 	.word	0x20000150

08001174 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	80fb      	strh	r3, [r7, #6]
 800117e:	460b      	mov	r3, r1
 8001180:	80bb      	strh	r3, [r7, #4]
 8001182:	4613      	mov	r3, r2
 8001184:	70fb      	strb	r3, [r7, #3]
	if (
 8001186:	88fb      	ldrh	r3, [r7, #6]
 8001188:	2b7f      	cmp	r3, #127	; 0x7f
 800118a:	d848      	bhi.n	800121e <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800118c:	88bb      	ldrh	r3, [r7, #4]
 800118e:	2b3f      	cmp	r3, #63	; 0x3f
 8001190:	d845      	bhi.n	800121e <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001192:	4b26      	ldr	r3, [pc, #152]	; (800122c <SSD1306_DrawPixel+0xb8>)
 8001194:	791b      	ldrb	r3, [r3, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d006      	beq.n	80011a8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	bf0c      	ite	eq
 80011a0:	2301      	moveq	r3, #1
 80011a2:	2300      	movne	r3, #0
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d11a      	bne.n	80011e4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011ae:	88fa      	ldrh	r2, [r7, #6]
 80011b0:	88bb      	ldrh	r3, [r7, #4]
 80011b2:	08db      	lsrs	r3, r3, #3
 80011b4:	b298      	uxth	r0, r3
 80011b6:	4603      	mov	r3, r0
 80011b8:	01db      	lsls	r3, r3, #7
 80011ba:	4413      	add	r3, r2
 80011bc:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <SSD1306_DrawPixel+0xbc>)
 80011be:	5cd3      	ldrb	r3, [r2, r3]
 80011c0:	b25a      	sxtb	r2, r3
 80011c2:	88bb      	ldrh	r3, [r7, #4]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	2101      	movs	r1, #1
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	b25b      	sxtb	r3, r3
 80011d0:	4313      	orrs	r3, r2
 80011d2:	b259      	sxtb	r1, r3
 80011d4:	88fa      	ldrh	r2, [r7, #6]
 80011d6:	4603      	mov	r3, r0
 80011d8:	01db      	lsls	r3, r3, #7
 80011da:	4413      	add	r3, r2
 80011dc:	b2c9      	uxtb	r1, r1
 80011de:	4a14      	ldr	r2, [pc, #80]	; (8001230 <SSD1306_DrawPixel+0xbc>)
 80011e0:	54d1      	strb	r1, [r2, r3]
 80011e2:	e01d      	b.n	8001220 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	08db      	lsrs	r3, r3, #3
 80011ea:	b298      	uxth	r0, r3
 80011ec:	4603      	mov	r3, r0
 80011ee:	01db      	lsls	r3, r3, #7
 80011f0:	4413      	add	r3, r2
 80011f2:	4a0f      	ldr	r2, [pc, #60]	; (8001230 <SSD1306_DrawPixel+0xbc>)
 80011f4:	5cd3      	ldrb	r3, [r2, r3]
 80011f6:	b25a      	sxtb	r2, r3
 80011f8:	88bb      	ldrh	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	b25b      	sxtb	r3, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	b25b      	sxtb	r3, r3
 800120a:	4013      	ands	r3, r2
 800120c:	b259      	sxtb	r1, r3
 800120e:	88fa      	ldrh	r2, [r7, #6]
 8001210:	4603      	mov	r3, r0
 8001212:	01db      	lsls	r3, r3, #7
 8001214:	4413      	add	r3, r2
 8001216:	b2c9      	uxtb	r1, r1
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <SSD1306_DrawPixel+0xbc>)
 800121a:	54d1      	strb	r1, [r2, r3]
 800121c:	e000      	b.n	8001220 <SSD1306_DrawPixel+0xac>
		return;
 800121e:	bf00      	nop
	}
}
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000550 	.word	0x20000550
 8001230:	20000150 	.word	0x20000150

08001234 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	460a      	mov	r2, r1
 800123e:	80fb      	strh	r3, [r7, #6]
 8001240:	4613      	mov	r3, r2
 8001242:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001244:	4a05      	ldr	r2, [pc, #20]	; (800125c <SSD1306_GotoXY+0x28>)
 8001246:	88fb      	ldrh	r3, [r7, #6]
 8001248:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <SSD1306_GotoXY+0x28>)
 800124c:	88bb      	ldrh	r3, [r7, #4]
 800124e:	8053      	strh	r3, [r2, #2]
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	20000550 	.word	0x20000550

08001260 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	4603      	mov	r3, r0
 8001268:	6039      	str	r1, [r7, #0]
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	4613      	mov	r3, r2
 800126e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001270:	4b3a      	ldr	r3, [pc, #232]	; (800135c <SSD1306_Putc+0xfc>)
 8001272:	881b      	ldrh	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
	if (
 800127c:	2b7f      	cmp	r3, #127	; 0x7f
 800127e:	dc07      	bgt.n	8001290 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001280:	4b36      	ldr	r3, [pc, #216]	; (800135c <SSD1306_Putc+0xfc>)
 8001282:	885b      	ldrh	r3, [r3, #2]
 8001284:	461a      	mov	r2, r3
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	785b      	ldrb	r3, [r3, #1]
 800128a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800128c:	2b3f      	cmp	r3, #63	; 0x3f
 800128e:	dd01      	ble.n	8001294 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001290:	2300      	movs	r3, #0
 8001292:	e05e      	b.n	8001352 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	e04b      	b.n	8001332 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685a      	ldr	r2, [r3, #4]
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	3b20      	subs	r3, #32
 80012a2:	6839      	ldr	r1, [r7, #0]
 80012a4:	7849      	ldrb	r1, [r1, #1]
 80012a6:	fb01 f303 	mul.w	r3, r1, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	440b      	add	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	4413      	add	r3, r2
 80012b4:	881b      	ldrh	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
 80012bc:	e030      	b.n	8001320 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d010      	beq.n	80012f0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012ce:	4b23      	ldr	r3, [pc, #140]	; (800135c <SSD1306_Putc+0xfc>)
 80012d0:	881a      	ldrh	r2, [r3, #0]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	4413      	add	r3, r2
 80012d8:	b298      	uxth	r0, r3
 80012da:	4b20      	ldr	r3, [pc, #128]	; (800135c <SSD1306_Putc+0xfc>)
 80012dc:	885a      	ldrh	r2, [r3, #2]
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	4413      	add	r3, r2
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	79ba      	ldrb	r2, [r7, #6]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f7ff ff43 	bl	8001174 <SSD1306_DrawPixel>
 80012ee:	e014      	b.n	800131a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <SSD1306_Putc+0xfc>)
 80012f2:	881a      	ldrh	r2, [r3, #0]
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4413      	add	r3, r2
 80012fa:	b298      	uxth	r0, r3
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <SSD1306_Putc+0xfc>)
 80012fe:	885a      	ldrh	r2, [r3, #2]
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	b29b      	uxth	r3, r3
 8001304:	4413      	add	r3, r2
 8001306:	b299      	uxth	r1, r3
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	461a      	mov	r2, r3
 8001316:	f7ff ff2d 	bl	8001174 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	3301      	adds	r3, #1
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4293      	cmp	r3, r2
 800132a:	d3c8      	bcc.n	80012be <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	785b      	ldrb	r3, [r3, #1]
 8001336:	461a      	mov	r2, r3
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	4293      	cmp	r3, r2
 800133c:	d3ad      	bcc.n	800129a <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <SSD1306_Putc+0xfc>)
 8001340:	881a      	ldrh	r2, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	b29b      	uxth	r3, r3
 8001348:	4413      	add	r3, r2
 800134a:	b29a      	uxth	r2, r3
 800134c:	4b03      	ldr	r3, [pc, #12]	; (800135c <SSD1306_Putc+0xfc>)
 800134e:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 8001350:	79fb      	ldrb	r3, [r7, #7]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20000550 	.word	0x20000550

08001360 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	4613      	mov	r3, r2
 800136c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800136e:	e012      	b.n	8001396 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	68b9      	ldr	r1, [r7, #8]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff71 	bl	8001260 <SSD1306_Putc>
 800137e:	4603      	mov	r3, r0
 8001380:	461a      	mov	r2, r3
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	429a      	cmp	r2, r3
 8001388:	d002      	beq.n	8001390 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	e008      	b.n	80013a2 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1e8      	bne.n	8001370 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	781b      	ldrb	r3, [r3, #0]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <ssd1306_I2C_Init+0x28>)
 80013b4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013b6:	e002      	b.n	80013be <ssd1306_I2C_Init+0x12>
		p--;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f9      	bne.n	80013b8 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	0003d090 	.word	0x0003d090

080013d8 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b0c7      	sub	sp, #284	; 0x11c
 80013dc:	af02      	add	r7, sp, #8
 80013de:	4604      	mov	r4, r0
 80013e0:	4608      	mov	r0, r1
 80013e2:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80013e6:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80013ea:	600a      	str	r2, [r1, #0]
 80013ec:	4619      	mov	r1, r3
 80013ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80013f6:	4622      	mov	r2, r4
 80013f8:	701a      	strb	r2, [r3, #0]
 80013fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80013fe:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001402:	4602      	mov	r2, r0
 8001404:	701a      	strb	r2, [r3, #0]
 8001406:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800140a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800140e:	460a      	mov	r2, r1
 8001410:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001412:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001416:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800141a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800141e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001422:	7812      	ldrb	r2, [r2, #0]
 8001424:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001426:	2300      	movs	r3, #0
 8001428:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800142c:	e015      	b.n	800145a <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800142e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001432:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001436:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	441a      	add	r2, r3
 800143e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001442:	3301      	adds	r3, #1
 8001444:	7811      	ldrb	r1, [r2, #0]
 8001446:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800144a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800144e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001450:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001454:	3301      	adds	r3, #1
 8001456:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800145a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800145e:	b29b      	uxth	r3, r3
 8001460:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001464:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001468:	8812      	ldrh	r2, [r2, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d8df      	bhi.n	800142e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800146e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001472:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	b299      	uxth	r1, r3
 800147a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800147e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	3301      	adds	r3, #1
 8001486:	b29b      	uxth	r3, r3
 8001488:	f107 020c 	add.w	r2, r7, #12
 800148c:	200a      	movs	r0, #10
 800148e:	9000      	str	r0, [sp, #0]
 8001490:	4803      	ldr	r0, [pc, #12]	; (80014a0 <ssd1306_I2C_WriteMulti+0xc8>)
 8001492:	f000 fe5b 	bl	800214c <HAL_I2C_Master_Transmit>
}
 8001496:	bf00      	nop
 8001498:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	2000008c 	.word	0x2000008c

080014a4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af02      	add	r7, sp, #8
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
 80014ae:	460b      	mov	r3, r1
 80014b0:	71bb      	strb	r3, [r7, #6]
 80014b2:	4613      	mov	r3, r2
 80014b4:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80014b6:	79bb      	ldrb	r3, [r7, #6]
 80014b8:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80014ba:	797b      	ldrb	r3, [r7, #5]
 80014bc:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	b299      	uxth	r1, r3
 80014c2:	f107 020c 	add.w	r2, r7, #12
 80014c6:	230a      	movs	r3, #10
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2302      	movs	r3, #2
 80014cc:	4803      	ldr	r0, [pc, #12]	; (80014dc <ssd1306_I2C_Write+0x38>)
 80014ce:	f000 fe3d 	bl	800214c <HAL_I2C_Master_Transmit>
}
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	2000008c 	.word	0x2000008c

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <HAL_MspInit+0x54>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a11      	ldr	r2, [pc, #68]	; (8001534 <HAL_MspInit+0x54>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <HAL_MspInit+0x54>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	603b      	str	r3, [r7, #0]
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <HAL_MspInit+0x54>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a0a      	ldr	r2, [pc, #40]	; (8001534 <HAL_MspInit+0x54>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_MspInit+0x54>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151e:	2200      	movs	r2, #0
 8001520:	210f      	movs	r1, #15
 8001522:	f06f 0001 	mvn.w	r0, #1
 8001526:	f000 fac3 	bl	8001ab0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40023800 	.word	0x40023800

08001538 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b08a      	sub	sp, #40	; 0x28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a19      	ldr	r2, [pc, #100]	; (80015bc <HAL_I2C_MspInit+0x84>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d12c      	bne.n	80015b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	613b      	str	r3, [r7, #16]
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 8001564:	f043 0302 	orr.w	r3, r3, #2
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001576:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800157a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800157c:	2312      	movs	r3, #18
 800157e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001580:	2300      	movs	r3, #0
 8001582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001584:	2303      	movs	r3, #3
 8001586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001588:	2304      	movs	r3, #4
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	4619      	mov	r1, r3
 8001592:	480c      	ldr	r0, [pc, #48]	; (80015c4 <HAL_I2C_MspInit+0x8c>)
 8001594:	f000 fab6 	bl	8001b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001598:	2300      	movs	r3, #0
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 800159e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a0:	4a07      	ldr	r2, [pc, #28]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 80015a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015a6:	6413      	str	r3, [r2, #64]	; 0x40
 80015a8:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <HAL_I2C_MspInit+0x88>)
 80015aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80015b4:	bf00      	nop
 80015b6:	3728      	adds	r7, #40	; 0x28
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40005400 	.word	0x40005400
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40020400 	.word	0x40020400

080015c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a19      	ldr	r2, [pc, #100]	; (800164c <HAL_UART_MspInit+0x84>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d12b      	bne.n	8001642 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0x88>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0x88>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a10      	ldr	r2, [pc, #64]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_MspInit+0x88>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001622:	230c      	movs	r3, #12
 8001624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001626:	2302      	movs	r3, #2
 8001628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	f107 0314 	add.w	r3, r7, #20
 800163a:	4619      	mov	r1, r3
 800163c:	4805      	ldr	r0, [pc, #20]	; (8001654 <HAL_UART_MspInit+0x8c>)
 800163e:	f000 fa61 	bl	8001b04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001642:	bf00      	nop
 8001644:	3728      	adds	r7, #40	; 0x28
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004400 	.word	0x40004400
 8001650:	40023800 	.word	0x40023800
 8001654:	40020000 	.word	0x40020000

08001658 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08e      	sub	sp, #56	; 0x38
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001664:	2300      	movs	r3, #0
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b33      	ldr	r3, [pc, #204]	; (800173c <HAL_InitTick+0xe4>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a32      	ldr	r2, [pc, #200]	; (800173c <HAL_InitTick+0xe4>)
 8001672:	f043 0310 	orr.w	r3, r3, #16
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	4b30      	ldr	r3, [pc, #192]	; (800173c <HAL_InitTick+0xe4>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001684:	f107 0210 	add.w	r2, r7, #16
 8001688:	f107 0314 	add.w	r3, r7, #20
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f001 fafe 	bl	8002c90 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800169a:	2b00      	cmp	r3, #0
 800169c:	d103      	bne.n	80016a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800169e:	f001 facf 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80016a2:	6378      	str	r0, [r7, #52]	; 0x34
 80016a4:	e004      	b.n	80016b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016a6:	f001 facb 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 80016aa:	4603      	mov	r3, r0
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_InitTick+0xe8>)
 80016b4:	fba2 2303 	umull	r2, r3, r2, r3
 80016b8:	0c9b      	lsrs	r3, r3, #18
 80016ba:	3b01      	subs	r3, #1
 80016bc:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <HAL_InitTick+0xec>)
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <HAL_InitTick+0xf0>)
 80016c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_InitTick+0xec>)
 80016c6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016cc:	4a1d      	ldr	r2, [pc, #116]	; (8001744 <HAL_InitTick+0xec>)
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <HAL_InitTick+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <HAL_InitTick+0xec>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <HAL_InitTick+0xec>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016e4:	4817      	ldr	r0, [pc, #92]	; (8001744 <HAL_InitTick+0xec>)
 80016e6:	f001 ffd3 	bl	8003690 <HAL_TIM_Base_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d11b      	bne.n	8001730 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016f8:	4812      	ldr	r0, [pc, #72]	; (8001744 <HAL_InitTick+0xec>)
 80016fa:	f002 f823 	bl	8003744 <HAL_TIM_Base_Start_IT>
 80016fe:	4603      	mov	r3, r0
 8001700:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001704:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001708:	2b00      	cmp	r3, #0
 800170a:	d111      	bne.n	8001730 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800170c:	2036      	movs	r0, #54	; 0x36
 800170e:	f000 f9eb 	bl	8001ae8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b0f      	cmp	r3, #15
 8001716:	d808      	bhi.n	800172a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001718:	2200      	movs	r2, #0
 800171a:	6879      	ldr	r1, [r7, #4]
 800171c:	2036      	movs	r0, #54	; 0x36
 800171e:	f000 f9c7 	bl	8001ab0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <HAL_InitTick+0xf4>)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	e002      	b.n	8001730 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001730:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001734:	4618      	mov	r0, r3
 8001736:	3738      	adds	r7, #56	; 0x38
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40023800 	.word	0x40023800
 8001740:	431bde83 	.word	0x431bde83
 8001744:	20000558 	.word	0x20000558
 8001748:	40001000 	.word	0x40001000
 800174c:	20000010 	.word	0x20000010

08001750 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001754:	e7fe      	b.n	8001754 <NMI_Handler+0x4>

08001756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800175a:	e7fe      	b.n	800175a <HardFault_Handler+0x4>

0800175c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001760:	e7fe      	b.n	8001760 <MemManage_Handler+0x4>

08001762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler+0x4>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800176c:	e7fe      	b.n	800176c <UsageFault_Handler+0x4>

0800176e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176e:	b480      	push	{r7}
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001772:	bf00      	nop
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001780:	4802      	ldr	r0, [pc, #8]	; (800178c <TIM6_DAC_IRQHandler+0x10>)
 8001782:	f002 f84f 	bl	8003824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20000558 	.word	0x20000558

08001790 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <_sbrk+0x5c>)
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <_sbrk+0x60>)
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a4:	4b13      	ldr	r3, [pc, #76]	; (80017f4 <_sbrk+0x64>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d102      	bne.n	80017b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017ac:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <_sbrk+0x64>)
 80017ae:	4a12      	ldr	r2, [pc, #72]	; (80017f8 <_sbrk+0x68>)
 80017b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017b2:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <_sbrk+0x64>)
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c0:	f005 fbf6 	bl	8006fb0 <__errno>
 80017c4:	4603      	mov	r3, r0
 80017c6:	220c      	movs	r2, #12
 80017c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017ce:	e009      	b.n	80017e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <_sbrk+0x64>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <_sbrk+0x64>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4413      	add	r3, r2
 80017de:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <_sbrk+0x64>)
 80017e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017e2:	68fb      	ldr	r3, [r7, #12]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	20020000 	.word	0x20020000
 80017f0:	00000400 	.word	0x00000400
 80017f4:	200005a0 	.word	0x200005a0
 80017f8:	20005040 	.word	0x20005040

080017fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001800:	4b06      	ldr	r3, [pc, #24]	; (800181c <SystemInit+0x20>)
 8001802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001806:	4a05      	ldr	r2, [pc, #20]	; (800181c <SystemInit+0x20>)
 8001808:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800180c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	e000ed00 	.word	0xe000ed00

08001820 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001820:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001858 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001824:	f7ff ffea 	bl	80017fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800182a:	490d      	ldr	r1, [pc, #52]	; (8001860 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800182c:	4a0d      	ldr	r2, [pc, #52]	; (8001864 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001830:	e002      	b.n	8001838 <LoopCopyDataInit>

08001832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001836:	3304      	adds	r3, #4

08001838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800183c:	d3f9      	bcc.n	8001832 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800183e:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001840:	4c0a      	ldr	r4, [pc, #40]	; (800186c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001844:	e001      	b.n	800184a <LoopFillZerobss>

08001846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001848:	3204      	adds	r2, #4

0800184a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800184c:	d3fb      	bcc.n	8001846 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800184e:	f005 fbb5 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001852:	f7ff f873 	bl	800093c <main>
  bx  lr    
 8001856:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001858:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800185c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001860:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001864:	0800875c 	.word	0x0800875c
  ldr r2, =_sbss
 8001868:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800186c:	20005040 	.word	0x20005040

08001870 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001870:	e7fe      	b.n	8001870 <ADC_IRQHandler>
	...

08001874 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001878:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <HAL_Init+0x40>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a0d      	ldr	r2, [pc, #52]	; (80018b4 <HAL_Init+0x40>)
 800187e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001882:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001884:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <HAL_Init+0x40>)
 800188a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001890:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_Init+0x40>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800189c:	2003      	movs	r0, #3
 800189e:	f000 f8fc 	bl	8001a9a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018a2:	2000      	movs	r0, #0
 80018a4:	f7ff fed8 	bl	8001658 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018a8:	f7ff fe1a 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40023c00 	.word	0x40023c00

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	; (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000014 	.word	0x20000014
 80018dc:	200005a4 	.word	0x200005a4

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	200005a4 	.word	0x200005a4

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000014 	.word	0x20000014

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	; (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	; (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	; (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	; (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	; (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	; 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	; 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff4c 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac2:	f7ff ff61 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001ac6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	68b9      	ldr	r1, [r7, #8]
 8001acc:	6978      	ldr	r0, [r7, #20]
 8001ace:	f7ff ffb1 	bl	8001a34 <NVIC_EncodePriority>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad8:	4611      	mov	r1, r2
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff ff80 	bl	80019e0 <__NVIC_SetPriority>
}
 8001ae0:	bf00      	nop
 8001ae2:	3718      	adds	r7, #24
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff54 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b12:	2300      	movs	r3, #0
 8001b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b16:	2300      	movs	r3, #0
 8001b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	e165      	b.n	8001dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b20:	2201      	movs	r2, #1
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	697a      	ldr	r2, [r7, #20]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	f040 8154 	bne.w	8001de6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d005      	beq.n	8001b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d130      	bne.n	8001bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	2203      	movs	r2, #3
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	091b      	lsrs	r3, r3, #4
 8001ba2:	f003 0201 	and.w	r2, r3, #1
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 0303 	and.w	r3, r3, #3
 8001bc0:	2b03      	cmp	r3, #3
 8001bc2:	d017      	beq.n	8001bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	005b      	lsls	r3, r3, #1
 8001bce:	2203      	movs	r2, #3
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d123      	bne.n	8001c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	f003 0307 	and.w	r3, r3, #7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	220f      	movs	r2, #15
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	691a      	ldr	r2, [r3, #16]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	08da      	lsrs	r2, r3, #3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	3208      	adds	r2, #8
 8001c42:	69b9      	ldr	r1, [r7, #24]
 8001c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ae 	beq.w	8001de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c92:	4a5c      	ldr	r2, [pc, #368]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c98:	6453      	str	r3, [r2, #68]	; 0x44
 8001c9a:	4b5a      	ldr	r3, [pc, #360]	; (8001e04 <HAL_GPIO_Init+0x300>)
 8001c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ca6:	4a58      	ldr	r2, [pc, #352]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	089b      	lsrs	r3, r3, #2
 8001cac:	3302      	adds	r3, #2
 8001cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a4f      	ldr	r2, [pc, #316]	; (8001e0c <HAL_GPIO_Init+0x308>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d025      	beq.n	8001d1e <HAL_GPIO_Init+0x21a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a4e      	ldr	r2, [pc, #312]	; (8001e10 <HAL_GPIO_Init+0x30c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d01f      	beq.n	8001d1a <HAL_GPIO_Init+0x216>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	; (8001e14 <HAL_GPIO_Init+0x310>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d019      	beq.n	8001d16 <HAL_GPIO_Init+0x212>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a4c      	ldr	r2, [pc, #304]	; (8001e18 <HAL_GPIO_Init+0x314>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d013      	beq.n	8001d12 <HAL_GPIO_Init+0x20e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4b      	ldr	r2, [pc, #300]	; (8001e1c <HAL_GPIO_Init+0x318>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d00d      	beq.n	8001d0e <HAL_GPIO_Init+0x20a>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4a      	ldr	r2, [pc, #296]	; (8001e20 <HAL_GPIO_Init+0x31c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d007      	beq.n	8001d0a <HAL_GPIO_Init+0x206>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a49      	ldr	r2, [pc, #292]	; (8001e24 <HAL_GPIO_Init+0x320>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d101      	bne.n	8001d06 <HAL_GPIO_Init+0x202>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00c      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00a      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	e008      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d0e:	2304      	movs	r3, #4
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d12:	2303      	movs	r3, #3
 8001d14:	e004      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d16:	2302      	movs	r3, #2
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e000      	b.n	8001d20 <HAL_GPIO_Init+0x21c>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	f002 0203 	and.w	r2, r2, #3
 8001d26:	0092      	lsls	r2, r2, #2
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d30:	4935      	ldr	r1, [pc, #212]	; (8001e08 <HAL_GPIO_Init+0x304>)
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3e:	4b3a      	ldr	r3, [pc, #232]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d62:	4a31      	ldr	r2, [pc, #196]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d68:	4b2f      	ldr	r3, [pc, #188]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d8c:	4a26      	ldr	r2, [pc, #152]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d92:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db6:	4a1c      	ldr	r2, [pc, #112]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d003      	beq.n	8001de0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_GPIO_Init+0x324>)
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	3301      	adds	r3, #1
 8001dea:	61fb      	str	r3, [r7, #28]
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	2b0f      	cmp	r3, #15
 8001df0:	f67f ae96 	bls.w	8001b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001df4:	bf00      	nop
 8001df6:	bf00      	nop
 8001df8:	3724      	adds	r7, #36	; 0x24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40013800 	.word	0x40013800
 8001e0c:	40020000 	.word	0x40020000
 8001e10:	40020400 	.word	0x40020400
 8001e14:	40020800 	.word	0x40020800
 8001e18:	40020c00 	.word	0x40020c00
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40021400 	.word	0x40021400
 8001e24:	40021800 	.word	0x40021800
 8001e28:	40013c00 	.word	0x40013c00

08001e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691a      	ldr	r2, [r3, #16]
 8001e3c:	887b      	ldrh	r3, [r7, #2]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d002      	beq.n	8001e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e44:	2301      	movs	r3, #1
 8001e46:	73fb      	strb	r3, [r7, #15]
 8001e48:	e001      	b.n	8001e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	460b      	mov	r3, r1
 8001e66:	807b      	strh	r3, [r7, #2]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e6c:	787b      	ldrb	r3, [r7, #1]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e72:	887a      	ldrh	r2, [r7, #2]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e7a:	887b      	ldrh	r3, [r7, #2]
 8001e7c:	041a      	lsls	r2, r3, #16
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	619a      	str	r2, [r3, #24]
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b085      	sub	sp, #20
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ea0:	887a      	ldrh	r2, [r7, #2]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	041a      	lsls	r2, r3, #16
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	887b      	ldrh	r3, [r7, #2]
 8001eae:	400b      	ands	r3, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	619a      	str	r2, [r3, #24]
}
 8001eb6:	bf00      	nop
 8001eb8:	3714      	adds	r7, #20
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e12b      	b.n	800212e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d106      	bne.n	8001ef0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff fb24 	bl	8001538 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2224      	movs	r2, #36	; 0x24
 8001ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f28:	f000 fe8a 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8001f2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	4a81      	ldr	r2, [pc, #516]	; (8002138 <HAL_I2C_Init+0x274>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d807      	bhi.n	8001f48 <HAL_I2C_Init+0x84>
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	4a80      	ldr	r2, [pc, #512]	; (800213c <HAL_I2C_Init+0x278>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	bf94      	ite	ls
 8001f40:	2301      	movls	r3, #1
 8001f42:	2300      	movhi	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	e006      	b.n	8001f56 <HAL_I2C_Init+0x92>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4a7d      	ldr	r2, [pc, #500]	; (8002140 <HAL_I2C_Init+0x27c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	bf94      	ite	ls
 8001f50:	2301      	movls	r3, #1
 8001f52:	2300      	movhi	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e0e7      	b.n	800212e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	4a78      	ldr	r2, [pc, #480]	; (8002144 <HAL_I2C_Init+0x280>)
 8001f62:	fba2 2303 	umull	r2, r3, r2, r3
 8001f66:	0c9b      	lsrs	r3, r3, #18
 8001f68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	4a6a      	ldr	r2, [pc, #424]	; (8002138 <HAL_I2C_Init+0x274>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d802      	bhi.n	8001f98 <HAL_I2C_Init+0xd4>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	3301      	adds	r3, #1
 8001f96:	e009      	b.n	8001fac <HAL_I2C_Init+0xe8>
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f9e:	fb02 f303 	mul.w	r3, r2, r3
 8001fa2:	4a69      	ldr	r2, [pc, #420]	; (8002148 <HAL_I2C_Init+0x284>)
 8001fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	3301      	adds	r3, #1
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	430b      	orrs	r3, r1
 8001fb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001fbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	495c      	ldr	r1, [pc, #368]	; (8002138 <HAL_I2C_Init+0x274>)
 8001fc8:	428b      	cmp	r3, r1
 8001fca:	d819      	bhi.n	8002000 <HAL_I2C_Init+0x13c>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	1e59      	subs	r1, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fda:	1c59      	adds	r1, r3, #1
 8001fdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001fe0:	400b      	ands	r3, r1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <HAL_I2C_Init+0x138>
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1e59      	subs	r1, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ffa:	e051      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e04f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d111      	bne.n	800202c <HAL_I2C_Init+0x168>
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	1e58      	subs	r0, r3, #1
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6859      	ldr	r1, [r3, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	fbb0 f3f3 	udiv	r3, r0, r3
 800201a:	3301      	adds	r3, #1
 800201c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002020:	2b00      	cmp	r3, #0
 8002022:	bf0c      	ite	eq
 8002024:	2301      	moveq	r3, #1
 8002026:	2300      	movne	r3, #0
 8002028:	b2db      	uxtb	r3, r3
 800202a:	e012      	b.n	8002052 <HAL_I2C_Init+0x18e>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	1e58      	subs	r0, r3, #1
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6859      	ldr	r1, [r3, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	0099      	lsls	r1, r3, #2
 800203c:	440b      	add	r3, r1
 800203e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002042:	3301      	adds	r3, #1
 8002044:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf0c      	ite	eq
 800204c:	2301      	moveq	r3, #1
 800204e:	2300      	movne	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <HAL_I2C_Init+0x196>
 8002056:	2301      	movs	r3, #1
 8002058:	e022      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d10e      	bne.n	8002080 <HAL_I2C_Init+0x1bc>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e58      	subs	r0, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6859      	ldr	r1, [r3, #4]
 800206a:	460b      	mov	r3, r1
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	440b      	add	r3, r1
 8002070:	fbb0 f3f3 	udiv	r3, r0, r3
 8002074:	3301      	adds	r3, #1
 8002076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800207e:	e00f      	b.n	80020a0 <HAL_I2C_Init+0x1dc>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e58      	subs	r0, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6859      	ldr	r1, [r3, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	0099      	lsls	r1, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	6809      	ldr	r1, [r1, #0]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	431a      	orrs	r2, r3
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80020ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6911      	ldr	r1, [r2, #16]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68d2      	ldr	r2, [r2, #12]
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695a      	ldr	r2, [r3, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f042 0201 	orr.w	r2, r2, #1
 800210e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	000186a0 	.word	0x000186a0
 800213c:	001e847f 	.word	0x001e847f
 8002140:	003d08ff 	.word	0x003d08ff
 8002144:	431bde83 	.word	0x431bde83
 8002148:	10624dd3 	.word	0x10624dd3

0800214c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b088      	sub	sp, #32
 8002150:	af02      	add	r7, sp, #8
 8002152:	60f8      	str	r0, [r7, #12]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	461a      	mov	r2, r3
 8002158:	460b      	mov	r3, r1
 800215a:	817b      	strh	r3, [r7, #10]
 800215c:	4613      	mov	r3, r2
 800215e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff fbbe 	bl	80018e0 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b20      	cmp	r3, #32
 8002170:	f040 80e0 	bne.w	8002334 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	2319      	movs	r3, #25
 800217a:	2201      	movs	r2, #1
 800217c:	4970      	ldr	r1, [pc, #448]	; (8002340 <HAL_I2C_Master_Transmit+0x1f4>)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f000 fa92 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	e0d3      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_I2C_Master_Transmit+0x50>
 8002198:	2302      	movs	r3, #2
 800219a:	e0cc      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0301 	and.w	r3, r3, #1
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d007      	beq.n	80021c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f042 0201 	orr.w	r2, r2, #1
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2221      	movs	r2, #33	; 0x21
 80021d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2210      	movs	r2, #16
 80021de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	2200      	movs	r2, #0
 80021e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	893a      	ldrh	r2, [r7, #8]
 80021f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4a50      	ldr	r2, [pc, #320]	; (8002344 <HAL_I2C_Master_Transmit+0x1f8>)
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002204:	8979      	ldrh	r1, [r7, #10]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	6a3a      	ldr	r2, [r7, #32]
 800220a:	68f8      	ldr	r0, [r7, #12]
 800220c:	f000 f9ca 	bl	80025a4 <I2C_MasterRequestWrite>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e08d      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	613b      	str	r3, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	613b      	str	r3, [r7, #16]
 800222e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002230:	e066      	b.n	8002300 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	6a39      	ldr	r1, [r7, #32]
 8002236:	68f8      	ldr	r0, [r7, #12]
 8002238:	f000 fb50 	bl	80028dc <I2C_WaitOnTXEFlagUntilTimeout>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00d      	beq.n	800225e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	2b04      	cmp	r3, #4
 8002248:	d107      	bne.n	800225a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002258:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e06b      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	781a      	ldrb	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	1c5a      	adds	r2, r3, #1
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002278:	b29b      	uxth	r3, r3
 800227a:	3b01      	subs	r3, #1
 800227c:	b29a      	uxth	r2, r3
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	3b01      	subs	r3, #1
 8002288:	b29a      	uxth	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f003 0304 	and.w	r3, r3, #4
 8002298:	2b04      	cmp	r3, #4
 800229a:	d11b      	bne.n	80022d4 <HAL_I2C_Master_Transmit+0x188>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d017      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022be:	b29b      	uxth	r3, r3
 80022c0:	3b01      	subs	r3, #1
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	6a39      	ldr	r1, [r7, #32]
 80022d8:	68f8      	ldr	r0, [r7, #12]
 80022da:	f000 fb47 	bl	800296c <I2C_WaitOnBTFFlagUntilTimeout>
 80022de:	4603      	mov	r3, r0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e8:	2b04      	cmp	r3, #4
 80022ea:	d107      	bne.n	80022fc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022fa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e01a      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	d194      	bne.n	8002232 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002316:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002330:	2300      	movs	r3, #0
 8002332:	e000      	b.n	8002336 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002334:	2302      	movs	r3, #2
  }
}
 8002336:	4618      	mov	r0, r3
 8002338:	3718      	adds	r7, #24
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	00100002 	.word	0x00100002
 8002344:	ffff0000 	.word	0xffff0000

08002348 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08a      	sub	sp, #40	; 0x28
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	460b      	mov	r3, r1
 8002356:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002358:	f7ff fac2 	bl	80018e0 <HAL_GetTick>
 800235c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002368:	b2db      	uxtb	r3, r3
 800236a:	2b20      	cmp	r3, #32
 800236c:	f040 8111 	bne.w	8002592 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	9300      	str	r3, [sp, #0]
 8002374:	2319      	movs	r3, #25
 8002376:	2201      	movs	r2, #1
 8002378:	4988      	ldr	r1, [pc, #544]	; (800259c <HAL_I2C_IsDeviceReady+0x254>)
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f994 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002386:	2302      	movs	r3, #2
 8002388:	e104      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002390:	2b01      	cmp	r3, #1
 8002392:	d101      	bne.n	8002398 <HAL_I2C_IsDeviceReady+0x50>
 8002394:	2302      	movs	r3, #2
 8002396:	e0fd      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d007      	beq.n	80023be <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f042 0201 	orr.w	r2, r2, #1
 80023bc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2224      	movs	r2, #36	; 0x24
 80023d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2200      	movs	r2, #0
 80023da:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a70      	ldr	r2, [pc, #448]	; (80025a0 <HAL_I2C_IsDeviceReady+0x258>)
 80023e0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023f0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 f952 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00d      	beq.n	8002426 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002414:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002418:	d103      	bne.n	8002422 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e0b6      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002426:	897b      	ldrh	r3, [r7, #10]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002434:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002436:	f7ff fa53 	bl	80018e0 <HAL_GetTick>
 800243a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b02      	cmp	r3, #2
 8002448:	bf0c      	ite	eq
 800244a:	2301      	moveq	r3, #1
 800244c:	2300      	movne	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	695b      	ldr	r3, [r3, #20]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800246a:	e025      	b.n	80024b8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800246c:	f7ff fa38 	bl	80018e0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d302      	bcc.n	8002482 <HAL_I2C_IsDeviceReady+0x13a>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	22a0      	movs	r2, #160	; 0xa0
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b02      	cmp	r3, #2
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024ae:	bf0c      	ite	eq
 80024b0:	2301      	moveq	r3, #1
 80024b2:	2300      	movne	r3, #0
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	2ba0      	cmp	r3, #160	; 0xa0
 80024c2:	d005      	beq.n	80024d0 <HAL_I2C_IsDeviceReady+0x188>
 80024c4:	7dfb      	ldrb	r3, [r7, #23]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_I2C_IsDeviceReady+0x188>
 80024ca:	7dbb      	ldrb	r3, [r7, #22]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0cd      	beq.n	800246c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2220      	movs	r2, #32
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695b      	ldr	r3, [r3, #20]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d129      	bne.n	800253a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024f4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	613b      	str	r3, [r7, #16]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	613b      	str	r3, [r7, #16]
 800250a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	9300      	str	r3, [sp, #0]
 8002510:	2319      	movs	r3, #25
 8002512:	2201      	movs	r2, #1
 8002514:	4921      	ldr	r1, [pc, #132]	; (800259c <HAL_I2C_IsDeviceReady+0x254>)
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 f8c6 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e036      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002536:	2300      	movs	r3, #0
 8002538:	e02c      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002548:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002552:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	9300      	str	r3, [sp, #0]
 8002558:	2319      	movs	r3, #25
 800255a:	2201      	movs	r2, #1
 800255c:	490f      	ldr	r1, [pc, #60]	; (800259c <HAL_I2C_IsDeviceReady+0x254>)
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f000 f8a2 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e012      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	3301      	adds	r3, #1
 8002572:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	429a      	cmp	r2, r3
 800257a:	f4ff af32 	bcc.w	80023e2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2220      	movs	r2, #32
 8002582:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e000      	b.n	8002594 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002592:	2302      	movs	r3, #2
  }
}
 8002594:	4618      	mov	r0, r3
 8002596:	3720      	adds	r7, #32
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	00100002 	.word	0x00100002
 80025a0:	ffff0000 	.word	0xffff0000

080025a4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	460b      	mov	r3, r1
 80025b2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d006      	beq.n	80025ce <I2C_MasterRequestWrite+0x2a>
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d003      	beq.n	80025ce <I2C_MasterRequestWrite+0x2a>
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025cc:	d108      	bne.n	80025e0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e00b      	b.n	80025f8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	2b12      	cmp	r3, #18
 80025e6:	d107      	bne.n	80025f8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f84f 	bl	80026a8 <I2C_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00d      	beq.n	800262c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800261e:	d103      	bne.n	8002628 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e035      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002634:	d108      	bne.n	8002648 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002636:	897b      	ldrh	r3, [r7, #10]
 8002638:	b2db      	uxtb	r3, r3
 800263a:	461a      	mov	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	e01b      	b.n	8002680 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002648:	897b      	ldrh	r3, [r7, #10]
 800264a:	11db      	asrs	r3, r3, #7
 800264c:	b2db      	uxtb	r3, r3
 800264e:	f003 0306 	and.w	r3, r3, #6
 8002652:	b2db      	uxtb	r3, r3
 8002654:	f063 030f 	orn	r3, r3, #15
 8002658:	b2da      	uxtb	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	490e      	ldr	r1, [pc, #56]	; (80026a0 <I2C_MasterRequestWrite+0xfc>)
 8002666:	68f8      	ldr	r0, [r7, #12]
 8002668:	f000 f898 	bl	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e010      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002676:	897b      	ldrh	r3, [r7, #10]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4907      	ldr	r1, [pc, #28]	; (80026a4 <I2C_MasterRequestWrite+0x100>)
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 f888 	bl	800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002696:	2300      	movs	r3, #0
}
 8002698:	4618      	mov	r0, r3
 800269a:	3718      	adds	r7, #24
 800269c:	46bd      	mov	sp, r7
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	00010008 	.word	0x00010008
 80026a4:	00010002 	.word	0x00010002

080026a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	60b9      	str	r1, [r7, #8]
 80026b2:	603b      	str	r3, [r7, #0]
 80026b4:	4613      	mov	r3, r2
 80026b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026b8:	e048      	b.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d044      	beq.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff f90d 	bl	80018e0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d139      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	0c1b      	lsrs	r3, r3, #16
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d10d      	bne.n	80026fe <I2C_WaitOnFlagUntilTimeout+0x56>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	43da      	mvns	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	4013      	ands	r3, r2
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	bf0c      	ite	eq
 80026f4:	2301      	moveq	r3, #1
 80026f6:	2300      	movne	r3, #0
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	461a      	mov	r2, r3
 80026fc:	e00c      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	43da      	mvns	r2, r3
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	4013      	ands	r3, r2
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf0c      	ite	eq
 8002710:	2301      	moveq	r3, #1
 8002712:	2300      	movne	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	461a      	mov	r2, r3
 8002718:	79fb      	ldrb	r3, [r7, #7]
 800271a:	429a      	cmp	r2, r3
 800271c:	d116      	bne.n	800274c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2220      	movs	r2, #32
 8002728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2200      	movs	r2, #0
 8002730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002738:	f043 0220 	orr.w	r2, r3, #32
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e023      	b.n	8002794 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	0c1b      	lsrs	r3, r3, #16
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10d      	bne.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	695b      	ldr	r3, [r3, #20]
 800275c:	43da      	mvns	r2, r3
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	4013      	ands	r3, r2
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	bf0c      	ite	eq
 8002768:	2301      	moveq	r3, #1
 800276a:	2300      	movne	r3, #0
 800276c:	b2db      	uxtb	r3, r3
 800276e:	461a      	mov	r2, r3
 8002770:	e00c      	b.n	800278c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	43da      	mvns	r2, r3
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	4013      	ands	r3, r2
 800277e:	b29b      	uxth	r3, r3
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	429a      	cmp	r2, r3
 8002790:	d093      	beq.n	80026ba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80027aa:	e071      	b.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	695b      	ldr	r3, [r3, #20]
 80027b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027ba:	d123      	bne.n	8002804 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2220      	movs	r2, #32
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e067      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800280a:	d041      	beq.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800280c:	f7ff f868 	bl	80018e0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	429a      	cmp	r2, r3
 800281a:	d302      	bcc.n	8002822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d136      	bne.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	0c1b      	lsrs	r3, r3, #16
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b01      	cmp	r3, #1
 800282a:	d10c      	bne.n	8002846 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	43da      	mvns	r2, r3
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	4013      	ands	r3, r2
 8002838:	b29b      	uxth	r3, r3
 800283a:	2b00      	cmp	r3, #0
 800283c:	bf14      	ite	ne
 800283e:	2301      	movne	r3, #1
 8002840:	2300      	moveq	r3, #0
 8002842:	b2db      	uxtb	r3, r3
 8002844:	e00b      	b.n	800285e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	43da      	mvns	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4013      	ands	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	bf14      	ite	ne
 8002858:	2301      	movne	r3, #1
 800285a:	2300      	moveq	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d016      	beq.n	8002890 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2220      	movs	r2, #32
 800286c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	f043 0220 	orr.w	r2, r3, #32
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e021      	b.n	80028d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	0c1b      	lsrs	r3, r3, #16
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d10c      	bne.n	80028b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	43da      	mvns	r2, r3
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	4013      	ands	r3, r2
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf14      	ite	ne
 80028ac:	2301      	movne	r3, #1
 80028ae:	2300      	moveq	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e00b      	b.n	80028cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f47f af6d 	bne.w	80027ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	60b9      	str	r1, [r7, #8]
 80028e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028e8:	e034      	b.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 f886 	bl	80029fc <I2C_IsAcknowledgeFailed>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e034      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002900:	d028      	beq.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002902:	f7fe ffed 	bl	80018e0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	68ba      	ldr	r2, [r7, #8]
 800290e:	429a      	cmp	r2, r3
 8002910:	d302      	bcc.n	8002918 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11d      	bne.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d016      	beq.n	8002954 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2200      	movs	r2, #0
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e007      	b.n	8002964 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295e:	2b80      	cmp	r3, #128	; 0x80
 8002960:	d1c3      	bne.n	80028ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002962:	2300      	movs	r3, #0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b084      	sub	sp, #16
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002978:	e034      	b.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f000 f83e 	bl	80029fc <I2C_IsAcknowledgeFailed>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e034      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002990:	d028      	beq.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002992:	f7fe ffa5 	bl	80018e0 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d302      	bcc.n	80029a8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d11d      	bne.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f003 0304 	and.w	r3, r3, #4
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	d016      	beq.n	80029e4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e007      	b.n	80029f4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d1c3      	bne.n	800297a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029f2:	2300      	movs	r3, #0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3710      	adds	r7, #16
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a12:	d11b      	bne.n	8002a4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2220      	movs	r2, #32
 8002a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f043 0204 	orr.w	r2, r3, #4
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
	...

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0cc      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b68      	ldr	r3, [pc, #416]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d90c      	bls.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a80:	683a      	ldr	r2, [r7, #0]
 8002a82:	b2d2      	uxtb	r2, r2
 8002a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a86:	4b63      	ldr	r3, [pc, #396]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d001      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e0b8      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0302 	and.w	r3, r3, #2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d020      	beq.n	8002ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab0:	4b59      	ldr	r3, [pc, #356]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a58      	ldr	r2, [pc, #352]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0308 	and.w	r3, r3, #8
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d005      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac8:	4b53      	ldr	r3, [pc, #332]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	4a52      	ldr	r2, [pc, #328]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ace:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad4:	4b50      	ldr	r3, [pc, #320]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	494d      	ldr	r1, [pc, #308]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d044      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d107      	bne.n	8002b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afa:	4b47      	ldr	r3, [pc, #284]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d119      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e07f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d003      	beq.n	8002b1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d107      	bne.n	8002b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d109      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e06f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b2a:	4b3b      	ldr	r3, [pc, #236]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0302 	and.w	r3, r3, #2
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e067      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b3a:	4b37      	ldr	r3, [pc, #220]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	f023 0203 	bic.w	r2, r3, #3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4934      	ldr	r1, [pc, #208]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fec8 	bl	80018e0 <HAL_GetTick>
 8002b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b54:	f7fe fec4 	bl	80018e0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e04f      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b6a:	4b2b      	ldr	r3, [pc, #172]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 020c 	and.w	r2, r3, #12
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d1eb      	bne.n	8002b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b7c:	4b25      	ldr	r3, [pc, #148]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 030f 	and.w	r3, r3, #15
 8002b84:	683a      	ldr	r2, [r7, #0]
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d20c      	bcs.n	8002ba4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b8a:	4b22      	ldr	r3, [pc, #136]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	b2d2      	uxtb	r2, r2
 8002b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b92:	4b20      	ldr	r3, [pc, #128]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 030f 	and.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e032      	b.n	8002c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d008      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb0:	4b19      	ldr	r3, [pc, #100]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	4916      	ldr	r1, [pc, #88]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bce:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	490e      	ldr	r1, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002be2:	f000 f887 	bl	8002cf4 <HAL_RCC_GetSysClockFreq>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b0b      	ldr	r3, [pc, #44]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	490a      	ldr	r1, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	5ccb      	ldrb	r3, [r1, r3]
 8002bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfa:	4a09      	ldr	r2, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c4>)
 8002bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfe:	4b09      	ldr	r3, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe fd28 	bl	8001658 <HAL_InitTick>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3710      	adds	r7, #16
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	40023c00 	.word	0x40023c00
 8002c18:	40023800 	.word	0x40023800
 8002c1c:	08008700 	.word	0x08008700
 8002c20:	2000000c 	.word	0x2000000c
 8002c24:	20000010 	.word	0x20000010

08002c28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c2c:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <HAL_RCC_GetHCLKFreq+0x14>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	2000000c 	.word	0x2000000c

08002c40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c44:	f7ff fff0 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	4b05      	ldr	r3, [pc, #20]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	0a9b      	lsrs	r3, r3, #10
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	4903      	ldr	r1, [pc, #12]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c56:	5ccb      	ldrb	r3, [r1, r3]
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	08008710 	.word	0x08008710

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c6c:	f7ff ffdc 	bl	8002c28 <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	0b5b      	lsrs	r3, r3, #13
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4903      	ldr	r1, [pc, #12]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	08008710 	.word	0x08008710

08002c90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	220f      	movs	r2, #15
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ca0:	4b12      	ldr	r3, [pc, #72]	; (8002cec <HAL_RCC_GetClockConfig+0x5c>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0203 	and.w	r2, r3, #3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002cac:	4b0f      	ldr	r3, [pc, #60]	; (8002cec <HAL_RCC_GetClockConfig+0x5c>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <HAL_RCC_GetClockConfig+0x5c>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002cc4:	4b09      	ldr	r3, [pc, #36]	; (8002cec <HAL_RCC_GetClockConfig+0x5c>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	08db      	lsrs	r3, r3, #3
 8002cca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002cd2:	4b07      	ldr	r3, [pc, #28]	; (8002cf0 <HAL_RCC_GetClockConfig+0x60>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 020f 	and.w	r2, r3, #15
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	601a      	str	r2, [r3, #0]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	40023c00 	.word	0x40023c00

08002cf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf8:	b0ae      	sub	sp, #184	; 0xb8
 8002cfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002d02:	2300      	movs	r3, #0
 8002d04:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1a:	4bcb      	ldr	r3, [pc, #812]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
 8002d22:	2b0c      	cmp	r3, #12
 8002d24:	f200 8206 	bhi.w	8003134 <HAL_RCC_GetSysClockFreq+0x440>
 8002d28:	a201      	add	r2, pc, #4	; (adr r2, 8002d30 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2e:	bf00      	nop
 8002d30:	08002d65 	.word	0x08002d65
 8002d34:	08003135 	.word	0x08003135
 8002d38:	08003135 	.word	0x08003135
 8002d3c:	08003135 	.word	0x08003135
 8002d40:	08002d6d 	.word	0x08002d6d
 8002d44:	08003135 	.word	0x08003135
 8002d48:	08003135 	.word	0x08003135
 8002d4c:	08003135 	.word	0x08003135
 8002d50:	08002d75 	.word	0x08002d75
 8002d54:	08003135 	.word	0x08003135
 8002d58:	08003135 	.word	0x08003135
 8002d5c:	08003135 	.word	0x08003135
 8002d60:	08002f65 	.word	0x08002f65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d64:	4bb9      	ldr	r3, [pc, #740]	; (800304c <HAL_RCC_GetSysClockFreq+0x358>)
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002d6a:	e1e7      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d6c:	4bb8      	ldr	r3, [pc, #736]	; (8003050 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002d72:	e1e3      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d74:	4bb4      	ldr	r3, [pc, #720]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d80:	4bb1      	ldr	r3, [pc, #708]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d071      	beq.n	8002e70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d8c:	4bae      	ldr	r3, [pc, #696]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	099b      	lsrs	r3, r3, #6
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002d98:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002da8:	2300      	movs	r3, #0
 8002daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002dae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	f04f 0000 	mov.w	r0, #0
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	0159      	lsls	r1, r3, #5
 8002dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc4:	0150      	lsls	r0, r2, #5
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4621      	mov	r1, r4
 8002dcc:	1a51      	subs	r1, r2, r1
 8002dce:	6439      	str	r1, [r7, #64]	; 0x40
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002de4:	4649      	mov	r1, r9
 8002de6:	018b      	lsls	r3, r1, #6
 8002de8:	4641      	mov	r1, r8
 8002dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dee:	4641      	mov	r1, r8
 8002df0:	018a      	lsls	r2, r1, #6
 8002df2:	4641      	mov	r1, r8
 8002df4:	1a51      	subs	r1, r2, r1
 8002df6:	63b9      	str	r1, [r7, #56]	; 0x38
 8002df8:	4649      	mov	r1, r9
 8002dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002e0c:	4649      	mov	r1, r9
 8002e0e:	00cb      	lsls	r3, r1, #3
 8002e10:	4641      	mov	r1, r8
 8002e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e16:	4641      	mov	r1, r8
 8002e18:	00ca      	lsls	r2, r1, #3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	4622      	mov	r2, r4
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	633b      	str	r3, [r7, #48]	; 0x30
 8002e26:	462b      	mov	r3, r5
 8002e28:	460a      	mov	r2, r1
 8002e2a:	eb42 0303 	adc.w	r3, r2, r3
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002e3c:	4629      	mov	r1, r5
 8002e3e:	024b      	lsls	r3, r1, #9
 8002e40:	4621      	mov	r1, r4
 8002e42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e46:	4621      	mov	r1, r4
 8002e48:	024a      	lsls	r2, r1, #9
 8002e4a:	4610      	mov	r0, r2
 8002e4c:	4619      	mov	r1, r3
 8002e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e52:	2200      	movs	r2, #0
 8002e54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002e58:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002e5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002e60:	f7fd fa3e 	bl	80002e0 <__aeabi_uldivmod>
 8002e64:	4602      	mov	r2, r0
 8002e66:	460b      	mov	r3, r1
 8002e68:	4613      	mov	r3, r2
 8002e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e6e:	e067      	b.n	8002f40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e70:	4b75      	ldr	r3, [pc, #468]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	2200      	movs	r2, #0
 8002e78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e7c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002e80:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002e92:	4622      	mov	r2, r4
 8002e94:	462b      	mov	r3, r5
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0159      	lsls	r1, r3, #5
 8002ea0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ea4:	0150      	lsls	r0, r2, #5
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4621      	mov	r1, r4
 8002eac:	1a51      	subs	r1, r2, r1
 8002eae:	62b9      	str	r1, [r7, #40]	; 0x28
 8002eb0:	4629      	mov	r1, r5
 8002eb2:	eb63 0301 	sbc.w	r3, r3, r1
 8002eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002ec4:	4649      	mov	r1, r9
 8002ec6:	018b      	lsls	r3, r1, #6
 8002ec8:	4641      	mov	r1, r8
 8002eca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ece:	4641      	mov	r1, r8
 8002ed0:	018a      	lsls	r2, r1, #6
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ed8:	4649      	mov	r1, r9
 8002eda:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	f04f 0300 	mov.w	r3, #0
 8002ee6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002eea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002eee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef2:	4692      	mov	sl, r2
 8002ef4:	469b      	mov	fp, r3
 8002ef6:	4623      	mov	r3, r4
 8002ef8:	eb1a 0303 	adds.w	r3, sl, r3
 8002efc:	623b      	str	r3, [r7, #32]
 8002efe:	462b      	mov	r3, r5
 8002f00:	eb4b 0303 	adc.w	r3, fp, r3
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	f04f 0300 	mov.w	r3, #0
 8002f0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002f12:	4629      	mov	r1, r5
 8002f14:	028b      	lsls	r3, r1, #10
 8002f16:	4621      	mov	r1, r4
 8002f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f1c:	4621      	mov	r1, r4
 8002f1e:	028a      	lsls	r2, r1, #10
 8002f20:	4610      	mov	r0, r2
 8002f22:	4619      	mov	r1, r3
 8002f24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f28:	2200      	movs	r2, #0
 8002f2a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f2c:	677a      	str	r2, [r7, #116]	; 0x74
 8002f2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002f32:	f7fd f9d5 	bl	80002e0 <__aeabi_uldivmod>
 8002f36:	4602      	mov	r2, r0
 8002f38:	460b      	mov	r3, r1
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f40:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	3301      	adds	r3, #1
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f62:	e0eb      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f64:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f70:	4b35      	ldr	r3, [pc, #212]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d06b      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCC_GetSysClockFreq+0x354>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	099b      	lsrs	r3, r3, #6
 8002f82:	2200      	movs	r2, #0
 8002f84:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	663b      	str	r3, [r7, #96]	; 0x60
 8002f90:	2300      	movs	r3, #0
 8002f92:	667b      	str	r3, [r7, #100]	; 0x64
 8002f94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002f98:	4622      	mov	r2, r4
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	f04f 0000 	mov.w	r0, #0
 8002fa0:	f04f 0100 	mov.w	r1, #0
 8002fa4:	0159      	lsls	r1, r3, #5
 8002fa6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002faa:	0150      	lsls	r0, r2, #5
 8002fac:	4602      	mov	r2, r0
 8002fae:	460b      	mov	r3, r1
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	1a51      	subs	r1, r2, r1
 8002fb4:	61b9      	str	r1, [r7, #24]
 8002fb6:	4629      	mov	r1, r5
 8002fb8:	eb63 0301 	sbc.w	r3, r3, r1
 8002fbc:	61fb      	str	r3, [r7, #28]
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	f04f 0300 	mov.w	r3, #0
 8002fc6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002fca:	4659      	mov	r1, fp
 8002fcc:	018b      	lsls	r3, r1, #6
 8002fce:	4651      	mov	r1, sl
 8002fd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002fd4:	4651      	mov	r1, sl
 8002fd6:	018a      	lsls	r2, r1, #6
 8002fd8:	4651      	mov	r1, sl
 8002fda:	ebb2 0801 	subs.w	r8, r2, r1
 8002fde:	4659      	mov	r1, fp
 8002fe0:	eb63 0901 	sbc.w	r9, r3, r1
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ff0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002ff4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ff8:	4690      	mov	r8, r2
 8002ffa:	4699      	mov	r9, r3
 8002ffc:	4623      	mov	r3, r4
 8002ffe:	eb18 0303 	adds.w	r3, r8, r3
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	462b      	mov	r3, r5
 8003006:	eb49 0303 	adc.w	r3, r9, r3
 800300a:	617b      	str	r3, [r7, #20]
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003018:	4629      	mov	r1, r5
 800301a:	024b      	lsls	r3, r1, #9
 800301c:	4621      	mov	r1, r4
 800301e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003022:	4621      	mov	r1, r4
 8003024:	024a      	lsls	r2, r1, #9
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800302e:	2200      	movs	r2, #0
 8003030:	65bb      	str	r3, [r7, #88]	; 0x58
 8003032:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003034:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003038:	f7fd f952 	bl	80002e0 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003046:	e065      	b.n	8003114 <HAL_RCC_GetSysClockFreq+0x420>
 8003048:	40023800 	.word	0x40023800
 800304c:	00f42400 	.word	0x00f42400
 8003050:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <HAL_RCC_GetSysClockFreq+0x458>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	099b      	lsrs	r3, r3, #6
 800305a:	2200      	movs	r2, #0
 800305c:	4618      	mov	r0, r3
 800305e:	4611      	mov	r1, r2
 8003060:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003064:	653b      	str	r3, [r7, #80]	; 0x50
 8003066:	2300      	movs	r3, #0
 8003068:	657b      	str	r3, [r7, #84]	; 0x54
 800306a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800306e:	4642      	mov	r2, r8
 8003070:	464b      	mov	r3, r9
 8003072:	f04f 0000 	mov.w	r0, #0
 8003076:	f04f 0100 	mov.w	r1, #0
 800307a:	0159      	lsls	r1, r3, #5
 800307c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003080:	0150      	lsls	r0, r2, #5
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	4641      	mov	r1, r8
 8003088:	1a51      	subs	r1, r2, r1
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	4649      	mov	r1, r9
 800308e:	eb63 0301 	sbc.w	r3, r3, r1
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80030a0:	4659      	mov	r1, fp
 80030a2:	018b      	lsls	r3, r1, #6
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030aa:	4651      	mov	r1, sl
 80030ac:	018a      	lsls	r2, r1, #6
 80030ae:	4651      	mov	r1, sl
 80030b0:	1a54      	subs	r4, r2, r1
 80030b2:	4659      	mov	r1, fp
 80030b4:	eb63 0501 	sbc.w	r5, r3, r1
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	00eb      	lsls	r3, r5, #3
 80030c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80030c6:	00e2      	lsls	r2, r4, #3
 80030c8:	4614      	mov	r4, r2
 80030ca:	461d      	mov	r5, r3
 80030cc:	4643      	mov	r3, r8
 80030ce:	18e3      	adds	r3, r4, r3
 80030d0:	603b      	str	r3, [r7, #0]
 80030d2:	464b      	mov	r3, r9
 80030d4:	eb45 0303 	adc.w	r3, r5, r3
 80030d8:	607b      	str	r3, [r7, #4]
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80030e6:	4629      	mov	r1, r5
 80030e8:	028b      	lsls	r3, r1, #10
 80030ea:	4621      	mov	r1, r4
 80030ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80030f0:	4621      	mov	r1, r4
 80030f2:	028a      	lsls	r2, r1, #10
 80030f4:	4610      	mov	r0, r2
 80030f6:	4619      	mov	r1, r3
 80030f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80030fc:	2200      	movs	r2, #0
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003100:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003102:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003106:	f7fd f8eb 	bl	80002e0 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4613      	mov	r3, r2
 8003110:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003114:	4b0d      	ldr	r3, [pc, #52]	; (800314c <HAL_RCC_GetSysClockFreq+0x458>)
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	0f1b      	lsrs	r3, r3, #28
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003122:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003126:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800312a:	fbb2 f3f3 	udiv	r3, r2, r3
 800312e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003132:	e003      	b.n	800313c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003134:	4b06      	ldr	r3, [pc, #24]	; (8003150 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800313a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800313c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003140:	4618      	mov	r0, r3
 8003142:	37b8      	adds	r7, #184	; 0xb8
 8003144:	46bd      	mov	sp, r7
 8003146:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800314a:	bf00      	nop
 800314c:	40023800 	.word	0x40023800
 8003150:	00f42400 	.word	0x00f42400

08003154 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e28d      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8083 	beq.w	800327a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003174:	4b94      	ldr	r3, [pc, #592]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b04      	cmp	r3, #4
 800317e:	d019      	beq.n	80031b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003180:	4b91      	ldr	r3, [pc, #580]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003188:	2b08      	cmp	r3, #8
 800318a:	d106      	bne.n	800319a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800318c:	4b8e      	ldr	r3, [pc, #568]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003194:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003198:	d00c      	beq.n	80031b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800319a:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031a2:	2b0c      	cmp	r3, #12
 80031a4:	d112      	bne.n	80031cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031a6:	4b88      	ldr	r3, [pc, #544]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031b2:	d10b      	bne.n	80031cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b4:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d05b      	beq.n	8003278 <HAL_RCC_OscConfig+0x124>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d157      	bne.n	8003278 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e25a      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d106      	bne.n	80031e4 <HAL_RCC_OscConfig+0x90>
 80031d6:	4b7c      	ldr	r3, [pc, #496]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a7b      	ldr	r2, [pc, #492]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	e01d      	b.n	8003220 <HAL_RCC_OscConfig+0xcc>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ec:	d10c      	bne.n	8003208 <HAL_RCC_OscConfig+0xb4>
 80031ee:	4b76      	ldr	r3, [pc, #472]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a75      	ldr	r2, [pc, #468]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031f8:	6013      	str	r3, [r2, #0]
 80031fa:	4b73      	ldr	r3, [pc, #460]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a72      	ldr	r2, [pc, #456]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	e00b      	b.n	8003220 <HAL_RCC_OscConfig+0xcc>
 8003208:	4b6f      	ldr	r3, [pc, #444]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a6e      	ldr	r2, [pc, #440]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800320e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a6b      	ldr	r2, [pc, #428]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800321a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800321e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d013      	beq.n	8003250 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fe fb5a 	bl	80018e0 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003230:	f7fe fb56 	bl	80018e0 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b64      	cmp	r3, #100	; 0x64
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e21f      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003242:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCC_OscConfig+0xdc>
 800324e:	e014      	b.n	800327a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003250:	f7fe fb46 	bl	80018e0 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003258:	f7fe fb42 	bl	80018e0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b64      	cmp	r3, #100	; 0x64
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e20b      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800326a:	4b57      	ldr	r3, [pc, #348]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d1f0      	bne.n	8003258 <HAL_RCC_OscConfig+0x104>
 8003276:	e000      	b.n	800327a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003278:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d06f      	beq.n	8003366 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003286:	4b50      	ldr	r3, [pc, #320]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 030c 	and.w	r3, r3, #12
 800328e:	2b00      	cmp	r3, #0
 8003290:	d017      	beq.n	80032c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003292:	4b4d      	ldr	r3, [pc, #308]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800329a:	2b08      	cmp	r3, #8
 800329c:	d105      	bne.n	80032aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800329e:	4b4a      	ldr	r3, [pc, #296]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00b      	beq.n	80032c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032aa:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d11c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032b6:	4b44      	ldr	r3, [pc, #272]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d116      	bne.n	80032f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032c2:	4b41      	ldr	r3, [pc, #260]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d005      	beq.n	80032da <HAL_RCC_OscConfig+0x186>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	68db      	ldr	r3, [r3, #12]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d001      	beq.n	80032da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e1d3      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032da:	4b3b      	ldr	r3, [pc, #236]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	4937      	ldr	r1, [pc, #220]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	e03a      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d020      	beq.n	800333a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032f8:	4b34      	ldr	r3, [pc, #208]	; (80033cc <HAL_RCC_OscConfig+0x278>)
 80032fa:	2201      	movs	r2, #1
 80032fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fe:	f7fe faef 	bl	80018e0 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003306:	f7fe faeb 	bl	80018e0 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e1b4      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003318:	4b2b      	ldr	r3, [pc, #172]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003324:	4b28      	ldr	r3, [pc, #160]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691b      	ldr	r3, [r3, #16]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4925      	ldr	r1, [pc, #148]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x278>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003340:	f7fe face 	bl	80018e0 <HAL_GetTick>
 8003344:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003346:	e008      	b.n	800335a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003348:	f7fe faca 	bl	80018e0 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b02      	cmp	r3, #2
 8003354:	d901      	bls.n	800335a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e193      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800335a:	4b1b      	ldr	r3, [pc, #108]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1f0      	bne.n	8003348 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b00      	cmp	r3, #0
 8003370:	d036      	beq.n	80033e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	695b      	ldr	r3, [r3, #20]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d016      	beq.n	80033a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x27c>)
 800337c:	2201      	movs	r2, #1
 800337e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003380:	f7fe faae 	bl	80018e0 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe faaa 	bl	80018e0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b02      	cmp	r3, #2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e173      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <HAL_RCC_OscConfig+0x274>)
 800339c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0x234>
 80033a6:	e01b      	b.n	80033e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <HAL_RCC_OscConfig+0x27c>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ae:	f7fe fa97 	bl	80018e0 <HAL_GetTick>
 80033b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033b4:	e00e      	b.n	80033d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b6:	f7fe fa93 	bl	80018e0 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d907      	bls.n	80033d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e15c      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
 80033c8:	40023800 	.word	0x40023800
 80033cc:	42470000 	.word	0x42470000
 80033d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033d4:	4b8a      	ldr	r3, [pc, #552]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ea      	bne.n	80033b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8097 	beq.w	800351c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033ee:	2300      	movs	r3, #0
 80033f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033f2:	4b83      	ldr	r3, [pc, #524]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10f      	bne.n	800341e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	60bb      	str	r3, [r7, #8]
 8003402:	4b7f      	ldr	r3, [pc, #508]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a7e      	ldr	r2, [pc, #504]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b7c      	ldr	r3, [pc, #496]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003416:	60bb      	str	r3, [r7, #8]
 8003418:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800341a:	2301      	movs	r3, #1
 800341c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800341e:	4b79      	ldr	r3, [pc, #484]	; (8003604 <HAL_RCC_OscConfig+0x4b0>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003426:	2b00      	cmp	r3, #0
 8003428:	d118      	bne.n	800345c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800342a:	4b76      	ldr	r3, [pc, #472]	; (8003604 <HAL_RCC_OscConfig+0x4b0>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a75      	ldr	r2, [pc, #468]	; (8003604 <HAL_RCC_OscConfig+0x4b0>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003436:	f7fe fa53 	bl	80018e0 <HAL_GetTick>
 800343a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800343c:	e008      	b.n	8003450 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800343e:	f7fe fa4f 	bl	80018e0 <HAL_GetTick>
 8003442:	4602      	mov	r2, r0
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	1ad3      	subs	r3, r2, r3
 8003448:	2b02      	cmp	r3, #2
 800344a:	d901      	bls.n	8003450 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800344c:	2303      	movs	r3, #3
 800344e:	e118      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003450:	4b6c      	ldr	r3, [pc, #432]	; (8003604 <HAL_RCC_OscConfig+0x4b0>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003458:	2b00      	cmp	r3, #0
 800345a:	d0f0      	beq.n	800343e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2b01      	cmp	r3, #1
 8003462:	d106      	bne.n	8003472 <HAL_RCC_OscConfig+0x31e>
 8003464:	4b66      	ldr	r3, [pc, #408]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	4a65      	ldr	r2, [pc, #404]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 800346a:	f043 0301 	orr.w	r3, r3, #1
 800346e:	6713      	str	r3, [r2, #112]	; 0x70
 8003470:	e01c      	b.n	80034ac <HAL_RCC_OscConfig+0x358>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	2b05      	cmp	r3, #5
 8003478:	d10c      	bne.n	8003494 <HAL_RCC_OscConfig+0x340>
 800347a:	4b61      	ldr	r3, [pc, #388]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 800347c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347e:	4a60      	ldr	r2, [pc, #384]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003480:	f043 0304 	orr.w	r3, r3, #4
 8003484:	6713      	str	r3, [r2, #112]	; 0x70
 8003486:	4b5e      	ldr	r3, [pc, #376]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800348a:	4a5d      	ldr	r2, [pc, #372]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 800348c:	f043 0301 	orr.w	r3, r3, #1
 8003490:	6713      	str	r3, [r2, #112]	; 0x70
 8003492:	e00b      	b.n	80034ac <HAL_RCC_OscConfig+0x358>
 8003494:	4b5a      	ldr	r3, [pc, #360]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	4a59      	ldr	r2, [pc, #356]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	6713      	str	r3, [r2, #112]	; 0x70
 80034a0:	4b57      	ldr	r3, [pc, #348]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a56      	ldr	r2, [pc, #344]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	f023 0304 	bic.w	r3, r3, #4
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d015      	beq.n	80034e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034b4:	f7fe fa14 	bl	80018e0 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ba:	e00a      	b.n	80034d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034bc:	f7fe fa10 	bl	80018e0 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0d7      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034d2:	4b4b      	ldr	r3, [pc, #300]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ee      	beq.n	80034bc <HAL_RCC_OscConfig+0x368>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fe f9fe 	bl	80018e0 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fe f9fa 	bl	80018e0 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0c1      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034fe:	4b40      	ldr	r3, [pc, #256]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1ee      	bne.n	80034e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800350a:	7dfb      	ldrb	r3, [r7, #23]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d105      	bne.n	800351c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003510:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003516:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 80ad 	beq.w	8003680 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003526:	4b36      	ldr	r3, [pc, #216]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
 800352e:	2b08      	cmp	r3, #8
 8003530:	d060      	beq.n	80035f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d145      	bne.n	80035c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800353a:	4b33      	ldr	r3, [pc, #204]	; (8003608 <HAL_RCC_OscConfig+0x4b4>)
 800353c:	2200      	movs	r2, #0
 800353e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003540:	f7fe f9ce 	bl	80018e0 <HAL_GetTick>
 8003544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003546:	e008      	b.n	800355a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003548:	f7fe f9ca 	bl	80018e0 <HAL_GetTick>
 800354c:	4602      	mov	r2, r0
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	1ad3      	subs	r3, r2, r3
 8003552:	2b02      	cmp	r3, #2
 8003554:	d901      	bls.n	800355a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003556:	2303      	movs	r3, #3
 8003558:	e093      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800355a:	4b29      	ldr	r3, [pc, #164]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1f0      	bne.n	8003548 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	69da      	ldr	r2, [r3, #28]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	431a      	orrs	r2, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	019b      	lsls	r3, r3, #6
 8003576:	431a      	orrs	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	085b      	lsrs	r3, r3, #1
 800357e:	3b01      	subs	r3, #1
 8003580:	041b      	lsls	r3, r3, #16
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003588:	061b      	lsls	r3, r3, #24
 800358a:	431a      	orrs	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003590:	071b      	lsls	r3, r3, #28
 8003592:	491b      	ldr	r1, [pc, #108]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 8003594:	4313      	orrs	r3, r2
 8003596:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003598:	4b1b      	ldr	r3, [pc, #108]	; (8003608 <HAL_RCC_OscConfig+0x4b4>)
 800359a:	2201      	movs	r2, #1
 800359c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800359e:	f7fe f99f 	bl	80018e0 <HAL_GetTick>
 80035a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035a4:	e008      	b.n	80035b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a6:	f7fe f99b 	bl	80018e0 <HAL_GetTick>
 80035aa:	4602      	mov	r2, r0
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	1ad3      	subs	r3, r2, r3
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d901      	bls.n	80035b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e064      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b8:	4b11      	ldr	r3, [pc, #68]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d0f0      	beq.n	80035a6 <HAL_RCC_OscConfig+0x452>
 80035c4:	e05c      	b.n	8003680 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <HAL_RCC_OscConfig+0x4b4>)
 80035c8:	2200      	movs	r2, #0
 80035ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035cc:	f7fe f988 	bl	80018e0 <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d4:	f7fe f984 	bl	80018e0 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e04d      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e6:	4b06      	ldr	r3, [pc, #24]	; (8003600 <HAL_RCC_OscConfig+0x4ac>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x480>
 80035f2:	e045      	b.n	8003680 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	e040      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
 8003600:	40023800 	.word	0x40023800
 8003604:	40007000 	.word	0x40007000
 8003608:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800360c:	4b1f      	ldr	r3, [pc, #124]	; (800368c <HAL_RCC_OscConfig+0x538>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d030      	beq.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003624:	429a      	cmp	r2, r3
 8003626:	d129      	bne.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003632:	429a      	cmp	r2, r3
 8003634:	d122      	bne.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800363c:	4013      	ands	r3, r2
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003642:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003644:	4293      	cmp	r3, r2
 8003646:	d119      	bne.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003652:	085b      	lsrs	r3, r3, #1
 8003654:	3b01      	subs	r3, #1
 8003656:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003658:	429a      	cmp	r2, r3
 800365a:	d10f      	bne.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	40023800 	.word	0x40023800

08003690 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d101      	bne.n	80036a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e041      	b.n	8003726 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d106      	bne.n	80036bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f839 	bl	800372e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f000 f9c0 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3708      	adds	r7, #8
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d001      	beq.n	800375c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e04e      	b.n	80037fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2202      	movs	r2, #2
 8003760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a23      	ldr	r2, [pc, #140]	; (8003808 <HAL_TIM_Base_Start_IT+0xc4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d022      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d01d      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a1f      	ldr	r2, [pc, #124]	; (800380c <HAL_TIM_Base_Start_IT+0xc8>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d018      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <HAL_TIM_Base_Start_IT+0xcc>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d013      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <HAL_TIM_Base_Start_IT+0xd0>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00e      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <HAL_TIM_Base_Start_IT+0xd4>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a19      	ldr	r2, [pc, #100]	; (800381c <HAL_TIM_Base_Start_IT+0xd8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d004      	beq.n	80037c4 <HAL_TIM_Base_Start_IT+0x80>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a18      	ldr	r2, [pc, #96]	; (8003820 <HAL_TIM_Base_Start_IT+0xdc>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d111      	bne.n	80037e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2b06      	cmp	r3, #6
 80037d4:	d010      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037e6:	e007      	b.n	80037f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f042 0201 	orr.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80037f8:	2300      	movs	r3, #0
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3714      	adds	r7, #20
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40010000 	.word	0x40010000
 800380c:	40000400 	.word	0x40000400
 8003810:	40000800 	.word	0x40000800
 8003814:	40000c00 	.word	0x40000c00
 8003818:	40010400 	.word	0x40010400
 800381c:	40014000 	.word	0x40014000
 8003820:	40001800 	.word	0x40001800

08003824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	691b      	ldr	r3, [r3, #16]
 800383a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d020      	beq.n	8003888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01b      	beq.n	8003888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f06f 0202 	mvn.w	r2, #2
 8003858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	f003 0303 	and.w	r3, r3, #3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f000 f8d2 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003874:	e005      	b.n	8003882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8c4 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f000 f8d5 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f003 0304 	and.w	r3, r3, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	d020      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d01b      	beq.n	80038d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f06f 0204 	mvn.w	r2, #4
 80038a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2202      	movs	r2, #2
 80038aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d003      	beq.n	80038c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8ac 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 80038c0:	e005      	b.n	80038ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f89e 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f000 f8af 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2200      	movs	r2, #0
 80038d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	f003 0308 	and.w	r3, r3, #8
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d020      	beq.n	8003920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01b      	beq.n	8003920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f06f 0208 	mvn.w	r2, #8
 80038f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 f886 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 800390c:	e005      	b.n	800391a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f878 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f000 f889 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b00      	cmp	r3, #0
 8003928:	d020      	beq.n	800396c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f003 0310 	and.w	r3, r3, #16
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01b      	beq.n	800396c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0210 	mvn.w	r2, #16
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2208      	movs	r2, #8
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	69db      	ldr	r3, [r3, #28]
 800394a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f860 	bl	8003a18 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f852 	bl	8003a04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 f863 	bl	8003a2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00c      	beq.n	8003990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b00      	cmp	r3, #0
 800397e:	d007      	beq.n	8003990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0201 	mvn.w	r2, #1
 8003988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7fd fad0 	bl	8000f30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00c      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d007      	beq.n	80039b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 f906 	bl	8003bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d007      	beq.n	80039d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80039d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f834 	bl	8003a40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	f003 0320 	and.w	r3, r3, #32
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00c      	beq.n	80039fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f003 0320 	and.w	r3, r3, #32
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d007      	beq.n	80039fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f06f 0220 	mvn.w	r2, #32
 80039f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 f8d8 	bl	8003bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	3710      	adds	r7, #16
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a46      	ldr	r2, [pc, #280]	; (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d00f      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a43      	ldr	r2, [pc, #268]	; (8003b84 <TIM_Base_SetConfig+0x130>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d00b      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a42      	ldr	r2, [pc, #264]	; (8003b88 <TIM_Base_SetConfig+0x134>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d007      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a41      	ldr	r2, [pc, #260]	; (8003b8c <TIM_Base_SetConfig+0x138>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d003      	beq.n	8003a94 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a40      	ldr	r2, [pc, #256]	; (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d108      	bne.n	8003aa6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a35      	ldr	r2, [pc, #212]	; (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d02b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab4:	d027      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a32      	ldr	r2, [pc, #200]	; (8003b84 <TIM_Base_SetConfig+0x130>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d023      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a31      	ldr	r2, [pc, #196]	; (8003b88 <TIM_Base_SetConfig+0x134>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d01f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a30      	ldr	r2, [pc, #192]	; (8003b8c <TIM_Base_SetConfig+0x138>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2f      	ldr	r2, [pc, #188]	; (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d017      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a2e      	ldr	r2, [pc, #184]	; (8003b94 <TIM_Base_SetConfig+0x140>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2d      	ldr	r2, [pc, #180]	; (8003b98 <TIM_Base_SetConfig+0x144>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2c      	ldr	r2, [pc, #176]	; (8003b9c <TIM_Base_SetConfig+0x148>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2b      	ldr	r2, [pc, #172]	; (8003ba0 <TIM_Base_SetConfig+0x14c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2a      	ldr	r2, [pc, #168]	; (8003ba4 <TIM_Base_SetConfig+0x150>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0xb2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a29      	ldr	r2, [pc, #164]	; (8003ba8 <TIM_Base_SetConfig+0x154>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d003      	beq.n	8003b4c <TIM_Base_SetConfig+0xf8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a12      	ldr	r2, [pc, #72]	; (8003b90 <TIM_Base_SetConfig+0x13c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d103      	bne.n	8003b54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2201      	movs	r2, #1
 8003b58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	f023 0201 	bic.w	r2, r3, #1
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	611a      	str	r2, [r3, #16]
  }
}
 8003b72:	bf00      	nop
 8003b74:	3714      	adds	r7, #20
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40010000 	.word	0x40010000
 8003b84:	40000400 	.word	0x40000400
 8003b88:	40000800 	.word	0x40000800
 8003b8c:	40000c00 	.word	0x40000c00
 8003b90:	40010400 	.word	0x40010400
 8003b94:	40014000 	.word	0x40014000
 8003b98:	40014400 	.word	0x40014400
 8003b9c:	40014800 	.word	0x40014800
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	40001c00 	.word	0x40001c00
 8003ba8:	40002000 	.word	0x40002000

08003bac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e042      	b.n	8003c6c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d106      	bne.n	8003c00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fd fce4 	bl	80015c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2224      	movs	r2, #36	; 0x24
 8003c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f973 	bl	8003f04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691a      	ldr	r2, [r3, #16]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695a      	ldr	r2, [r3, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68da      	ldr	r2, [r3, #12]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b08a      	sub	sp, #40	; 0x28
 8003c78:	af02      	add	r7, sp, #8
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8e:	b2db      	uxtb	r3, r3
 8003c90:	2b20      	cmp	r3, #32
 8003c92:	d175      	bne.n	8003d80 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Transmit+0x2c>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e06e      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2221      	movs	r2, #33	; 0x21
 8003cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cb2:	f7fd fe15 	bl	80018e0 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	88fa      	ldrh	r2, [r7, #6]
 8003cbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	88fa      	ldrh	r2, [r7, #6]
 8003cc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ccc:	d108      	bne.n	8003ce0 <HAL_UART_Transmit+0x6c>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d104      	bne.n	8003ce0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	e003      	b.n	8003ce8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ce8:	e02e      	b.n	8003d48 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2180      	movs	r1, #128	; 0x80
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f000 f848 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d005      	beq.n	8003d0c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	2220      	movs	r2, #32
 8003d04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e03a      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10b      	bne.n	8003d2a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	3302      	adds	r3, #2
 8003d26:	61bb      	str	r3, [r7, #24]
 8003d28:	e007      	b.n	8003d3a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	781a      	ldrb	r2, [r3, #0]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	3301      	adds	r3, #1
 8003d38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1cb      	bne.n	8003cea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2140      	movs	r1, #64	; 0x40
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 f814 	bl	8003d8a <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d005      	beq.n	8003d74 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e006      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2220      	movs	r2, #32
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	e000      	b.n	8003d82 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003d80:	2302      	movs	r3, #2
  }
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3720      	adds	r7, #32
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b086      	sub	sp, #24
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	4613      	mov	r3, r2
 8003d98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d9a:	e03b      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9c:	6a3b      	ldr	r3, [r7, #32]
 8003d9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003da2:	d037      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da4:	f7fd fd9c 	bl	80018e0 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	6a3a      	ldr	r2, [r7, #32]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <UART_WaitOnFlagUntilTimeout+0x30>
 8003db4:	6a3b      	ldr	r3, [r7, #32]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e03a      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d023      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d020      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	2b40      	cmp	r3, #64	; 0x40
 8003dd6:	d01d      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b08      	cmp	r3, #8
 8003de4:	d116      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003de6:	2300      	movs	r3, #0
 8003de8:	617b      	str	r3, [r7, #20]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	617b      	str	r3, [r7, #20]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	617b      	str	r3, [r7, #20]
 8003dfa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f000 f81d 	bl	8003e3c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2208      	movs	r2, #8
 8003e06:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e00f      	b.n	8003e34 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d0b4      	beq.n	8003d9c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b095      	sub	sp, #84	; 0x54
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	330c      	adds	r3, #12
 8003e4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	330c      	adds	r3, #12
 8003e62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e64:	643a      	str	r2, [r7, #64]	; 0x40
 8003e66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e6c:	e841 2300 	strex	r3, r2, [r1]
 8003e70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1e5      	bne.n	8003e44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6a3b      	ldr	r3, [r7, #32]
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	3314      	adds	r3, #20
 8003e96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e5      	bne.n	8003e78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d119      	bne.n	8003ee8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	330c      	adds	r3, #12
 8003eba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f023 0310 	bic.w	r3, r3, #16
 8003eca:	647b      	str	r3, [r7, #68]	; 0x44
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	330c      	adds	r3, #12
 8003ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ed4:	61ba      	str	r2, [r7, #24]
 8003ed6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	69ba      	ldr	r2, [r7, #24]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e5      	bne.n	8003eb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ef6:	bf00      	nop
 8003ef8:	3754      	adds	r7, #84	; 0x54
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
	...

08003f04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f08:	b0c0      	sub	sp, #256	; 0x100
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f20:	68d9      	ldr	r1, [r3, #12]
 8003f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	ea40 0301 	orr.w	r3, r0, r1
 8003f2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f5c:	f021 010c 	bic.w	r1, r1, #12
 8003f60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f6a:	430b      	orrs	r3, r1
 8003f6c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7e:	6999      	ldr	r1, [r3, #24]
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	ea40 0301 	orr.w	r3, r0, r1
 8003f8a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	4b8f      	ldr	r3, [pc, #572]	; (80041d0 <UART_SetConfig+0x2cc>)
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d005      	beq.n	8003fa4 <UART_SetConfig+0xa0>
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4b8d      	ldr	r3, [pc, #564]	; (80041d4 <UART_SetConfig+0x2d0>)
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d104      	bne.n	8003fae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fa4:	f7fe fe60 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8003fa8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003fac:	e003      	b.n	8003fb6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fae:	f7fe fe47 	bl	8002c40 <HAL_RCC_GetPCLK1Freq>
 8003fb2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc0:	f040 810c 	bne.w	80041dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fd2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	1891      	adds	r1, r2, r2
 8003fdc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fde:	415b      	adcs	r3, r3
 8003fe0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	eb12 0801 	adds.w	r8, r2, r1
 8003fec:	4629      	mov	r1, r5
 8003fee:	eb43 0901 	adc.w	r9, r3, r1
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ffe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004002:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004006:	4690      	mov	r8, r2
 8004008:	4699      	mov	r9, r3
 800400a:	4623      	mov	r3, r4
 800400c:	eb18 0303 	adds.w	r3, r8, r3
 8004010:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004014:	462b      	mov	r3, r5
 8004016:	eb49 0303 	adc.w	r3, r9, r3
 800401a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800401e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800402a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800402e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004032:	460b      	mov	r3, r1
 8004034:	18db      	adds	r3, r3, r3
 8004036:	653b      	str	r3, [r7, #80]	; 0x50
 8004038:	4613      	mov	r3, r2
 800403a:	eb42 0303 	adc.w	r3, r2, r3
 800403e:	657b      	str	r3, [r7, #84]	; 0x54
 8004040:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004044:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004048:	f7fc f94a 	bl	80002e0 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4b61      	ldr	r3, [pc, #388]	; (80041d8 <UART_SetConfig+0x2d4>)
 8004052:	fba3 2302 	umull	r2, r3, r3, r2
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	011c      	lsls	r4, r3, #4
 800405a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800405e:	2200      	movs	r2, #0
 8004060:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004064:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004068:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800406c:	4642      	mov	r2, r8
 800406e:	464b      	mov	r3, r9
 8004070:	1891      	adds	r1, r2, r2
 8004072:	64b9      	str	r1, [r7, #72]	; 0x48
 8004074:	415b      	adcs	r3, r3
 8004076:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004078:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800407c:	4641      	mov	r1, r8
 800407e:	eb12 0a01 	adds.w	sl, r2, r1
 8004082:	4649      	mov	r1, r9
 8004084:	eb43 0b01 	adc.w	fp, r3, r1
 8004088:	f04f 0200 	mov.w	r2, #0
 800408c:	f04f 0300 	mov.w	r3, #0
 8004090:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004094:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004098:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800409c:	4692      	mov	sl, r2
 800409e:	469b      	mov	fp, r3
 80040a0:	4643      	mov	r3, r8
 80040a2:	eb1a 0303 	adds.w	r3, sl, r3
 80040a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040aa:	464b      	mov	r3, r9
 80040ac:	eb4b 0303 	adc.w	r3, fp, r3
 80040b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040c8:	460b      	mov	r3, r1
 80040ca:	18db      	adds	r3, r3, r3
 80040cc:	643b      	str	r3, [r7, #64]	; 0x40
 80040ce:	4613      	mov	r3, r2
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
 80040d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040de:	f7fc f8ff 	bl	80002e0 <__aeabi_uldivmod>
 80040e2:	4602      	mov	r2, r0
 80040e4:	460b      	mov	r3, r1
 80040e6:	4611      	mov	r1, r2
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <UART_SetConfig+0x2d4>)
 80040ea:	fba3 2301 	umull	r2, r3, r3, r1
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	2264      	movs	r2, #100	; 0x64
 80040f2:	fb02 f303 	mul.w	r3, r2, r3
 80040f6:	1acb      	subs	r3, r1, r3
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040fe:	4b36      	ldr	r3, [pc, #216]	; (80041d8 <UART_SetConfig+0x2d4>)
 8004100:	fba3 2302 	umull	r2, r3, r3, r2
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800410c:	441c      	add	r4, r3
 800410e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004112:	2200      	movs	r2, #0
 8004114:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004118:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800411c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004120:	4642      	mov	r2, r8
 8004122:	464b      	mov	r3, r9
 8004124:	1891      	adds	r1, r2, r2
 8004126:	63b9      	str	r1, [r7, #56]	; 0x38
 8004128:	415b      	adcs	r3, r3
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800412c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004130:	4641      	mov	r1, r8
 8004132:	1851      	adds	r1, r2, r1
 8004134:	6339      	str	r1, [r7, #48]	; 0x30
 8004136:	4649      	mov	r1, r9
 8004138:	414b      	adcs	r3, r1
 800413a:	637b      	str	r3, [r7, #52]	; 0x34
 800413c:	f04f 0200 	mov.w	r2, #0
 8004140:	f04f 0300 	mov.w	r3, #0
 8004144:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004148:	4659      	mov	r1, fp
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	4651      	mov	r1, sl
 800414e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004152:	4651      	mov	r1, sl
 8004154:	00ca      	lsls	r2, r1, #3
 8004156:	4610      	mov	r0, r2
 8004158:	4619      	mov	r1, r3
 800415a:	4603      	mov	r3, r0
 800415c:	4642      	mov	r2, r8
 800415e:	189b      	adds	r3, r3, r2
 8004160:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004164:	464b      	mov	r3, r9
 8004166:	460a      	mov	r2, r1
 8004168:	eb42 0303 	adc.w	r3, r2, r3
 800416c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800417c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004180:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004184:	460b      	mov	r3, r1
 8004186:	18db      	adds	r3, r3, r3
 8004188:	62bb      	str	r3, [r7, #40]	; 0x28
 800418a:	4613      	mov	r3, r2
 800418c:	eb42 0303 	adc.w	r3, r2, r3
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004192:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004196:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800419a:	f7fc f8a1 	bl	80002e0 <__aeabi_uldivmod>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4b0d      	ldr	r3, [pc, #52]	; (80041d8 <UART_SetConfig+0x2d4>)
 80041a4:	fba3 1302 	umull	r1, r3, r3, r2
 80041a8:	095b      	lsrs	r3, r3, #5
 80041aa:	2164      	movs	r1, #100	; 0x64
 80041ac:	fb01 f303 	mul.w	r3, r1, r3
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	00db      	lsls	r3, r3, #3
 80041b4:	3332      	adds	r3, #50	; 0x32
 80041b6:	4a08      	ldr	r2, [pc, #32]	; (80041d8 <UART_SetConfig+0x2d4>)
 80041b8:	fba2 2303 	umull	r2, r3, r2, r3
 80041bc:	095b      	lsrs	r3, r3, #5
 80041be:	f003 0207 	and.w	r2, r3, #7
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4422      	add	r2, r4
 80041ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041cc:	e106      	b.n	80043dc <UART_SetConfig+0x4d8>
 80041ce:	bf00      	nop
 80041d0:	40011000 	.word	0x40011000
 80041d4:	40011400 	.word	0x40011400
 80041d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041e0:	2200      	movs	r2, #0
 80041e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ee:	4642      	mov	r2, r8
 80041f0:	464b      	mov	r3, r9
 80041f2:	1891      	adds	r1, r2, r2
 80041f4:	6239      	str	r1, [r7, #32]
 80041f6:	415b      	adcs	r3, r3
 80041f8:	627b      	str	r3, [r7, #36]	; 0x24
 80041fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041fe:	4641      	mov	r1, r8
 8004200:	1854      	adds	r4, r2, r1
 8004202:	4649      	mov	r1, r9
 8004204:	eb43 0501 	adc.w	r5, r3, r1
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	00eb      	lsls	r3, r5, #3
 8004212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004216:	00e2      	lsls	r2, r4, #3
 8004218:	4614      	mov	r4, r2
 800421a:	461d      	mov	r5, r3
 800421c:	4643      	mov	r3, r8
 800421e:	18e3      	adds	r3, r4, r3
 8004220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004224:	464b      	mov	r3, r9
 8004226:	eb45 0303 	adc.w	r3, r5, r3
 800422a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800422e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800423a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800423e:	f04f 0200 	mov.w	r2, #0
 8004242:	f04f 0300 	mov.w	r3, #0
 8004246:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800424a:	4629      	mov	r1, r5
 800424c:	008b      	lsls	r3, r1, #2
 800424e:	4621      	mov	r1, r4
 8004250:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004254:	4621      	mov	r1, r4
 8004256:	008a      	lsls	r2, r1, #2
 8004258:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800425c:	f7fc f840 	bl	80002e0 <__aeabi_uldivmod>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4b60      	ldr	r3, [pc, #384]	; (80043e8 <UART_SetConfig+0x4e4>)
 8004266:	fba3 2302 	umull	r2, r3, r3, r2
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	011c      	lsls	r4, r3, #4
 800426e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004272:	2200      	movs	r2, #0
 8004274:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004278:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800427c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004280:	4642      	mov	r2, r8
 8004282:	464b      	mov	r3, r9
 8004284:	1891      	adds	r1, r2, r2
 8004286:	61b9      	str	r1, [r7, #24]
 8004288:	415b      	adcs	r3, r3
 800428a:	61fb      	str	r3, [r7, #28]
 800428c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004290:	4641      	mov	r1, r8
 8004292:	1851      	adds	r1, r2, r1
 8004294:	6139      	str	r1, [r7, #16]
 8004296:	4649      	mov	r1, r9
 8004298:	414b      	adcs	r3, r1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042a8:	4659      	mov	r1, fp
 80042aa:	00cb      	lsls	r3, r1, #3
 80042ac:	4651      	mov	r1, sl
 80042ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042b2:	4651      	mov	r1, sl
 80042b4:	00ca      	lsls	r2, r1, #3
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	4603      	mov	r3, r0
 80042bc:	4642      	mov	r2, r8
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042c4:	464b      	mov	r3, r9
 80042c6:	460a      	mov	r2, r1
 80042c8:	eb42 0303 	adc.w	r3, r2, r3
 80042cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042dc:	f04f 0200 	mov.w	r2, #0
 80042e0:	f04f 0300 	mov.w	r3, #0
 80042e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042e8:	4649      	mov	r1, r9
 80042ea:	008b      	lsls	r3, r1, #2
 80042ec:	4641      	mov	r1, r8
 80042ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042f2:	4641      	mov	r1, r8
 80042f4:	008a      	lsls	r2, r1, #2
 80042f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042fa:	f7fb fff1 	bl	80002e0 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4611      	mov	r1, r2
 8004304:	4b38      	ldr	r3, [pc, #224]	; (80043e8 <UART_SetConfig+0x4e4>)
 8004306:	fba3 2301 	umull	r2, r3, r3, r1
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2264      	movs	r2, #100	; 0x64
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	1acb      	subs	r3, r1, r3
 8004314:	011b      	lsls	r3, r3, #4
 8004316:	3332      	adds	r3, #50	; 0x32
 8004318:	4a33      	ldr	r2, [pc, #204]	; (80043e8 <UART_SetConfig+0x4e4>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004324:	441c      	add	r4, r3
 8004326:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800432a:	2200      	movs	r2, #0
 800432c:	673b      	str	r3, [r7, #112]	; 0x70
 800432e:	677a      	str	r2, [r7, #116]	; 0x74
 8004330:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	1891      	adds	r1, r2, r2
 800433a:	60b9      	str	r1, [r7, #8]
 800433c:	415b      	adcs	r3, r3
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004344:	4641      	mov	r1, r8
 8004346:	1851      	adds	r1, r2, r1
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	4649      	mov	r1, r9
 800434c:	414b      	adcs	r3, r1
 800434e:	607b      	str	r3, [r7, #4]
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800435c:	4659      	mov	r1, fp
 800435e:	00cb      	lsls	r3, r1, #3
 8004360:	4651      	mov	r1, sl
 8004362:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004366:	4651      	mov	r1, sl
 8004368:	00ca      	lsls	r2, r1, #3
 800436a:	4610      	mov	r0, r2
 800436c:	4619      	mov	r1, r3
 800436e:	4603      	mov	r3, r0
 8004370:	4642      	mov	r2, r8
 8004372:	189b      	adds	r3, r3, r2
 8004374:	66bb      	str	r3, [r7, #104]	; 0x68
 8004376:	464b      	mov	r3, r9
 8004378:	460a      	mov	r2, r1
 800437a:	eb42 0303 	adc.w	r3, r2, r3
 800437e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	663b      	str	r3, [r7, #96]	; 0x60
 800438a:	667a      	str	r2, [r7, #100]	; 0x64
 800438c:	f04f 0200 	mov.w	r2, #0
 8004390:	f04f 0300 	mov.w	r3, #0
 8004394:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004398:	4649      	mov	r1, r9
 800439a:	008b      	lsls	r3, r1, #2
 800439c:	4641      	mov	r1, r8
 800439e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043a2:	4641      	mov	r1, r8
 80043a4:	008a      	lsls	r2, r1, #2
 80043a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80043aa:	f7fb ff99 	bl	80002e0 <__aeabi_uldivmod>
 80043ae:	4602      	mov	r2, r0
 80043b0:	460b      	mov	r3, r1
 80043b2:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <UART_SetConfig+0x4e4>)
 80043b4:	fba3 1302 	umull	r1, r3, r3, r2
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	2164      	movs	r1, #100	; 0x64
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	3332      	adds	r3, #50	; 0x32
 80043c6:	4a08      	ldr	r2, [pc, #32]	; (80043e8 <UART_SetConfig+0x4e4>)
 80043c8:	fba2 2303 	umull	r2, r3, r2, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	f003 020f 	and.w	r2, r3, #15
 80043d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4422      	add	r2, r4
 80043da:	609a      	str	r2, [r3, #8]
}
 80043dc:	bf00      	nop
 80043de:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043e2:	46bd      	mov	sp, r7
 80043e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e8:	51eb851f 	.word	0x51eb851f

080043ec <__NVIC_SetPriority>:
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	6039      	str	r1, [r7, #0]
 80043f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	db0a      	blt.n	8004416 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	b2da      	uxtb	r2, r3
 8004404:	490c      	ldr	r1, [pc, #48]	; (8004438 <__NVIC_SetPriority+0x4c>)
 8004406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800440a:	0112      	lsls	r2, r2, #4
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	440b      	add	r3, r1
 8004410:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004414:	e00a      	b.n	800442c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	b2da      	uxtb	r2, r3
 800441a:	4908      	ldr	r1, [pc, #32]	; (800443c <__NVIC_SetPriority+0x50>)
 800441c:	79fb      	ldrb	r3, [r7, #7]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	3b04      	subs	r3, #4
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	440b      	add	r3, r1
 800442a:	761a      	strb	r2, [r3, #24]
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	e000e100 	.word	0xe000e100
 800443c:	e000ed00 	.word	0xe000ed00

08004440 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004444:	4b05      	ldr	r3, [pc, #20]	; (800445c <SysTick_Handler+0x1c>)
 8004446:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004448:	f001 fcfe 	bl	8005e48 <xTaskGetSchedulerState>
 800444c:	4603      	mov	r3, r0
 800444e:	2b01      	cmp	r3, #1
 8004450:	d001      	beq.n	8004456 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004452:	f002 fae9 	bl	8006a28 <xPortSysTickHandler>
  }
}
 8004456:	bf00      	nop
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	e000e010 	.word	0xe000e010

08004460 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004464:	2100      	movs	r1, #0
 8004466:	f06f 0004 	mvn.w	r0, #4
 800446a:	f7ff ffbf 	bl	80043ec <__NVIC_SetPriority>
#endif
}
 800446e:	bf00      	nop
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800447a:	f3ef 8305 	mrs	r3, IPSR
 800447e:	603b      	str	r3, [r7, #0]
  return(result);
 8004480:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004486:	f06f 0305 	mvn.w	r3, #5
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	e00c      	b.n	80044a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800448e:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <osKernelInitialize+0x44>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d105      	bne.n	80044a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004496:	4b08      	ldr	r3, [pc, #32]	; (80044b8 <osKernelInitialize+0x44>)
 8004498:	2201      	movs	r2, #1
 800449a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800449c:	2300      	movs	r3, #0
 800449e:	607b      	str	r3, [r7, #4]
 80044a0:	e002      	b.n	80044a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80044a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044a8:	687b      	ldr	r3, [r7, #4]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	200005a8 	.word	0x200005a8

080044bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c2:	f3ef 8305 	mrs	r3, IPSR
 80044c6:	603b      	str	r3, [r7, #0]
  return(result);
 80044c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044ce:	f06f 0305 	mvn.w	r3, #5
 80044d2:	607b      	str	r3, [r7, #4]
 80044d4:	e010      	b.n	80044f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044d6:	4b0b      	ldr	r3, [pc, #44]	; (8004504 <osKernelStart+0x48>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d109      	bne.n	80044f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044de:	f7ff ffbf 	bl	8004460 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044e2:	4b08      	ldr	r3, [pc, #32]	; (8004504 <osKernelStart+0x48>)
 80044e4:	2202      	movs	r2, #2
 80044e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044e8:	f001 f866 	bl	80055b8 <vTaskStartScheduler>
      stat = osOK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	e002      	b.n	80044f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044f8:	687b      	ldr	r3, [r7, #4]
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}
 8004502:	bf00      	nop
 8004504:	200005a8 	.word	0x200005a8

08004508 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004508:	b580      	push	{r7, lr}
 800450a:	b08e      	sub	sp, #56	; 0x38
 800450c:	af04      	add	r7, sp, #16
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004514:	2300      	movs	r3, #0
 8004516:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004518:	f3ef 8305 	mrs	r3, IPSR
 800451c:	617b      	str	r3, [r7, #20]
  return(result);
 800451e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004520:	2b00      	cmp	r3, #0
 8004522:	d17e      	bne.n	8004622 <osThreadNew+0x11a>
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d07b      	beq.n	8004622 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800452a:	2380      	movs	r3, #128	; 0x80
 800452c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800452e:	2318      	movs	r3, #24
 8004530:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004536:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800453a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d045      	beq.n	80045ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d002      	beq.n	8004550 <osThreadNew+0x48>
        name = attr->name;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d002      	beq.n	800455e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <osThreadNew+0x6e>
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b38      	cmp	r3, #56	; 0x38
 8004568:	d805      	bhi.n	8004576 <osThreadNew+0x6e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d001      	beq.n	800457a <osThreadNew+0x72>
        return (NULL);
 8004576:	2300      	movs	r3, #0
 8004578:	e054      	b.n	8004624 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d003      	beq.n	800458a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	089b      	lsrs	r3, r3, #2
 8004588:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00e      	beq.n	80045b0 <osThreadNew+0xa8>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b5b      	cmp	r3, #91	; 0x5b
 8004598:	d90a      	bls.n	80045b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d006      	beq.n	80045b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d002      	beq.n	80045b0 <osThreadNew+0xa8>
        mem = 1;
 80045aa:	2301      	movs	r3, #1
 80045ac:	61bb      	str	r3, [r7, #24]
 80045ae:	e010      	b.n	80045d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10c      	bne.n	80045d2 <osThreadNew+0xca>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <osThreadNew+0xca>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <osThreadNew+0xca>
          mem = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	e001      	b.n	80045d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d110      	bne.n	80045fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045e0:	9202      	str	r2, [sp, #8]
 80045e2:	9301      	str	r3, [sp, #4]
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6a3a      	ldr	r2, [r7, #32]
 80045ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fe0c 	bl	800520c <xTaskCreateStatic>
 80045f4:	4603      	mov	r3, r0
 80045f6:	613b      	str	r3, [r7, #16]
 80045f8:	e013      	b.n	8004622 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d110      	bne.n	8004622 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b29a      	uxth	r2, r3
 8004604:	f107 0310 	add.w	r3, r7, #16
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	f000 fe57 	bl	80052c6 <xTaskCreate>
 8004618:	4603      	mov	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d001      	beq.n	8004622 <osThreadNew+0x11a>
            hTask = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004622:	693b      	ldr	r3, [r7, #16]
}
 8004624:	4618      	mov	r0, r3
 8004626:	3728      	adds	r7, #40	; 0x28
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}

0800462c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004634:	f3ef 8305 	mrs	r3, IPSR
 8004638:	60bb      	str	r3, [r7, #8]
  return(result);
 800463a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <osDelay+0x1c>
    stat = osErrorISR;
 8004640:	f06f 0305 	mvn.w	r3, #5
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e007      	b.n	8004658 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004648:	2300      	movs	r3, #0
 800464a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 ff7c 	bl	8005550 <vTaskDelay>
    }
  }

  return (stat);
 8004658:	68fb      	ldr	r3, [r7, #12]
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
	...

08004664 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4a07      	ldr	r2, [pc, #28]	; (8004690 <vApplicationGetIdleTaskMemory+0x2c>)
 8004674:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4a06      	ldr	r2, [pc, #24]	; (8004694 <vApplicationGetIdleTaskMemory+0x30>)
 800467a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	601a      	str	r2, [r3, #0]
}
 8004682:	bf00      	nop
 8004684:	3714      	adds	r7, #20
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	200005ac 	.word	0x200005ac
 8004694:	20000608 	.word	0x20000608

08004698 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4a07      	ldr	r2, [pc, #28]	; (80046c4 <vApplicationGetTimerTaskMemory+0x2c>)
 80046a8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	4a06      	ldr	r2, [pc, #24]	; (80046c8 <vApplicationGetTimerTaskMemory+0x30>)
 80046ae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	bf00      	nop
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000808 	.word	0x20000808
 80046c8:	20000864 	.word	0x20000864

080046cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f103 0208 	add.w	r2, r3, #8
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f103 0208 	add.w	r2, r3, #8
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f103 0208 	add.w	r2, r3, #8
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004726:	b480      	push	{r7}
 8004728:	b085      	sub	sp, #20
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	683a      	ldr	r2, [r7, #0]
 8004750:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004784:	d103      	bne.n	800478e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	e00c      	b.n	80047a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3308      	adds	r3, #8
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	e002      	b.n	800479c <vListInsert+0x2e>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	60fb      	str	r3, [r7, #12]
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68ba      	ldr	r2, [r7, #8]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d2f6      	bcs.n	8004796 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	1c5a      	adds	r2, r3, #1
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	691b      	ldr	r3, [r3, #16]
 80047ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	6892      	ldr	r2, [r2, #8]
 80047f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	6852      	ldr	r2, [r2, #4]
 8004800:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	429a      	cmp	r2, r3
 800480a:	d103      	bne.n	8004814 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	689a      	ldr	r2, [r3, #8]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2200      	movs	r2, #0
 8004818:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	1e5a      	subs	r2, r3, #1
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d10a      	bne.n	800485e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800485a:	bf00      	nop
 800485c:	e7fe      	b.n	800485c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800485e:	f002 f851 	bl	8006904 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486a:	68f9      	ldr	r1, [r7, #12]
 800486c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800486e:	fb01 f303 	mul.w	r3, r1, r3
 8004872:	441a      	add	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	3b01      	subs	r3, #1
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004894:	fb01 f303 	mul.w	r3, r1, r3
 8004898:	441a      	add	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	22ff      	movs	r2, #255	; 0xff
 80048a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	22ff      	movs	r2, #255	; 0xff
 80048aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d114      	bne.n	80048de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01a      	beq.n	80048f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3310      	adds	r3, #16
 80048c0:	4618      	mov	r0, r3
 80048c2:	f001 f903 	bl	8005acc <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d012      	beq.n	80048f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <xQueueGenericReset+0xcc>)
 80048ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	f3bf 8f6f 	isb	sy
 80048dc:	e009      	b.n	80048f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3310      	adds	r3, #16
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fef2 	bl	80046cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	3324      	adds	r3, #36	; 0x24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f7ff feed 	bl	80046cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80048f2:	f002 f837 	bl	8006964 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80048f6:	2301      	movs	r3, #1
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08e      	sub	sp, #56	; 0x38
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10a      	bne.n	800494a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <xQueueGenericCreateStatic+0x52>
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <xQueueGenericCreateStatic+0x56>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueGenericCreateStatic+0x58>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	623b      	str	r3, [r7, #32]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d102      	bne.n	8004982 <xQueueGenericCreateStatic+0x7e>
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <xQueueGenericCreateStatic+0x82>
 8004982:	2301      	movs	r3, #1
 8004984:	e000      	b.n	8004988 <xQueueGenericCreateStatic+0x84>
 8004986:	2300      	movs	r3, #0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	61fb      	str	r3, [r7, #28]
}
 800499e:	bf00      	nop
 80049a0:	e7fe      	b.n	80049a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049a2:	2350      	movs	r3, #80	; 0x50
 80049a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	2b50      	cmp	r3, #80	; 0x50
 80049aa:	d00a      	beq.n	80049c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	61bb      	str	r3, [r7, #24]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80049c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00d      	beq.n	80049ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	4613      	mov	r3, r2
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f000 f805 	bl	80049f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3730      	adds	r7, #48	; 0x30
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d103      	bne.n	8004a10 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	69ba      	ldr	r2, [r7, #24]
 8004a0c:	601a      	str	r2, [r3, #0]
 8004a0e:	e002      	b.n	8004a16 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004a16:	69bb      	ldr	r3, [r7, #24]
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a22:	2101      	movs	r1, #1
 8004a24:	69b8      	ldr	r0, [r7, #24]
 8004a26:	f7ff ff05 	bl	8004834 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a32:	bf00      	nop
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
	...

08004a3c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b08e      	sub	sp, #56	; 0x38
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	607a      	str	r2, [r7, #4]
 8004a48:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d10a      	bne.n	8004a6e <xQueueGenericSend+0x32>
	__asm volatile
 8004a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5c:	f383 8811 	msr	BASEPRI, r3
 8004a60:	f3bf 8f6f 	isb	sy
 8004a64:	f3bf 8f4f 	dsb	sy
 8004a68:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a6a:	bf00      	nop
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <xQueueGenericSend+0x40>
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d101      	bne.n	8004a80 <xQueueGenericSend+0x44>
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e000      	b.n	8004a82 <xQueueGenericSend+0x46>
 8004a80:	2300      	movs	r3, #0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10a      	bne.n	8004a9c <xQueueGenericSend+0x60>
	__asm volatile
 8004a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8a:	f383 8811 	msr	BASEPRI, r3
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f3bf 8f4f 	dsb	sy
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a98:	bf00      	nop
 8004a9a:	e7fe      	b.n	8004a9a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d103      	bne.n	8004aaa <xQueueGenericSend+0x6e>
 8004aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d101      	bne.n	8004aae <xQueueGenericSend+0x72>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e000      	b.n	8004ab0 <xQueueGenericSend+0x74>
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d10a      	bne.n	8004aca <xQueueGenericSend+0x8e>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	623b      	str	r3, [r7, #32]
}
 8004ac6:	bf00      	nop
 8004ac8:	e7fe      	b.n	8004ac8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aca:	f001 f9bd 	bl	8005e48 <xTaskGetSchedulerState>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d102      	bne.n	8004ada <xQueueGenericSend+0x9e>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <xQueueGenericSend+0xa2>
 8004ada:	2301      	movs	r3, #1
 8004adc:	e000      	b.n	8004ae0 <xQueueGenericSend+0xa4>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d10a      	bne.n	8004afa <xQueueGenericSend+0xbe>
	__asm volatile
 8004ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae8:	f383 8811 	msr	BASEPRI, r3
 8004aec:	f3bf 8f6f 	isb	sy
 8004af0:	f3bf 8f4f 	dsb	sy
 8004af4:	61fb      	str	r3, [r7, #28]
}
 8004af6:	bf00      	nop
 8004af8:	e7fe      	b.n	8004af8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004afa:	f001 ff03 	bl	8006904 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <xQueueGenericSend+0xd4>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b02      	cmp	r3, #2
 8004b0e:	d129      	bne.n	8004b64 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b16:	f000 fa0b 	bl	8004f30 <prvCopyDataToQueue>
 8004b1a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d010      	beq.n	8004b46 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	3324      	adds	r3, #36	; 0x24
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 ffcf 	bl	8005acc <xTaskRemoveFromEventList>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d013      	beq.n	8004b5c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b34:	4b3f      	ldr	r3, [pc, #252]	; (8004c34 <xQueueGenericSend+0x1f8>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
 8004b44:	e00a      	b.n	8004b5c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b4c:	4b39      	ldr	r3, [pc, #228]	; (8004c34 <xQueueGenericSend+0x1f8>)
 8004b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b52:	601a      	str	r2, [r3, #0]
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b5c:	f001 ff02 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e063      	b.n	8004c2c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d103      	bne.n	8004b72 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b6a:	f001 fefb 	bl	8006964 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e05c      	b.n	8004c2c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d106      	bne.n	8004b86 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b78:	f107 0314 	add.w	r3, r7, #20
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f001 f809 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b86:	f001 feed 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b8a:	f000 fd7b 	bl	8005684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b8e:	f001 feb9 	bl	8006904 <vPortEnterCritical>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b98:	b25b      	sxtb	r3, r3
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b9e:	d103      	bne.n	8004ba8 <xQueueGenericSend+0x16c>
 8004ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004baa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bae:	b25b      	sxtb	r3, r3
 8004bb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bb4:	d103      	bne.n	8004bbe <xQueueGenericSend+0x182>
 8004bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bbe:	f001 fed1 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bc2:	1d3a      	adds	r2, r7, #4
 8004bc4:	f107 0314 	add.w	r3, r7, #20
 8004bc8:	4611      	mov	r1, r2
 8004bca:	4618      	mov	r0, r3
 8004bcc:	f000 fff8 	bl	8005bc0 <xTaskCheckForTimeOut>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d124      	bne.n	8004c20 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bd8:	f000 faa2 	bl	8005120 <prvIsQueueFull>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d018      	beq.n	8004c14 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be4:	3310      	adds	r3, #16
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	4611      	mov	r1, r2
 8004bea:	4618      	mov	r0, r3
 8004bec:	f000 ff1e 	bl	8005a2c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf2:	f000 fa2d 	bl	8005050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bf6:	f000 fd53 	bl	80056a0 <xTaskResumeAll>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	f47f af7c 	bne.w	8004afa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <xQueueGenericSend+0x1f8>)
 8004c04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	f3bf 8f4f 	dsb	sy
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	e772      	b.n	8004afa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c16:	f000 fa1b 	bl	8005050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c1a:	f000 fd41 	bl	80056a0 <xTaskResumeAll>
 8004c1e:	e76c      	b.n	8004afa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c22:	f000 fa15 	bl	8005050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c26:	f000 fd3b 	bl	80056a0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c2a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3738      	adds	r7, #56	; 0x38
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	e000ed04 	.word	0xe000ed04

08004c38 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b090      	sub	sp, #64	; 0x40
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <xQueueGenericSendFromISR+0x3c>
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <xQueueGenericSendFromISR+0x40>
 8004c74:	2301      	movs	r3, #1
 8004c76:	e000      	b.n	8004c7a <xQueueGenericSendFromISR+0x42>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10a      	bne.n	8004c94 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c82:	f383 8811 	msr	BASEPRI, r3
 8004c86:	f3bf 8f6f 	isb	sy
 8004c8a:	f3bf 8f4f 	dsb	sy
 8004c8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c90:	bf00      	nop
 8004c92:	e7fe      	b.n	8004c92 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d103      	bne.n	8004ca2 <xQueueGenericSendFromISR+0x6a>
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <xQueueGenericSendFromISR+0x6e>
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e000      	b.n	8004ca8 <xQueueGenericSendFromISR+0x70>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d10a      	bne.n	8004cc2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	f383 8811 	msr	BASEPRI, r3
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	623b      	str	r3, [r7, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	e7fe      	b.n	8004cc0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cc2:	f001 ff01 	bl	8006ac8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cc6:	f3ef 8211 	mrs	r2, BASEPRI
 8004cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cce:	f383 8811 	msr	BASEPRI, r3
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	f3bf 8f4f 	dsb	sy
 8004cda:	61fa      	str	r2, [r7, #28]
 8004cdc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cde:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ce0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d302      	bcc.n	8004cf4 <xQueueGenericSendFromISR+0xbc>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d12f      	bne.n	8004d54 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d0a:	f000 f911 	bl	8004f30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004d0e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d16:	d112      	bne.n	8004d3e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d016      	beq.n	8004d4e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d22:	3324      	adds	r3, #36	; 0x24
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fed1 	bl	8005acc <xTaskRemoveFromEventList>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00e      	beq.n	8004d4e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00b      	beq.n	8004d4e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e007      	b.n	8004d4e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d3e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d42:	3301      	adds	r3, #1
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	b25a      	sxtb	r2, r3
 8004d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d52:	e001      	b.n	8004d58 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d54:	2300      	movs	r3, #0
 8004d56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d62:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3740      	adds	r7, #64	; 0x40
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	; 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d10a      	bne.n	8004da0 <xQueueReceive+0x30>
	__asm volatile
 8004d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8e:	f383 8811 	msr	BASEPRI, r3
 8004d92:	f3bf 8f6f 	isb	sy
 8004d96:	f3bf 8f4f 	dsb	sy
 8004d9a:	623b      	str	r3, [r7, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	e7fe      	b.n	8004d9e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d103      	bne.n	8004dae <xQueueReceive+0x3e>
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <xQueueReceive+0x42>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <xQueueReceive+0x44>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xQueueReceive+0x5e>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	61fb      	str	r3, [r7, #28]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dce:	f001 f83b 	bl	8005e48 <xTaskGetSchedulerState>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d102      	bne.n	8004dde <xQueueReceive+0x6e>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <xQueueReceive+0x72>
 8004dde:	2301      	movs	r3, #1
 8004de0:	e000      	b.n	8004de4 <xQueueReceive+0x74>
 8004de2:	2300      	movs	r3, #0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <xQueueReceive+0x8e>
	__asm volatile
 8004de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dec:	f383 8811 	msr	BASEPRI, r3
 8004df0:	f3bf 8f6f 	isb	sy
 8004df4:	f3bf 8f4f 	dsb	sy
 8004df8:	61bb      	str	r3, [r7, #24]
}
 8004dfa:	bf00      	nop
 8004dfc:	e7fe      	b.n	8004dfc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dfe:	f001 fd81 	bl	8006904 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d01f      	beq.n	8004e4e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e12:	f000 f8f7 	bl	8005004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	1e5a      	subs	r2, r3, #1
 8004e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00f      	beq.n	8004e46 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	3310      	adds	r3, #16
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fe4e 	bl	8005acc <xTaskRemoveFromEventList>
 8004e30:	4603      	mov	r3, r0
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d007      	beq.n	8004e46 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e36:	4b3d      	ldr	r3, [pc, #244]	; (8004f2c <xQueueReceive+0x1bc>)
 8004e38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3c:	601a      	str	r2, [r3, #0]
 8004e3e:	f3bf 8f4f 	dsb	sy
 8004e42:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e46:	f001 fd8d 	bl	8006964 <vPortExitCritical>
				return pdPASS;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e069      	b.n	8004f22 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d103      	bne.n	8004e5c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e54:	f001 fd86 	bl	8006964 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e062      	b.n	8004f22 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e62:	f107 0310 	add.w	r3, r7, #16
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fe94 	bl	8005b94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e70:	f001 fd78 	bl	8006964 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e74:	f000 fc06 	bl	8005684 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e78:	f001 fd44 	bl	8006904 <vPortEnterCritical>
 8004e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e7e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e82:	b25b      	sxtb	r3, r3
 8004e84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e88:	d103      	bne.n	8004e92 <xQueueReceive+0x122>
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e98:	b25b      	sxtb	r3, r3
 8004e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e9e:	d103      	bne.n	8004ea8 <xQueueReceive+0x138>
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ea8:	f001 fd5c 	bl	8006964 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004eac:	1d3a      	adds	r2, r7, #4
 8004eae:	f107 0310 	add.w	r3, r7, #16
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fe83 	bl	8005bc0 <xTaskCheckForTimeOut>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d123      	bne.n	8004f08 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ec2:	f000 f917 	bl	80050f4 <prvIsQueueEmpty>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d017      	beq.n	8004efc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ece:	3324      	adds	r3, #36	; 0x24
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f000 fda9 	bl	8005a2c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004edc:	f000 f8b8 	bl	8005050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ee0:	f000 fbde 	bl	80056a0 <xTaskResumeAll>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d189      	bne.n	8004dfe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004eea:	4b10      	ldr	r3, [pc, #64]	; (8004f2c <xQueueReceive+0x1bc>)
 8004eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef0:	601a      	str	r2, [r3, #0]
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	e780      	b.n	8004dfe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004efc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004efe:	f000 f8a7 	bl	8005050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f02:	f000 fbcd 	bl	80056a0 <xTaskResumeAll>
 8004f06:	e77a      	b.n	8004dfe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f0a:	f000 f8a1 	bl	8005050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f0e:	f000 fbc7 	bl	80056a0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f14:	f000 f8ee 	bl	80050f4 <prvIsQueueEmpty>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f43f af6f 	beq.w	8004dfe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004f20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3730      	adds	r7, #48	; 0x30
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10d      	bne.n	8004f6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d14d      	bne.n	8004ff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 ff92 	bl	8005e84 <xTaskPriorityDisinherit>
 8004f60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	2200      	movs	r2, #0
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	e043      	b.n	8004ff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d119      	bne.n	8004fa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6858      	ldr	r0, [r3, #4]
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f78:	461a      	mov	r2, r3
 8004f7a:	68b9      	ldr	r1, [r7, #8]
 8004f7c:	f002 f844 	bl	8007008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685a      	ldr	r2, [r3, #4]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	441a      	add	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d32b      	bcc.n	8004ff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	605a      	str	r2, [r3, #4]
 8004fa2:	e026      	b.n	8004ff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68d8      	ldr	r0, [r3, #12]
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fac:	461a      	mov	r2, r3
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	f002 f82a 	bl	8007008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	68da      	ldr	r2, [r3, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	441a      	add	r2, r3
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d207      	bcs.n	8004fe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	425b      	negs	r3, r3
 8004fda:	441a      	add	r2, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d105      	bne.n	8004ff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	3b01      	subs	r3, #1
 8004ff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004ffa:	697b      	ldr	r3, [r7, #20]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3718      	adds	r7, #24
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	2b00      	cmp	r3, #0
 8005014:	d018      	beq.n	8005048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68da      	ldr	r2, [r3, #12]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	441a      	add	r2, r3
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	429a      	cmp	r2, r3
 800502e:	d303      	bcc.n	8005038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68d9      	ldr	r1, [r3, #12]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005040:	461a      	mov	r2, r3
 8005042:	6838      	ldr	r0, [r7, #0]
 8005044:	f001 ffe0 	bl	8007008 <memcpy>
	}
}
 8005048:	bf00      	nop
 800504a:	3708      	adds	r7, #8
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005058:	f001 fc54 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005064:	e011      	b.n	800508a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506a:	2b00      	cmp	r3, #0
 800506c:	d012      	beq.n	8005094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	3324      	adds	r3, #36	; 0x24
 8005072:	4618      	mov	r0, r3
 8005074:	f000 fd2a 	bl	8005acc <xTaskRemoveFromEventList>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800507e:	f000 fe01 	bl	8005c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005082:	7bfb      	ldrb	r3, [r7, #15]
 8005084:	3b01      	subs	r3, #1
 8005086:	b2db      	uxtb	r3, r3
 8005088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800508a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800508e:	2b00      	cmp	r3, #0
 8005090:	dce9      	bgt.n	8005066 <prvUnlockQueue+0x16>
 8005092:	e000      	b.n	8005096 <prvUnlockQueue+0x46>
					break;
 8005094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	22ff      	movs	r2, #255	; 0xff
 800509a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800509e:	f001 fc61 	bl	8006964 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80050a2:	f001 fc2f 	bl	8006904 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80050ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050ae:	e011      	b.n	80050d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d012      	beq.n	80050de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	3310      	adds	r3, #16
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fd05 	bl	8005acc <xTaskRemoveFromEventList>
 80050c2:	4603      	mov	r3, r0
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d001      	beq.n	80050cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80050c8:	f000 fddc 	bl	8005c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80050cc:	7bbb      	ldrb	r3, [r7, #14]
 80050ce:	3b01      	subs	r3, #1
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80050d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	dce9      	bgt.n	80050b0 <prvUnlockQueue+0x60>
 80050dc:	e000      	b.n	80050e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80050de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	22ff      	movs	r2, #255	; 0xff
 80050e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80050e8:	f001 fc3c 	bl	8006964 <vPortExitCritical>
}
 80050ec:	bf00      	nop
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80050fc:	f001 fc02 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005104:	2b00      	cmp	r3, #0
 8005106:	d102      	bne.n	800510e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005108:	2301      	movs	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	e001      	b.n	8005112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005112:	f001 fc27 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005116:	68fb      	ldr	r3, [r7, #12]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005128:	f001 fbec 	bl	8006904 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005134:	429a      	cmp	r2, r3
 8005136:	d102      	bne.n	800513e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005138:	2301      	movs	r3, #1
 800513a:	60fb      	str	r3, [r7, #12]
 800513c:	e001      	b.n	8005142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800513e:	2300      	movs	r3, #0
 8005140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005142:	f001 fc0f 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005146:	68fb      	ldr	r3, [r7, #12]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800515a:	2300      	movs	r3, #0
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	e014      	b.n	800518a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005160:	4a0f      	ldr	r2, [pc, #60]	; (80051a0 <vQueueAddToRegistry+0x50>)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d10b      	bne.n	8005184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <vQueueAddToRegistry+0x50>)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005176:	4a0a      	ldr	r2, [pc, #40]	; (80051a0 <vQueueAddToRegistry+0x50>)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	00db      	lsls	r3, r3, #3
 800517c:	4413      	add	r3, r2
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005182:	e006      	b.n	8005192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b07      	cmp	r3, #7
 800518e:	d9e7      	bls.n	8005160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005190:	bf00      	nop
 8005192:	bf00      	nop
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519c:	4770      	bx	lr
 800519e:	bf00      	nop
 80051a0:	20000c64 	.word	0x20000c64

080051a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b086      	sub	sp, #24
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80051b4:	f001 fba6 	bl	8006904 <vPortEnterCritical>
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051be:	b25b      	sxtb	r3, r3
 80051c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051c4:	d103      	bne.n	80051ce <vQueueWaitForMessageRestricted+0x2a>
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051d4:	b25b      	sxtb	r3, r3
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d103      	bne.n	80051e4 <vQueueWaitForMessageRestricted+0x40>
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051e4:	f001 fbbe 	bl	8006964 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	3324      	adds	r3, #36	; 0x24
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	68b9      	ldr	r1, [r7, #8]
 80051f8:	4618      	mov	r0, r3
 80051fa:	f000 fc3b 	bl	8005a74 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80051fe:	6978      	ldr	r0, [r7, #20]
 8005200:	f7ff ff26 	bl	8005050 <prvUnlockQueue>
	}
 8005204:	bf00      	nop
 8005206:	3718      	adds	r7, #24
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800520c:	b580      	push	{r7, lr}
 800520e:	b08e      	sub	sp, #56	; 0x38
 8005210:	af04      	add	r7, sp, #16
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	607a      	str	r2, [r7, #4]
 8005218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800521a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10a      	bne.n	8005236 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10a      	bne.n	8005252 <xTaskCreateStatic+0x46>
	__asm volatile
 800523c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005240:	f383 8811 	msr	BASEPRI, r3
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	f3bf 8f4f 	dsb	sy
 800524c:	61fb      	str	r3, [r7, #28]
}
 800524e:	bf00      	nop
 8005250:	e7fe      	b.n	8005250 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005252:	235c      	movs	r3, #92	; 0x5c
 8005254:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	2b5c      	cmp	r3, #92	; 0x5c
 800525a:	d00a      	beq.n	8005272 <xTaskCreateStatic+0x66>
	__asm volatile
 800525c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005260:	f383 8811 	msr	BASEPRI, r3
 8005264:	f3bf 8f6f 	isb	sy
 8005268:	f3bf 8f4f 	dsb	sy
 800526c:	61bb      	str	r3, [r7, #24]
}
 800526e:	bf00      	nop
 8005270:	e7fe      	b.n	8005270 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005272:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005276:	2b00      	cmp	r3, #0
 8005278:	d01e      	beq.n	80052b8 <xTaskCreateStatic+0xac>
 800527a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800527c:	2b00      	cmp	r3, #0
 800527e:	d01b      	beq.n	80052b8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005288:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800528a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528c:	2202      	movs	r2, #2
 800528e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005292:	2300      	movs	r3, #0
 8005294:	9303      	str	r3, [sp, #12]
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	f107 0314 	add.w	r3, r7, #20
 800529e:	9301      	str	r3, [sp, #4]
 80052a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f850 	bl	8005350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80052b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80052b2:	f000 f8dd 	bl	8005470 <prvAddNewTaskToReadyList>
 80052b6:	e001      	b.n	80052bc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80052bc:	697b      	ldr	r3, [r7, #20]
	}
 80052be:	4618      	mov	r0, r3
 80052c0:	3728      	adds	r7, #40	; 0x28
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bd80      	pop	{r7, pc}

080052c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80052c6:	b580      	push	{r7, lr}
 80052c8:	b08c      	sub	sp, #48	; 0x30
 80052ca:	af04      	add	r7, sp, #16
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	60b9      	str	r1, [r7, #8]
 80052d0:	603b      	str	r3, [r7, #0]
 80052d2:	4613      	mov	r3, r2
 80052d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80052d6:	88fb      	ldrh	r3, [r7, #6]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	4618      	mov	r0, r3
 80052dc:	f001 fc34 	bl	8006b48 <pvPortMalloc>
 80052e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00e      	beq.n	8005306 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80052e8:	205c      	movs	r0, #92	; 0x5c
 80052ea:	f001 fc2d 	bl	8006b48 <pvPortMalloc>
 80052ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30
 80052fc:	e005      	b.n	800530a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052fe:	6978      	ldr	r0, [r7, #20]
 8005300:	f001 fcee 	bl	8006ce0 <vPortFree>
 8005304:	e001      	b.n	800530a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005306:	2300      	movs	r3, #0
 8005308:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d017      	beq.n	8005340 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	2200      	movs	r2, #0
 8005314:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005318:	88fa      	ldrh	r2, [r7, #6]
 800531a:	2300      	movs	r3, #0
 800531c:	9303      	str	r3, [sp, #12]
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	9302      	str	r3, [sp, #8]
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	9301      	str	r3, [sp, #4]
 8005326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	68f8      	ldr	r0, [r7, #12]
 8005330:	f000 f80e 	bl	8005350 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005334:	69f8      	ldr	r0, [r7, #28]
 8005336:	f000 f89b 	bl	8005470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800533a:	2301      	movs	r3, #1
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	e002      	b.n	8005346 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005340:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005344:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005346:	69bb      	ldr	r3, [r7, #24]
	}
 8005348:	4618      	mov	r0, r3
 800534a:	3720      	adds	r7, #32
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b088      	sub	sp, #32
 8005354:	af00      	add	r7, sp, #0
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800535e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005360:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	461a      	mov	r2, r3
 8005368:	21a5      	movs	r1, #165	; 0xa5
 800536a:	f001 fe19 	bl	8006fa0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800536e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005370:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005378:	3b01      	subs	r3, #1
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	f003 0307 	and.w	r3, r3, #7
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00a      	beq.n	80053a8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	617b      	str	r3, [r7, #20]
}
 80053a4:	bf00      	nop
 80053a6:	e7fe      	b.n	80053a6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d01f      	beq.n	80053ee <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053ae:	2300      	movs	r3, #0
 80053b0:	61fb      	str	r3, [r7, #28]
 80053b2:	e012      	b.n	80053da <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	4413      	add	r3, r2
 80053ba:	7819      	ldrb	r1, [r3, #0]
 80053bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	4413      	add	r3, r2
 80053c2:	3334      	adds	r3, #52	; 0x34
 80053c4:	460a      	mov	r2, r1
 80053c6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d006      	beq.n	80053e2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	3301      	adds	r3, #1
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	2b0f      	cmp	r3, #15
 80053de:	d9e9      	bls.n	80053b4 <prvInitialiseNewTask+0x64>
 80053e0:	e000      	b.n	80053e4 <prvInitialiseNewTask+0x94>
			{
				break;
 80053e2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2200      	movs	r2, #0
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053ec:	e003      	b.n	80053f6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80053ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f0:	2200      	movs	r2, #0
 80053f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f8:	2b37      	cmp	r3, #55	; 0x37
 80053fa:	d901      	bls.n	8005400 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053fc:	2337      	movs	r3, #55	; 0x37
 80053fe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005402:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005404:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800540a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2200      	movs	r2, #0
 8005410:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005414:	3304      	adds	r3, #4
 8005416:	4618      	mov	r0, r3
 8005418:	f7ff f978 	bl	800470c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	3318      	adds	r3, #24
 8005420:	4618      	mov	r0, r3
 8005422:	f7ff f973 	bl	800470c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005428:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800542a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005434:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800543a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800543c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800543e:	2200      	movs	r2, #0
 8005440:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800544a:	683a      	ldr	r2, [r7, #0]
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	69b8      	ldr	r0, [r7, #24]
 8005450:	f001 f928 	bl	80066a4 <pxPortInitialiseStack>
 8005454:	4602      	mov	r2, r0
 8005456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005458:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800545a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d002      	beq.n	8005466 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005466:	bf00      	nop
 8005468:	3720      	adds	r7, #32
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005478:	f001 fa44 	bl	8006904 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800547c:	4b2d      	ldr	r3, [pc, #180]	; (8005534 <prvAddNewTaskToReadyList+0xc4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	4a2c      	ldr	r2, [pc, #176]	; (8005534 <prvAddNewTaskToReadyList+0xc4>)
 8005484:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005486:	4b2c      	ldr	r3, [pc, #176]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800548e:	4a2a      	ldr	r2, [pc, #168]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005494:	4b27      	ldr	r3, [pc, #156]	; (8005534 <prvAddNewTaskToReadyList+0xc4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d110      	bne.n	80054be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800549c:	f000 fc16 	bl	8005ccc <prvInitialiseTaskLists>
 80054a0:	e00d      	b.n	80054be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80054a2:	4b26      	ldr	r3, [pc, #152]	; (800553c <prvAddNewTaskToReadyList+0xcc>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d109      	bne.n	80054be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80054aa:	4b23      	ldr	r3, [pc, #140]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d802      	bhi.n	80054be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80054b8:	4a1f      	ldr	r2, [pc, #124]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80054be:	4b20      	ldr	r3, [pc, #128]	; (8005540 <prvAddNewTaskToReadyList+0xd0>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	3301      	adds	r3, #1
 80054c4:	4a1e      	ldr	r2, [pc, #120]	; (8005540 <prvAddNewTaskToReadyList+0xd0>)
 80054c6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <prvAddNewTaskToReadyList+0xd0>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054d4:	4b1b      	ldr	r3, [pc, #108]	; (8005544 <prvAddNewTaskToReadyList+0xd4>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d903      	bls.n	80054e4 <prvAddNewTaskToReadyList+0x74>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054e0:	4a18      	ldr	r2, [pc, #96]	; (8005544 <prvAddNewTaskToReadyList+0xd4>)
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a15      	ldr	r2, [pc, #84]	; (8005548 <prvAddNewTaskToReadyList+0xd8>)
 80054f2:	441a      	add	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7ff f913 	bl	8004726 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005500:	f001 fa30 	bl	8006964 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005504:	4b0d      	ldr	r3, [pc, #52]	; (800553c <prvAddNewTaskToReadyList+0xcc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d00e      	beq.n	800552a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <prvAddNewTaskToReadyList+0xc8>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	429a      	cmp	r2, r3
 8005518:	d207      	bcs.n	800552a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <prvAddNewTaskToReadyList+0xdc>)
 800551c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	f3bf 8f4f 	dsb	sy
 8005526:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800552a:	bf00      	nop
 800552c:	3708      	adds	r7, #8
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20001178 	.word	0x20001178
 8005538:	20000ca4 	.word	0x20000ca4
 800553c:	20001184 	.word	0x20001184
 8005540:	20001194 	.word	0x20001194
 8005544:	20001180 	.word	0x20001180
 8005548:	20000ca8 	.word	0x20000ca8
 800554c:	e000ed04 	.word	0xe000ed04

08005550 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d017      	beq.n	8005592 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005562:	4b13      	ldr	r3, [pc, #76]	; (80055b0 <vTaskDelay+0x60>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d00a      	beq.n	8005580 <vTaskDelay+0x30>
	__asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	60bb      	str	r3, [r7, #8]
}
 800557c:	bf00      	nop
 800557e:	e7fe      	b.n	800557e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005580:	f000 f880 	bl	8005684 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005584:	2100      	movs	r1, #0
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fcea 	bl	8005f60 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800558c:	f000 f888 	bl	80056a0 <xTaskResumeAll>
 8005590:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d107      	bne.n	80055a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005598:	4b06      	ldr	r3, [pc, #24]	; (80055b4 <vTaskDelay+0x64>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	200011a0 	.word	0x200011a0
 80055b4:	e000ed04 	.word	0xe000ed04

080055b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80055c6:	463a      	mov	r2, r7
 80055c8:	1d39      	adds	r1, r7, #4
 80055ca:	f107 0308 	add.w	r3, r7, #8
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff f848 	bl	8004664 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80055d4:	6839      	ldr	r1, [r7, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68ba      	ldr	r2, [r7, #8]
 80055da:	9202      	str	r2, [sp, #8]
 80055dc:	9301      	str	r3, [sp, #4]
 80055de:	2300      	movs	r3, #0
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	460a      	mov	r2, r1
 80055e6:	4921      	ldr	r1, [pc, #132]	; (800566c <vTaskStartScheduler+0xb4>)
 80055e8:	4821      	ldr	r0, [pc, #132]	; (8005670 <vTaskStartScheduler+0xb8>)
 80055ea:	f7ff fe0f 	bl	800520c <xTaskCreateStatic>
 80055ee:	4603      	mov	r3, r0
 80055f0:	4a20      	ldr	r2, [pc, #128]	; (8005674 <vTaskStartScheduler+0xbc>)
 80055f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055f4:	4b1f      	ldr	r3, [pc, #124]	; (8005674 <vTaskStartScheduler+0xbc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
 8005600:	e001      	b.n	8005606 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d102      	bne.n	8005612 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800560c:	f000 fcfc 	bl	8006008 <xTimerCreateTimerTask>
 8005610:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d116      	bne.n	8005646 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561c:	f383 8811 	msr	BASEPRI, r3
 8005620:	f3bf 8f6f 	isb	sy
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	613b      	str	r3, [r7, #16]
}
 800562a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800562c:	4b12      	ldr	r3, [pc, #72]	; (8005678 <vTaskStartScheduler+0xc0>)
 800562e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005632:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <vTaskStartScheduler+0xc4>)
 8005636:	2201      	movs	r2, #1
 8005638:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800563a:	4b11      	ldr	r3, [pc, #68]	; (8005680 <vTaskStartScheduler+0xc8>)
 800563c:	2200      	movs	r2, #0
 800563e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005640:	f001 f8be 	bl	80067c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005644:	e00e      	b.n	8005664 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800564c:	d10a      	bne.n	8005664 <vTaskStartScheduler+0xac>
	__asm volatile
 800564e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005652:	f383 8811 	msr	BASEPRI, r3
 8005656:	f3bf 8f6f 	isb	sy
 800565a:	f3bf 8f4f 	dsb	sy
 800565e:	60fb      	str	r3, [r7, #12]
}
 8005660:	bf00      	nop
 8005662:	e7fe      	b.n	8005662 <vTaskStartScheduler+0xaa>
}
 8005664:	bf00      	nop
 8005666:	3718      	adds	r7, #24
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	08007920 	.word	0x08007920
 8005670:	08005c9d 	.word	0x08005c9d
 8005674:	2000119c 	.word	0x2000119c
 8005678:	20001198 	.word	0x20001198
 800567c:	20001184 	.word	0x20001184
 8005680:	2000117c 	.word	0x2000117c

08005684 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005684:	b480      	push	{r7}
 8005686:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005688:	4b04      	ldr	r3, [pc, #16]	; (800569c <vTaskSuspendAll+0x18>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	3301      	adds	r3, #1
 800568e:	4a03      	ldr	r2, [pc, #12]	; (800569c <vTaskSuspendAll+0x18>)
 8005690:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200011a0 	.word	0x200011a0

080056a0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80056aa:	2300      	movs	r3, #0
 80056ac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80056ae:	4b42      	ldr	r3, [pc, #264]	; (80057b8 <xTaskResumeAll+0x118>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10a      	bne.n	80056cc <xTaskResumeAll+0x2c>
	__asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	603b      	str	r3, [r7, #0]
}
 80056c8:	bf00      	nop
 80056ca:	e7fe      	b.n	80056ca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80056cc:	f001 f91a 	bl	8006904 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80056d0:	4b39      	ldr	r3, [pc, #228]	; (80057b8 <xTaskResumeAll+0x118>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3b01      	subs	r3, #1
 80056d6:	4a38      	ldr	r2, [pc, #224]	; (80057b8 <xTaskResumeAll+0x118>)
 80056d8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056da:	4b37      	ldr	r3, [pc, #220]	; (80057b8 <xTaskResumeAll+0x118>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d162      	bne.n	80057a8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056e2:	4b36      	ldr	r3, [pc, #216]	; (80057bc <xTaskResumeAll+0x11c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d05e      	beq.n	80057a8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056ea:	e02f      	b.n	800574c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ec:	4b34      	ldr	r3, [pc, #208]	; (80057c0 <xTaskResumeAll+0x120>)
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	68db      	ldr	r3, [r3, #12]
 80056f2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	3318      	adds	r3, #24
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7ff f871 	bl	80047e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	3304      	adds	r3, #4
 8005702:	4618      	mov	r0, r3
 8005704:	f7ff f86c 	bl	80047e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4b2d      	ldr	r3, [pc, #180]	; (80057c4 <xTaskResumeAll+0x124>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	429a      	cmp	r2, r3
 8005712:	d903      	bls.n	800571c <xTaskResumeAll+0x7c>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	4a2a      	ldr	r2, [pc, #168]	; (80057c4 <xTaskResumeAll+0x124>)
 800571a:	6013      	str	r3, [r2, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005720:	4613      	mov	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4413      	add	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4a27      	ldr	r2, [pc, #156]	; (80057c8 <xTaskResumeAll+0x128>)
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	3304      	adds	r3, #4
 8005730:	4619      	mov	r1, r3
 8005732:	4610      	mov	r0, r2
 8005734:	f7fe fff7 	bl	8004726 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573c:	4b23      	ldr	r3, [pc, #140]	; (80057cc <xTaskResumeAll+0x12c>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005742:	429a      	cmp	r2, r3
 8005744:	d302      	bcc.n	800574c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005746:	4b22      	ldr	r3, [pc, #136]	; (80057d0 <xTaskResumeAll+0x130>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800574c:	4b1c      	ldr	r3, [pc, #112]	; (80057c0 <xTaskResumeAll+0x120>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d1cb      	bne.n	80056ec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800575a:	f000 fb55 	bl	8005e08 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800575e:	4b1d      	ldr	r3, [pc, #116]	; (80057d4 <xTaskResumeAll+0x134>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d010      	beq.n	800578c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800576a:	f000 f847 	bl	80057fc <xTaskIncrementTick>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005774:	4b16      	ldr	r3, [pc, #88]	; (80057d0 <xTaskResumeAll+0x130>)
 8005776:	2201      	movs	r2, #1
 8005778:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3b01      	subs	r3, #1
 800577e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f1      	bne.n	800576a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005786:	4b13      	ldr	r3, [pc, #76]	; (80057d4 <xTaskResumeAll+0x134>)
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800578c:	4b10      	ldr	r3, [pc, #64]	; (80057d0 <xTaskResumeAll+0x130>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d009      	beq.n	80057a8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005794:	2301      	movs	r3, #1
 8005796:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005798:	4b0f      	ldr	r3, [pc, #60]	; (80057d8 <xTaskResumeAll+0x138>)
 800579a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80057a8:	f001 f8dc 	bl	8006964 <vPortExitCritical>

	return xAlreadyYielded;
 80057ac:	68bb      	ldr	r3, [r7, #8]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	200011a0 	.word	0x200011a0
 80057bc:	20001178 	.word	0x20001178
 80057c0:	20001138 	.word	0x20001138
 80057c4:	20001180 	.word	0x20001180
 80057c8:	20000ca8 	.word	0x20000ca8
 80057cc:	20000ca4 	.word	0x20000ca4
 80057d0:	2000118c 	.word	0x2000118c
 80057d4:	20001188 	.word	0x20001188
 80057d8:	e000ed04 	.word	0xe000ed04

080057dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057e2:	4b05      	ldr	r3, [pc, #20]	; (80057f8 <xTaskGetTickCount+0x1c>)
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057e8:	687b      	ldr	r3, [r7, #4]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	370c      	adds	r7, #12
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	2000117c 	.word	0x2000117c

080057fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005806:	4b4f      	ldr	r3, [pc, #316]	; (8005944 <xTaskIncrementTick+0x148>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	f040 808f 	bne.w	800592e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005810:	4b4d      	ldr	r3, [pc, #308]	; (8005948 <xTaskIncrementTick+0x14c>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	3301      	adds	r3, #1
 8005816:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005818:	4a4b      	ldr	r2, [pc, #300]	; (8005948 <xTaskIncrementTick+0x14c>)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d120      	bne.n	8005866 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005824:	4b49      	ldr	r3, [pc, #292]	; (800594c <xTaskIncrementTick+0x150>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <xTaskIncrementTick+0x48>
	__asm volatile
 800582e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005832:	f383 8811 	msr	BASEPRI, r3
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	603b      	str	r3, [r7, #0]
}
 8005840:	bf00      	nop
 8005842:	e7fe      	b.n	8005842 <xTaskIncrementTick+0x46>
 8005844:	4b41      	ldr	r3, [pc, #260]	; (800594c <xTaskIncrementTick+0x150>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	4b41      	ldr	r3, [pc, #260]	; (8005950 <xTaskIncrementTick+0x154>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a3f      	ldr	r2, [pc, #252]	; (800594c <xTaskIncrementTick+0x150>)
 8005850:	6013      	str	r3, [r2, #0]
 8005852:	4a3f      	ldr	r2, [pc, #252]	; (8005950 <xTaskIncrementTick+0x154>)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6013      	str	r3, [r2, #0]
 8005858:	4b3e      	ldr	r3, [pc, #248]	; (8005954 <xTaskIncrementTick+0x158>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3301      	adds	r3, #1
 800585e:	4a3d      	ldr	r2, [pc, #244]	; (8005954 <xTaskIncrementTick+0x158>)
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	f000 fad1 	bl	8005e08 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005866:	4b3c      	ldr	r3, [pc, #240]	; (8005958 <xTaskIncrementTick+0x15c>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	429a      	cmp	r2, r3
 800586e:	d349      	bcc.n	8005904 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <xTaskIncrementTick+0x150>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d104      	bne.n	8005884 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800587a:	4b37      	ldr	r3, [pc, #220]	; (8005958 <xTaskIncrementTick+0x15c>)
 800587c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005880:	601a      	str	r2, [r3, #0]
					break;
 8005882:	e03f      	b.n	8005904 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005884:	4b31      	ldr	r3, [pc, #196]	; (800594c <xTaskIncrementTick+0x150>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005894:	693a      	ldr	r2, [r7, #16]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d203      	bcs.n	80058a4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800589c:	4a2e      	ldr	r2, [pc, #184]	; (8005958 <xTaskIncrementTick+0x15c>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058a2:	e02f      	b.n	8005904 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	3304      	adds	r3, #4
 80058a8:	4618      	mov	r0, r3
 80058aa:	f7fe ff99 	bl	80047e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d004      	beq.n	80058c0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	3318      	adds	r3, #24
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe ff90 	bl	80047e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058c4:	4b25      	ldr	r3, [pc, #148]	; (800595c <xTaskIncrementTick+0x160>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d903      	bls.n	80058d4 <xTaskIncrementTick+0xd8>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d0:	4a22      	ldr	r2, [pc, #136]	; (800595c <xTaskIncrementTick+0x160>)
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058d8:	4613      	mov	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	4a1f      	ldr	r2, [pc, #124]	; (8005960 <xTaskIncrementTick+0x164>)
 80058e2:	441a      	add	r2, r3
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4619      	mov	r1, r3
 80058ea:	4610      	mov	r0, r2
 80058ec:	f7fe ff1b 	bl	8004726 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <xTaskIncrementTick+0x168>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d3b8      	bcc.n	8005870 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80058fe:	2301      	movs	r3, #1
 8005900:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005902:	e7b5      	b.n	8005870 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005904:	4b17      	ldr	r3, [pc, #92]	; (8005964 <xTaskIncrementTick+0x168>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800590a:	4915      	ldr	r1, [pc, #84]	; (8005960 <xTaskIncrementTick+0x164>)
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d901      	bls.n	8005920 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800591c:	2301      	movs	r3, #1
 800591e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005920:	4b11      	ldr	r3, [pc, #68]	; (8005968 <xTaskIncrementTick+0x16c>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d007      	beq.n	8005938 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e004      	b.n	8005938 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800592e:	4b0f      	ldr	r3, [pc, #60]	; (800596c <xTaskIncrementTick+0x170>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	3301      	adds	r3, #1
 8005934:	4a0d      	ldr	r2, [pc, #52]	; (800596c <xTaskIncrementTick+0x170>)
 8005936:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005938:	697b      	ldr	r3, [r7, #20]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	200011a0 	.word	0x200011a0
 8005948:	2000117c 	.word	0x2000117c
 800594c:	20001130 	.word	0x20001130
 8005950:	20001134 	.word	0x20001134
 8005954:	20001190 	.word	0x20001190
 8005958:	20001198 	.word	0x20001198
 800595c:	20001180 	.word	0x20001180
 8005960:	20000ca8 	.word	0x20000ca8
 8005964:	20000ca4 	.word	0x20000ca4
 8005968:	2000118c 	.word	0x2000118c
 800596c:	20001188 	.word	0x20001188

08005970 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005976:	4b28      	ldr	r3, [pc, #160]	; (8005a18 <vTaskSwitchContext+0xa8>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d003      	beq.n	8005986 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800597e:	4b27      	ldr	r3, [pc, #156]	; (8005a1c <vTaskSwitchContext+0xac>)
 8005980:	2201      	movs	r2, #1
 8005982:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005984:	e041      	b.n	8005a0a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005986:	4b25      	ldr	r3, [pc, #148]	; (8005a1c <vTaskSwitchContext+0xac>)
 8005988:	2200      	movs	r2, #0
 800598a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800598c:	4b24      	ldr	r3, [pc, #144]	; (8005a20 <vTaskSwitchContext+0xb0>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60fb      	str	r3, [r7, #12]
 8005992:	e010      	b.n	80059b6 <vTaskSwitchContext+0x46>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d10a      	bne.n	80059b0 <vTaskSwitchContext+0x40>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	607b      	str	r3, [r7, #4]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <vTaskSwitchContext+0x3e>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	3b01      	subs	r3, #1
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	491b      	ldr	r1, [pc, #108]	; (8005a24 <vTaskSwitchContext+0xb4>)
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4613      	mov	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4413      	add	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	440b      	add	r3, r1
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0e4      	beq.n	8005994 <vTaskSwitchContext+0x24>
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <vTaskSwitchContext+0xb4>)
 80059d6:	4413      	add	r3, r2
 80059d8:	60bb      	str	r3, [r7, #8]
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	605a      	str	r2, [r3, #4]
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	3308      	adds	r3, #8
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d104      	bne.n	80059fa <vTaskSwitchContext+0x8a>
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	685a      	ldr	r2, [r3, #4]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	605a      	str	r2, [r3, #4]
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a09      	ldr	r2, [pc, #36]	; (8005a28 <vTaskSwitchContext+0xb8>)
 8005a02:	6013      	str	r3, [r2, #0]
 8005a04:	4a06      	ldr	r2, [pc, #24]	; (8005a20 <vTaskSwitchContext+0xb0>)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6013      	str	r3, [r2, #0]
}
 8005a0a:	bf00      	nop
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	200011a0 	.word	0x200011a0
 8005a1c:	2000118c 	.word	0x2000118c
 8005a20:	20001180 	.word	0x20001180
 8005a24:	20000ca8 	.word	0x20000ca8
 8005a28:	20000ca4 	.word	0x20000ca4

08005a2c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d10a      	bne.n	8005a52 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a40:	f383 8811 	msr	BASEPRI, r3
 8005a44:	f3bf 8f6f 	isb	sy
 8005a48:	f3bf 8f4f 	dsb	sy
 8005a4c:	60fb      	str	r3, [r7, #12]
}
 8005a4e:	bf00      	nop
 8005a50:	e7fe      	b.n	8005a50 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a52:	4b07      	ldr	r3, [pc, #28]	; (8005a70 <vTaskPlaceOnEventList+0x44>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3318      	adds	r3, #24
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fe fe87 	bl	800476e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a60:	2101      	movs	r1, #1
 8005a62:	6838      	ldr	r0, [r7, #0]
 8005a64:	f000 fa7c 	bl	8005f60 <prvAddCurrentTaskToDelayedList>
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}
 8005a70:	20000ca4 	.word	0x20000ca4

08005a74 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b086      	sub	sp, #24
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d10a      	bne.n	8005a9c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	617b      	str	r3, [r7, #20]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ac8 <vTaskPlaceOnEventListRestricted+0x54>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3318      	adds	r3, #24
 8005aa2:	4619      	mov	r1, r3
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7fe fe3e 	bl	8004726 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ab0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ab6:	6879      	ldr	r1, [r7, #4]
 8005ab8:	68b8      	ldr	r0, [r7, #8]
 8005aba:	f000 fa51 	bl	8005f60 <prvAddCurrentTaskToDelayedList>
	}
 8005abe:	bf00      	nop
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000ca4 	.word	0x20000ca4

08005acc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b086      	sub	sp, #24
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d10a      	bne.n	8005af8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae6:	f383 8811 	msr	BASEPRI, r3
 8005aea:	f3bf 8f6f 	isb	sy
 8005aee:	f3bf 8f4f 	dsb	sy
 8005af2:	60fb      	str	r3, [r7, #12]
}
 8005af4:	bf00      	nop
 8005af6:	e7fe      	b.n	8005af6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	3318      	adds	r3, #24
 8005afc:	4618      	mov	r0, r3
 8005afe:	f7fe fe6f 	bl	80047e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <xTaskRemoveFromEventList+0xb0>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d11d      	bne.n	8005b46 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fe66 	bl	80047e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <xTaskRemoveFromEventList+0xb4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d903      	bls.n	8005b28 <xTaskRemoveFromEventList+0x5c>
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b24:	4a16      	ldr	r2, [pc, #88]	; (8005b80 <xTaskRemoveFromEventList+0xb4>)
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4a13      	ldr	r2, [pc, #76]	; (8005b84 <xTaskRemoveFromEventList+0xb8>)
 8005b36:	441a      	add	r2, r3
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	f7fe fdf1 	bl	8004726 <vListInsertEnd>
 8005b44:	e005      	b.n	8005b52 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	3318      	adds	r3, #24
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	480e      	ldr	r0, [pc, #56]	; (8005b88 <xTaskRemoveFromEventList+0xbc>)
 8005b4e:	f7fe fdea 	bl	8004726 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b56:	4b0d      	ldr	r3, [pc, #52]	; (8005b8c <xTaskRemoveFromEventList+0xc0>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d905      	bls.n	8005b6c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b60:	2301      	movs	r3, #1
 8005b62:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b64:	4b0a      	ldr	r3, [pc, #40]	; (8005b90 <xTaskRemoveFromEventList+0xc4>)
 8005b66:	2201      	movs	r2, #1
 8005b68:	601a      	str	r2, [r3, #0]
 8005b6a:	e001      	b.n	8005b70 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b70:	697b      	ldr	r3, [r7, #20]
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	200011a0 	.word	0x200011a0
 8005b80:	20001180 	.word	0x20001180
 8005b84:	20000ca8 	.word	0x20000ca8
 8005b88:	20001138 	.word	0x20001138
 8005b8c:	20000ca4 	.word	0x20000ca4
 8005b90:	2000118c 	.word	0x2000118c

08005b94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005b9c:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <vTaskInternalSetTimeOutState+0x24>)
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <vTaskInternalSetTimeOutState+0x28>)
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	605a      	str	r2, [r3, #4]
}
 8005bac:	bf00      	nop
 8005bae:	370c      	adds	r7, #12
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr
 8005bb8:	20001190 	.word	0x20001190
 8005bbc:	2000117c 	.word	0x2000117c

08005bc0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b088      	sub	sp, #32
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10a      	bne.n	8005be6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd4:	f383 8811 	msr	BASEPRI, r3
 8005bd8:	f3bf 8f6f 	isb	sy
 8005bdc:	f3bf 8f4f 	dsb	sy
 8005be0:	613b      	str	r3, [r7, #16]
}
 8005be2:	bf00      	nop
 8005be4:	e7fe      	b.n	8005be4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d10a      	bne.n	8005c02 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60fb      	str	r3, [r7, #12]
}
 8005bfe:	bf00      	nop
 8005c00:	e7fe      	b.n	8005c00 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c02:	f000 fe7f 	bl	8006904 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c06:	4b1d      	ldr	r3, [pc, #116]	; (8005c7c <xTaskCheckForTimeOut+0xbc>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	69ba      	ldr	r2, [r7, #24]
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1e:	d102      	bne.n	8005c26 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	e023      	b.n	8005c6e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <xTaskCheckForTimeOut+0xc0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d007      	beq.n	8005c42 <xTaskCheckForTimeOut+0x82>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d302      	bcc.n	8005c42 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	e015      	b.n	8005c6e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d20b      	bcs.n	8005c64 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	1ad2      	subs	r2, r2, r3
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff ff9b 	bl	8005b94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	61fb      	str	r3, [r7, #28]
 8005c62:	e004      	b.n	8005c6e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c6e:	f000 fe79 	bl	8006964 <vPortExitCritical>

	return xReturn;
 8005c72:	69fb      	ldr	r3, [r7, #28]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3720      	adds	r7, #32
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000117c 	.word	0x2000117c
 8005c80:	20001190 	.word	0x20001190

08005c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <vTaskMissedYield+0x14>)
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	601a      	str	r2, [r3, #0]
}
 8005c8e:	bf00      	nop
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	2000118c 	.word	0x2000118c

08005c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ca4:	f000 f852 	bl	8005d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ca8:	4b06      	ldr	r3, [pc, #24]	; (8005cc4 <prvIdleTask+0x28>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d9f9      	bls.n	8005ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cb0:	4b05      	ldr	r3, [pc, #20]	; (8005cc8 <prvIdleTask+0x2c>)
 8005cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cb6:	601a      	str	r2, [r3, #0]
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005cc0:	e7f0      	b.n	8005ca4 <prvIdleTask+0x8>
 8005cc2:	bf00      	nop
 8005cc4:	20000ca8 	.word	0x20000ca8
 8005cc8:	e000ed04 	.word	0xe000ed04

08005ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	607b      	str	r3, [r7, #4]
 8005cd6:	e00c      	b.n	8005cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4613      	mov	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	4a12      	ldr	r2, [pc, #72]	; (8005d2c <prvInitialiseTaskLists+0x60>)
 8005ce4:	4413      	add	r3, r2
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fcf0 	bl	80046cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	3301      	adds	r3, #1
 8005cf0:	607b      	str	r3, [r7, #4]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b37      	cmp	r3, #55	; 0x37
 8005cf6:	d9ef      	bls.n	8005cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005cf8:	480d      	ldr	r0, [pc, #52]	; (8005d30 <prvInitialiseTaskLists+0x64>)
 8005cfa:	f7fe fce7 	bl	80046cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005cfe:	480d      	ldr	r0, [pc, #52]	; (8005d34 <prvInitialiseTaskLists+0x68>)
 8005d00:	f7fe fce4 	bl	80046cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005d04:	480c      	ldr	r0, [pc, #48]	; (8005d38 <prvInitialiseTaskLists+0x6c>)
 8005d06:	f7fe fce1 	bl	80046cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005d0a:	480c      	ldr	r0, [pc, #48]	; (8005d3c <prvInitialiseTaskLists+0x70>)
 8005d0c:	f7fe fcde 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005d10:	480b      	ldr	r0, [pc, #44]	; (8005d40 <prvInitialiseTaskLists+0x74>)
 8005d12:	f7fe fcdb 	bl	80046cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005d16:	4b0b      	ldr	r3, [pc, #44]	; (8005d44 <prvInitialiseTaskLists+0x78>)
 8005d18:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <prvInitialiseTaskLists+0x64>)
 8005d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005d1c:	4b0a      	ldr	r3, [pc, #40]	; (8005d48 <prvInitialiseTaskLists+0x7c>)
 8005d1e:	4a05      	ldr	r2, [pc, #20]	; (8005d34 <prvInitialiseTaskLists+0x68>)
 8005d20:	601a      	str	r2, [r3, #0]
}
 8005d22:	bf00      	nop
 8005d24:	3708      	adds	r7, #8
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	20000ca8 	.word	0x20000ca8
 8005d30:	20001108 	.word	0x20001108
 8005d34:	2000111c 	.word	0x2000111c
 8005d38:	20001138 	.word	0x20001138
 8005d3c:	2000114c 	.word	0x2000114c
 8005d40:	20001164 	.word	0x20001164
 8005d44:	20001130 	.word	0x20001130
 8005d48:	20001134 	.word	0x20001134

08005d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b082      	sub	sp, #8
 8005d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d52:	e019      	b.n	8005d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005d54:	f000 fdd6 	bl	8006904 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d58:	4b10      	ldr	r3, [pc, #64]	; (8005d9c <prvCheckTasksWaitingTermination+0x50>)
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4618      	mov	r0, r3
 8005d66:	f7fe fd3b 	bl	80047e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <prvCheckTasksWaitingTermination+0x54>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <prvCheckTasksWaitingTermination+0x54>)
 8005d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005d74:	4b0b      	ldr	r3, [pc, #44]	; (8005da4 <prvCheckTasksWaitingTermination+0x58>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	4a0a      	ldr	r2, [pc, #40]	; (8005da4 <prvCheckTasksWaitingTermination+0x58>)
 8005d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005d7e:	f000 fdf1 	bl	8006964 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f810 	bl	8005da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005d88:	4b06      	ldr	r3, [pc, #24]	; (8005da4 <prvCheckTasksWaitingTermination+0x58>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d1e1      	bne.n	8005d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005d90:	bf00      	nop
 8005d92:	bf00      	nop
 8005d94:	3708      	adds	r7, #8
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	2000114c 	.word	0x2000114c
 8005da0:	20001178 	.word	0x20001178
 8005da4:	20001160 	.word	0x20001160

08005da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d108      	bne.n	8005dcc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 ff8e 	bl	8006ce0 <vPortFree>
				vPortFree( pxTCB );
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 ff8b 	bl	8006ce0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005dca:	e018      	b.n	8005dfe <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d103      	bne.n	8005dde <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 ff82 	bl	8006ce0 <vPortFree>
	}
 8005ddc:	e00f      	b.n	8005dfe <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d00a      	beq.n	8005dfe <prvDeleteTCB+0x56>
	__asm volatile
 8005de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dec:	f383 8811 	msr	BASEPRI, r3
 8005df0:	f3bf 8f6f 	isb	sy
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	60fb      	str	r3, [r7, #12]
}
 8005dfa:	bf00      	nop
 8005dfc:	e7fe      	b.n	8005dfc <prvDeleteTCB+0x54>
	}
 8005dfe:	bf00      	nop
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
	...

08005e08 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <prvResetNextTaskUnblockTime+0x38>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d104      	bne.n	8005e22 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e18:	4b0a      	ldr	r3, [pc, #40]	; (8005e44 <prvResetNextTaskUnblockTime+0x3c>)
 8005e1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005e1e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005e20:	e008      	b.n	8005e34 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e22:	4b07      	ldr	r3, [pc, #28]	; (8005e40 <prvResetNextTaskUnblockTime+0x38>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	68db      	ldr	r3, [r3, #12]
 8005e2a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4a04      	ldr	r2, [pc, #16]	; (8005e44 <prvResetNextTaskUnblockTime+0x3c>)
 8005e32:	6013      	str	r3, [r2, #0]
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	20001130 	.word	0x20001130
 8005e44:	20001198 	.word	0x20001198

08005e48 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005e4e:	4b0b      	ldr	r3, [pc, #44]	; (8005e7c <xTaskGetSchedulerState+0x34>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d102      	bne.n	8005e5c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005e56:	2301      	movs	r3, #1
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	e008      	b.n	8005e6e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e5c:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <xTaskGetSchedulerState+0x38>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005e64:	2302      	movs	r3, #2
 8005e66:	607b      	str	r3, [r7, #4]
 8005e68:	e001      	b.n	8005e6e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005e6e:	687b      	ldr	r3, [r7, #4]
	}
 8005e70:	4618      	mov	r0, r3
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	20001184 	.word	0x20001184
 8005e80:	200011a0 	.word	0x200011a0

08005e84 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005e90:	2300      	movs	r3, #0
 8005e92:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d056      	beq.n	8005f48 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005e9a:	4b2e      	ldr	r3, [pc, #184]	; (8005f54 <xTaskPriorityDisinherit+0xd0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d00a      	beq.n	8005eba <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ea8:	f383 8811 	msr	BASEPRI, r3
 8005eac:	f3bf 8f6f 	isb	sy
 8005eb0:	f3bf 8f4f 	dsb	sy
 8005eb4:	60fb      	str	r3, [r7, #12]
}
 8005eb6:	bf00      	nop
 8005eb8:	e7fe      	b.n	8005eb8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d10a      	bne.n	8005ed8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60bb      	str	r3, [r7, #8]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005edc:	1e5a      	subs	r2, r3, #1
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d02c      	beq.n	8005f48 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d128      	bne.n	8005f48 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	3304      	adds	r3, #4
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fc70 	bl	80047e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f18:	4b0f      	ldr	r3, [pc, #60]	; (8005f58 <xTaskPriorityDisinherit+0xd4>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d903      	bls.n	8005f28 <xTaskPriorityDisinherit+0xa4>
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f24:	4a0c      	ldr	r2, [pc, #48]	; (8005f58 <xTaskPriorityDisinherit+0xd4>)
 8005f26:	6013      	str	r3, [r2, #0]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	4a09      	ldr	r2, [pc, #36]	; (8005f5c <xTaskPriorityDisinherit+0xd8>)
 8005f36:	441a      	add	r2, r3
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4610      	mov	r0, r2
 8005f40:	f7fe fbf1 	bl	8004726 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005f48:	697b      	ldr	r3, [r7, #20]
	}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	20000ca4 	.word	0x20000ca4
 8005f58:	20001180 	.word	0x20001180
 8005f5c:	20000ca8 	.word	0x20000ca8

08005f60 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b084      	sub	sp, #16
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f6a:	4b21      	ldr	r3, [pc, #132]	; (8005ff0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f70:	4b20      	ldr	r3, [pc, #128]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3304      	adds	r3, #4
 8005f76:	4618      	mov	r0, r3
 8005f78:	f7fe fc32 	bl	80047e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f82:	d10a      	bne.n	8005f9a <prvAddCurrentTaskToDelayedList+0x3a>
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d007      	beq.n	8005f9a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f8a:	4b1a      	ldr	r3, [pc, #104]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3304      	adds	r3, #4
 8005f90:	4619      	mov	r1, r3
 8005f92:	4819      	ldr	r0, [pc, #100]	; (8005ff8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f94:	f7fe fbc7 	bl	8004726 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f98:	e026      	b.n	8005fe8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fa2:	4b14      	ldr	r3, [pc, #80]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68ba      	ldr	r2, [r7, #8]
 8005fa8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d209      	bcs.n	8005fc6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fb2:	4b12      	ldr	r3, [pc, #72]	; (8005ffc <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f7fe fbd5 	bl	800476e <vListInsert>
}
 8005fc4:	e010      	b.n	8005fe8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	4b0a      	ldr	r3, [pc, #40]	; (8005ff4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f7fe fbcb 	bl	800476e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fd8:	4b0a      	ldr	r3, [pc, #40]	; (8006004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d202      	bcs.n	8005fe8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fe2:	4a08      	ldr	r2, [pc, #32]	; (8006004 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	6013      	str	r3, [r2, #0]
}
 8005fe8:	bf00      	nop
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	2000117c 	.word	0x2000117c
 8005ff4:	20000ca4 	.word	0x20000ca4
 8005ff8:	20001164 	.word	0x20001164
 8005ffc:	20001134 	.word	0x20001134
 8006000:	20001130 	.word	0x20001130
 8006004:	20001198 	.word	0x20001198

08006008 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800600e:	2300      	movs	r3, #0
 8006010:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006012:	f000 fb07 	bl	8006624 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006016:	4b1c      	ldr	r3, [pc, #112]	; (8006088 <xTimerCreateTimerTask+0x80>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d021      	beq.n	8006062 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006022:	2300      	movs	r3, #0
 8006024:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006026:	1d3a      	adds	r2, r7, #4
 8006028:	f107 0108 	add.w	r1, r7, #8
 800602c:	f107 030c 	add.w	r3, r7, #12
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe fb31 	bl	8004698 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	68fa      	ldr	r2, [r7, #12]
 800603c:	9202      	str	r2, [sp, #8]
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	2302      	movs	r3, #2
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2300      	movs	r3, #0
 8006046:	460a      	mov	r2, r1
 8006048:	4910      	ldr	r1, [pc, #64]	; (800608c <xTimerCreateTimerTask+0x84>)
 800604a:	4811      	ldr	r0, [pc, #68]	; (8006090 <xTimerCreateTimerTask+0x88>)
 800604c:	f7ff f8de 	bl	800520c <xTaskCreateStatic>
 8006050:	4603      	mov	r3, r0
 8006052:	4a10      	ldr	r2, [pc, #64]	; (8006094 <xTimerCreateTimerTask+0x8c>)
 8006054:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006056:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <xTimerCreateTimerTask+0x8c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800605e:	2301      	movs	r3, #1
 8006060:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10a      	bne.n	800607e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	613b      	str	r3, [r7, #16]
}
 800607a:	bf00      	nop
 800607c:	e7fe      	b.n	800607c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800607e:	697b      	ldr	r3, [r7, #20]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	200011d4 	.word	0x200011d4
 800608c:	08007928 	.word	0x08007928
 8006090:	080061cd 	.word	0x080061cd
 8006094:	200011d8 	.word	0x200011d8

08006098 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
 80060a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10a      	bne.n	80060c6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	e7fe      	b.n	80060c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80060c6:	4b1a      	ldr	r3, [pc, #104]	; (8006130 <xTimerGenericCommand+0x98>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d02a      	beq.n	8006124 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	2b05      	cmp	r3, #5
 80060de:	dc18      	bgt.n	8006112 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80060e0:	f7ff feb2 	bl	8005e48 <xTaskGetSchedulerState>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d109      	bne.n	80060fe <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80060ea:	4b11      	ldr	r3, [pc, #68]	; (8006130 <xTimerGenericCommand+0x98>)
 80060ec:	6818      	ldr	r0, [r3, #0]
 80060ee:	f107 0110 	add.w	r1, r7, #16
 80060f2:	2300      	movs	r3, #0
 80060f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f6:	f7fe fca1 	bl	8004a3c <xQueueGenericSend>
 80060fa:	6278      	str	r0, [r7, #36]	; 0x24
 80060fc:	e012      	b.n	8006124 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80060fe:	4b0c      	ldr	r3, [pc, #48]	; (8006130 <xTimerGenericCommand+0x98>)
 8006100:	6818      	ldr	r0, [r3, #0]
 8006102:	f107 0110 	add.w	r1, r7, #16
 8006106:	2300      	movs	r3, #0
 8006108:	2200      	movs	r2, #0
 800610a:	f7fe fc97 	bl	8004a3c <xQueueGenericSend>
 800610e:	6278      	str	r0, [r7, #36]	; 0x24
 8006110:	e008      	b.n	8006124 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006112:	4b07      	ldr	r3, [pc, #28]	; (8006130 <xTimerGenericCommand+0x98>)
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	f107 0110 	add.w	r1, r7, #16
 800611a:	2300      	movs	r3, #0
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	f7fe fd8b 	bl	8004c38 <xQueueGenericSendFromISR>
 8006122:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006126:	4618      	mov	r0, r3
 8006128:	3728      	adds	r7, #40	; 0x28
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	200011d4 	.word	0x200011d4

08006134 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af02      	add	r7, sp, #8
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800613e:	4b22      	ldr	r3, [pc, #136]	; (80061c8 <prvProcessExpiredTimer+0x94>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	3304      	adds	r3, #4
 800614c:	4618      	mov	r0, r3
 800614e:	f7fe fb47 	bl	80047e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d022      	beq.n	80061a6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	699a      	ldr	r2, [r3, #24]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	18d1      	adds	r1, r2, r3
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	6978      	ldr	r0, [r7, #20]
 800616e:	f000 f8d1 	bl	8006314 <prvInsertTimerInActiveList>
 8006172:	4603      	mov	r3, r0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d01f      	beq.n	80061b8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006178:	2300      	movs	r3, #0
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	2300      	movs	r3, #0
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	2100      	movs	r1, #0
 8006182:	6978      	ldr	r0, [r7, #20]
 8006184:	f7ff ff88 	bl	8006098 <xTimerGenericCommand>
 8006188:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d113      	bne.n	80061b8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061ac:	f023 0301 	bic.w	r3, r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	6978      	ldr	r0, [r7, #20]
 80061be:	4798      	blx	r3
}
 80061c0:	bf00      	nop
 80061c2:	3718      	adds	r7, #24
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	200011cc 	.word	0x200011cc

080061cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061d4:	f107 0308 	add.w	r3, r7, #8
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f857 	bl	800628c <prvGetNextExpireTime>
 80061de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	4619      	mov	r1, r3
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 f803 	bl	80061f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80061ea:	f000 f8d5 	bl	8006398 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80061ee:	e7f1      	b.n	80061d4 <prvTimerTask+0x8>

080061f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80061fa:	f7ff fa43 	bl	8005684 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80061fe:	f107 0308 	add.w	r3, r7, #8
 8006202:	4618      	mov	r0, r3
 8006204:	f000 f866 	bl	80062d4 <prvSampleTimeNow>
 8006208:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800620a:	68bb      	ldr	r3, [r7, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d130      	bne.n	8006272 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10a      	bne.n	800622c <prvProcessTimerOrBlockTask+0x3c>
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	429a      	cmp	r2, r3
 800621c:	d806      	bhi.n	800622c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800621e:	f7ff fa3f 	bl	80056a0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006222:	68f9      	ldr	r1, [r7, #12]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f7ff ff85 	bl	8006134 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800622a:	e024      	b.n	8006276 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d008      	beq.n	8006244 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006232:	4b13      	ldr	r3, [pc, #76]	; (8006280 <prvProcessTimerOrBlockTask+0x90>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <prvProcessTimerOrBlockTask+0x50>
 800623c:	2301      	movs	r3, #1
 800623e:	e000      	b.n	8006242 <prvProcessTimerOrBlockTask+0x52>
 8006240:	2300      	movs	r3, #0
 8006242:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <prvProcessTimerOrBlockTask+0x94>)
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	4619      	mov	r1, r3
 8006252:	f7fe ffa7 	bl	80051a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006256:	f7ff fa23 	bl	80056a0 <xTaskResumeAll>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10a      	bne.n	8006276 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006260:	4b09      	ldr	r3, [pc, #36]	; (8006288 <prvProcessTimerOrBlockTask+0x98>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
}
 8006270:	e001      	b.n	8006276 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006272:	f7ff fa15 	bl	80056a0 <xTaskResumeAll>
}
 8006276:	bf00      	nop
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	200011d0 	.word	0x200011d0
 8006284:	200011d4 	.word	0x200011d4
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006294:	4b0e      	ldr	r3, [pc, #56]	; (80062d0 <prvGetNextExpireTime+0x44>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <prvGetNextExpireTime+0x16>
 800629e:	2201      	movs	r2, #1
 80062a0:	e000      	b.n	80062a4 <prvGetNextExpireTime+0x18>
 80062a2:	2200      	movs	r2, #0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d105      	bne.n	80062bc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <prvGetNextExpireTime+0x44>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	e001      	b.n	80062c0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80062bc:	2300      	movs	r3, #0
 80062be:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80062c0:	68fb      	ldr	r3, [r7, #12]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	200011cc 	.word	0x200011cc

080062d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80062dc:	f7ff fa7e 	bl	80057dc <xTaskGetTickCount>
 80062e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80062e2:	4b0b      	ldr	r3, [pc, #44]	; (8006310 <prvSampleTimeNow+0x3c>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	429a      	cmp	r2, r3
 80062ea:	d205      	bcs.n	80062f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80062ec:	f000 f936 	bl	800655c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
 80062f6:	e002      	b.n	80062fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80062fe:	4a04      	ldr	r2, [pc, #16]	; (8006310 <prvSampleTimeNow+0x3c>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006304:	68fb      	ldr	r3, [r7, #12]
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	200011dc 	.word	0x200011dc

08006314 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b086      	sub	sp, #24
 8006318:	af00      	add	r7, sp, #0
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	607a      	str	r2, [r7, #4]
 8006320:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006332:	68ba      	ldr	r2, [r7, #8]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	429a      	cmp	r2, r3
 8006338:	d812      	bhi.n	8006360 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	699b      	ldr	r3, [r3, #24]
 8006344:	429a      	cmp	r2, r3
 8006346:	d302      	bcc.n	800634e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006348:	2301      	movs	r3, #1
 800634a:	617b      	str	r3, [r7, #20]
 800634c:	e01b      	b.n	8006386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800634e:	4b10      	ldr	r3, [pc, #64]	; (8006390 <prvInsertTimerInActiveList+0x7c>)
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	3304      	adds	r3, #4
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7fe fa08 	bl	800476e <vListInsert>
 800635e:	e012      	b.n	8006386 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	429a      	cmp	r2, r3
 8006366:	d206      	bcs.n	8006376 <prvInsertTimerInActiveList+0x62>
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	429a      	cmp	r2, r3
 800636e:	d302      	bcc.n	8006376 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006370:	2301      	movs	r3, #1
 8006372:	617b      	str	r3, [r7, #20]
 8006374:	e007      	b.n	8006386 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006376:	4b07      	ldr	r3, [pc, #28]	; (8006394 <prvInsertTimerInActiveList+0x80>)
 8006378:	681a      	ldr	r2, [r3, #0]
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	3304      	adds	r3, #4
 800637e:	4619      	mov	r1, r3
 8006380:	4610      	mov	r0, r2
 8006382:	f7fe f9f4 	bl	800476e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006386:	697b      	ldr	r3, [r7, #20]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	200011d0 	.word	0x200011d0
 8006394:	200011cc 	.word	0x200011cc

08006398 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08e      	sub	sp, #56	; 0x38
 800639c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800639e:	e0ca      	b.n	8006536 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	da18      	bge.n	80063d8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80063a6:	1d3b      	adds	r3, r7, #4
 80063a8:	3304      	adds	r3, #4
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80063ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10a      	bne.n	80063c8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	61fb      	str	r3, [r7, #28]
}
 80063c4:	bf00      	nop
 80063c6:	e7fe      	b.n	80063c6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063ce:	6850      	ldr	r0, [r2, #4]
 80063d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063d2:	6892      	ldr	r2, [r2, #8]
 80063d4:	4611      	mov	r1, r2
 80063d6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f2c0 80ab 	blt.w	8006536 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	695b      	ldr	r3, [r3, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d004      	beq.n	80063f6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	3304      	adds	r3, #4
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe f9f5 	bl	80047e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063f6:	463b      	mov	r3, r7
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff ff6b 	bl	80062d4 <prvSampleTimeNow>
 80063fe:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b09      	cmp	r3, #9
 8006404:	f200 8096 	bhi.w	8006534 <prvProcessReceivedCommands+0x19c>
 8006408:	a201      	add	r2, pc, #4	; (adr r2, 8006410 <prvProcessReceivedCommands+0x78>)
 800640a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640e:	bf00      	nop
 8006410:	08006439 	.word	0x08006439
 8006414:	08006439 	.word	0x08006439
 8006418:	08006439 	.word	0x08006439
 800641c:	080064ad 	.word	0x080064ad
 8006420:	080064c1 	.word	0x080064c1
 8006424:	0800650b 	.word	0x0800650b
 8006428:	08006439 	.word	0x08006439
 800642c:	08006439 	.word	0x08006439
 8006430:	080064ad 	.word	0x080064ad
 8006434:	080064c1 	.word	0x080064c1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800643e:	f043 0301 	orr.w	r3, r3, #1
 8006442:	b2da      	uxtb	r2, r3
 8006444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006446:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800644a:	68ba      	ldr	r2, [r7, #8]
 800644c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	18d1      	adds	r1, r2, r3
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006458:	f7ff ff5c 	bl	8006314 <prvInsertTimerInActiveList>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d069      	beq.n	8006536 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	6a1b      	ldr	r3, [r3, #32]
 8006466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006468:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006470:	f003 0304 	and.w	r3, r3, #4
 8006474:	2b00      	cmp	r3, #0
 8006476:	d05e      	beq.n	8006536 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	441a      	add	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	9300      	str	r3, [sp, #0]
 8006484:	2300      	movs	r3, #0
 8006486:	2100      	movs	r1, #0
 8006488:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800648a:	f7ff fe05 	bl	8006098 <xTimerGenericCommand>
 800648e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006490:	6a3b      	ldr	r3, [r7, #32]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d14f      	bne.n	8006536 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	61bb      	str	r3, [r7, #24]
}
 80064a8:	bf00      	nop
 80064aa:	e7fe      	b.n	80064aa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064b2:	f023 0301 	bic.w	r3, r3, #1
 80064b6:	b2da      	uxtb	r2, r3
 80064b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80064be:	e03a      	b.n	8006536 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	b2da      	uxtb	r2, r3
 80064cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80064d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064da:	699b      	ldr	r3, [r3, #24]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d10a      	bne.n	80064f6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	617b      	str	r3, [r7, #20]
}
 80064f2:	bf00      	nop
 80064f4:	e7fe      	b.n	80064f4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	699a      	ldr	r2, [r3, #24]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	18d1      	adds	r1, r2, r3
 80064fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006502:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006504:	f7ff ff06 	bl	8006314 <prvInsertTimerInActiveList>
					break;
 8006508:	e015      	b.n	8006536 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800650a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d103      	bne.n	8006520 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006518:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800651a:	f000 fbe1 	bl	8006ce0 <vPortFree>
 800651e:	e00a      	b.n	8006536 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006522:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006526:	f023 0301 	bic.w	r3, r3, #1
 800652a:	b2da      	uxtb	r2, r3
 800652c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006532:	e000      	b.n	8006536 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006534:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006536:	4b08      	ldr	r3, [pc, #32]	; (8006558 <prvProcessReceivedCommands+0x1c0>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	1d39      	adds	r1, r7, #4
 800653c:	2200      	movs	r2, #0
 800653e:	4618      	mov	r0, r3
 8006540:	f7fe fc16 	bl	8004d70 <xQueueReceive>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	f47f af2a 	bne.w	80063a0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	3730      	adds	r7, #48	; 0x30
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	200011d4 	.word	0x200011d4

0800655c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006562:	e048      	b.n	80065f6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006564:	4b2d      	ldr	r3, [pc, #180]	; (800661c <prvSwitchTimerLists+0xc0>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656e:	4b2b      	ldr	r3, [pc, #172]	; (800661c <prvSwitchTimerLists+0xc0>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	3304      	adds	r3, #4
 800657c:	4618      	mov	r0, r3
 800657e:	f7fe f92f 	bl	80047e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d02e      	beq.n	80065f6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699b      	ldr	r3, [r3, #24]
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d90e      	bls.n	80065c8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80065b6:	4b19      	ldr	r3, [pc, #100]	; (800661c <prvSwitchTimerLists+0xc0>)
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3304      	adds	r3, #4
 80065be:	4619      	mov	r1, r3
 80065c0:	4610      	mov	r0, r2
 80065c2:	f7fe f8d4 	bl	800476e <vListInsert>
 80065c6:	e016      	b.n	80065f6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80065c8:	2300      	movs	r3, #0
 80065ca:	9300      	str	r3, [sp, #0]
 80065cc:	2300      	movs	r3, #0
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	2100      	movs	r1, #0
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f7ff fd60 	bl	8006098 <xTimerGenericCommand>
 80065d8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10a      	bne.n	80065f6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	603b      	str	r3, [r7, #0]
}
 80065f2:	bf00      	nop
 80065f4:	e7fe      	b.n	80065f4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065f6:	4b09      	ldr	r3, [pc, #36]	; (800661c <prvSwitchTimerLists+0xc0>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1b1      	bne.n	8006564 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <prvSwitchTimerLists+0xc0>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006606:	4b06      	ldr	r3, [pc, #24]	; (8006620 <prvSwitchTimerLists+0xc4>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4a04      	ldr	r2, [pc, #16]	; (800661c <prvSwitchTimerLists+0xc0>)
 800660c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800660e:	4a04      	ldr	r2, [pc, #16]	; (8006620 <prvSwitchTimerLists+0xc4>)
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	6013      	str	r3, [r2, #0]
}
 8006614:	bf00      	nop
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	200011cc 	.word	0x200011cc
 8006620:	200011d0 	.word	0x200011d0

08006624 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b082      	sub	sp, #8
 8006628:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800662a:	f000 f96b 	bl	8006904 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800662e:	4b15      	ldr	r3, [pc, #84]	; (8006684 <prvCheckForValidListAndQueue+0x60>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d120      	bne.n	8006678 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006636:	4814      	ldr	r0, [pc, #80]	; (8006688 <prvCheckForValidListAndQueue+0x64>)
 8006638:	f7fe f848 	bl	80046cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800663c:	4813      	ldr	r0, [pc, #76]	; (800668c <prvCheckForValidListAndQueue+0x68>)
 800663e:	f7fe f845 	bl	80046cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006642:	4b13      	ldr	r3, [pc, #76]	; (8006690 <prvCheckForValidListAndQueue+0x6c>)
 8006644:	4a10      	ldr	r2, [pc, #64]	; (8006688 <prvCheckForValidListAndQueue+0x64>)
 8006646:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006648:	4b12      	ldr	r3, [pc, #72]	; (8006694 <prvCheckForValidListAndQueue+0x70>)
 800664a:	4a10      	ldr	r2, [pc, #64]	; (800668c <prvCheckForValidListAndQueue+0x68>)
 800664c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800664e:	2300      	movs	r3, #0
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	4b11      	ldr	r3, [pc, #68]	; (8006698 <prvCheckForValidListAndQueue+0x74>)
 8006654:	4a11      	ldr	r2, [pc, #68]	; (800669c <prvCheckForValidListAndQueue+0x78>)
 8006656:	2110      	movs	r1, #16
 8006658:	200a      	movs	r0, #10
 800665a:	f7fe f953 	bl	8004904 <xQueueGenericCreateStatic>
 800665e:	4603      	mov	r3, r0
 8006660:	4a08      	ldr	r2, [pc, #32]	; (8006684 <prvCheckForValidListAndQueue+0x60>)
 8006662:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006664:	4b07      	ldr	r3, [pc, #28]	; (8006684 <prvCheckForValidListAndQueue+0x60>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d005      	beq.n	8006678 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800666c:	4b05      	ldr	r3, [pc, #20]	; (8006684 <prvCheckForValidListAndQueue+0x60>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	490b      	ldr	r1, [pc, #44]	; (80066a0 <prvCheckForValidListAndQueue+0x7c>)
 8006672:	4618      	mov	r0, r3
 8006674:	f7fe fd6c 	bl	8005150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006678:	f000 f974 	bl	8006964 <vPortExitCritical>
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	200011d4 	.word	0x200011d4
 8006688:	200011a4 	.word	0x200011a4
 800668c:	200011b8 	.word	0x200011b8
 8006690:	200011cc 	.word	0x200011cc
 8006694:	200011d0 	.word	0x200011d0
 8006698:	20001280 	.word	0x20001280
 800669c:	200011e0 	.word	0x200011e0
 80066a0:	08007930 	.word	0x08007930

080066a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3b04      	subs	r3, #4
 80066b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3b04      	subs	r3, #4
 80066c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0201 	bic.w	r2, r3, #1
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3b04      	subs	r3, #4
 80066d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80066d4:	4a0c      	ldr	r2, [pc, #48]	; (8006708 <pxPortInitialiseStack+0x64>)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	3b14      	subs	r3, #20
 80066de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80066e0:	687a      	ldr	r2, [r7, #4]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	3b04      	subs	r3, #4
 80066ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f06f 0202 	mvn.w	r2, #2
 80066f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	3b20      	subs	r3, #32
 80066f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80066fa:	68fb      	ldr	r3, [r7, #12]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	0800670d 	.word	0x0800670d

0800670c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800670c:	b480      	push	{r7}
 800670e:	b085      	sub	sp, #20
 8006710:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006712:	2300      	movs	r3, #0
 8006714:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006716:	4b12      	ldr	r3, [pc, #72]	; (8006760 <prvTaskExitError+0x54>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800671e:	d00a      	beq.n	8006736 <prvTaskExitError+0x2a>
	__asm volatile
 8006720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006724:	f383 8811 	msr	BASEPRI, r3
 8006728:	f3bf 8f6f 	isb	sy
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	60fb      	str	r3, [r7, #12]
}
 8006732:	bf00      	nop
 8006734:	e7fe      	b.n	8006734 <prvTaskExitError+0x28>
	__asm volatile
 8006736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673a:	f383 8811 	msr	BASEPRI, r3
 800673e:	f3bf 8f6f 	isb	sy
 8006742:	f3bf 8f4f 	dsb	sy
 8006746:	60bb      	str	r3, [r7, #8]
}
 8006748:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800674a:	bf00      	nop
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0fc      	beq.n	800674c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006752:	bf00      	nop
 8006754:	bf00      	nop
 8006756:	3714      	adds	r7, #20
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000018 	.word	0x20000018
	...

08006770 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006770:	4b07      	ldr	r3, [pc, #28]	; (8006790 <pxCurrentTCBConst2>)
 8006772:	6819      	ldr	r1, [r3, #0]
 8006774:	6808      	ldr	r0, [r1, #0]
 8006776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800677a:	f380 8809 	msr	PSP, r0
 800677e:	f3bf 8f6f 	isb	sy
 8006782:	f04f 0000 	mov.w	r0, #0
 8006786:	f380 8811 	msr	BASEPRI, r0
 800678a:	4770      	bx	lr
 800678c:	f3af 8000 	nop.w

08006790 <pxCurrentTCBConst2>:
 8006790:	20000ca4 	.word	0x20000ca4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006794:	bf00      	nop
 8006796:	bf00      	nop

08006798 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006798:	4808      	ldr	r0, [pc, #32]	; (80067bc <prvPortStartFirstTask+0x24>)
 800679a:	6800      	ldr	r0, [r0, #0]
 800679c:	6800      	ldr	r0, [r0, #0]
 800679e:	f380 8808 	msr	MSP, r0
 80067a2:	f04f 0000 	mov.w	r0, #0
 80067a6:	f380 8814 	msr	CONTROL, r0
 80067aa:	b662      	cpsie	i
 80067ac:	b661      	cpsie	f
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	df00      	svc	0
 80067b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067ba:	bf00      	nop
 80067bc:	e000ed08 	.word	0xe000ed08

080067c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80067c6:	4b46      	ldr	r3, [pc, #280]	; (80068e0 <xPortStartScheduler+0x120>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a46      	ldr	r2, [pc, #280]	; (80068e4 <xPortStartScheduler+0x124>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d10a      	bne.n	80067e6 <xPortStartScheduler+0x26>
	__asm volatile
 80067d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067d4:	f383 8811 	msr	BASEPRI, r3
 80067d8:	f3bf 8f6f 	isb	sy
 80067dc:	f3bf 8f4f 	dsb	sy
 80067e0:	613b      	str	r3, [r7, #16]
}
 80067e2:	bf00      	nop
 80067e4:	e7fe      	b.n	80067e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <xPortStartScheduler+0x120>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	4a3f      	ldr	r2, [pc, #252]	; (80068e8 <xPortStartScheduler+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d10a      	bne.n	8006806 <xPortStartScheduler+0x46>
	__asm volatile
 80067f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f4:	f383 8811 	msr	BASEPRI, r3
 80067f8:	f3bf 8f6f 	isb	sy
 80067fc:	f3bf 8f4f 	dsb	sy
 8006800:	60fb      	str	r3, [r7, #12]
}
 8006802:	bf00      	nop
 8006804:	e7fe      	b.n	8006804 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006806:	4b39      	ldr	r3, [pc, #228]	; (80068ec <xPortStartScheduler+0x12c>)
 8006808:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	b2db      	uxtb	r3, r3
 8006810:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	22ff      	movs	r2, #255	; 0xff
 8006816:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	b2db      	uxtb	r3, r3
 800681e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006820:	78fb      	ldrb	r3, [r7, #3]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006828:	b2da      	uxtb	r2, r3
 800682a:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <xPortStartScheduler+0x130>)
 800682c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800682e:	4b31      	ldr	r3, [pc, #196]	; (80068f4 <xPortStartScheduler+0x134>)
 8006830:	2207      	movs	r2, #7
 8006832:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006834:	e009      	b.n	800684a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006836:	4b2f      	ldr	r3, [pc, #188]	; (80068f4 <xPortStartScheduler+0x134>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3b01      	subs	r3, #1
 800683c:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <xPortStartScheduler+0x134>)
 800683e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006840:	78fb      	ldrb	r3, [r7, #3]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	005b      	lsls	r3, r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	b2db      	uxtb	r3, r3
 800684e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006852:	2b80      	cmp	r3, #128	; 0x80
 8006854:	d0ef      	beq.n	8006836 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006856:	4b27      	ldr	r3, [pc, #156]	; (80068f4 <xPortStartScheduler+0x134>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f1c3 0307 	rsb	r3, r3, #7
 800685e:	2b04      	cmp	r3, #4
 8006860:	d00a      	beq.n	8006878 <xPortStartScheduler+0xb8>
	__asm volatile
 8006862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006866:	f383 8811 	msr	BASEPRI, r3
 800686a:	f3bf 8f6f 	isb	sy
 800686e:	f3bf 8f4f 	dsb	sy
 8006872:	60bb      	str	r3, [r7, #8]
}
 8006874:	bf00      	nop
 8006876:	e7fe      	b.n	8006876 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006878:	4b1e      	ldr	r3, [pc, #120]	; (80068f4 <xPortStartScheduler+0x134>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	021b      	lsls	r3, r3, #8
 800687e:	4a1d      	ldr	r2, [pc, #116]	; (80068f4 <xPortStartScheduler+0x134>)
 8006880:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006882:	4b1c      	ldr	r3, [pc, #112]	; (80068f4 <xPortStartScheduler+0x134>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800688a:	4a1a      	ldr	r2, [pc, #104]	; (80068f4 <xPortStartScheduler+0x134>)
 800688c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	b2da      	uxtb	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006896:	4b18      	ldr	r3, [pc, #96]	; (80068f8 <xPortStartScheduler+0x138>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a17      	ldr	r2, [pc, #92]	; (80068f8 <xPortStartScheduler+0x138>)
 800689c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068a2:	4b15      	ldr	r3, [pc, #84]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a14      	ldr	r2, [pc, #80]	; (80068f8 <xPortStartScheduler+0x138>)
 80068a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068ae:	f000 f8dd 	bl	8006a6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068b2:	4b12      	ldr	r3, [pc, #72]	; (80068fc <xPortStartScheduler+0x13c>)
 80068b4:	2200      	movs	r2, #0
 80068b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068b8:	f000 f8fc 	bl	8006ab4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068bc:	4b10      	ldr	r3, [pc, #64]	; (8006900 <xPortStartScheduler+0x140>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a0f      	ldr	r2, [pc, #60]	; (8006900 <xPortStartScheduler+0x140>)
 80068c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80068c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80068c8:	f7ff ff66 	bl	8006798 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80068cc:	f7ff f850 	bl	8005970 <vTaskSwitchContext>
	prvTaskExitError();
 80068d0:	f7ff ff1c 	bl	800670c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3718      	adds	r7, #24
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	e000ed00 	.word	0xe000ed00
 80068e4:	410fc271 	.word	0x410fc271
 80068e8:	410fc270 	.word	0x410fc270
 80068ec:	e000e400 	.word	0xe000e400
 80068f0:	200012d0 	.word	0x200012d0
 80068f4:	200012d4 	.word	0x200012d4
 80068f8:	e000ed20 	.word	0xe000ed20
 80068fc:	20000018 	.word	0x20000018
 8006900:	e000ef34 	.word	0xe000ef34

08006904 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	607b      	str	r3, [r7, #4]
}
 800691c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800691e:	4b0f      	ldr	r3, [pc, #60]	; (800695c <vPortEnterCritical+0x58>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	4a0d      	ldr	r2, [pc, #52]	; (800695c <vPortEnterCritical+0x58>)
 8006926:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006928:	4b0c      	ldr	r3, [pc, #48]	; (800695c <vPortEnterCritical+0x58>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b01      	cmp	r3, #1
 800692e:	d10f      	bne.n	8006950 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006930:	4b0b      	ldr	r3, [pc, #44]	; (8006960 <vPortEnterCritical+0x5c>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	b2db      	uxtb	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <vPortEnterCritical+0x4c>
	__asm volatile
 800693a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800693e:	f383 8811 	msr	BASEPRI, r3
 8006942:	f3bf 8f6f 	isb	sy
 8006946:	f3bf 8f4f 	dsb	sy
 800694a:	603b      	str	r3, [r7, #0]
}
 800694c:	bf00      	nop
 800694e:	e7fe      	b.n	800694e <vPortEnterCritical+0x4a>
	}
}
 8006950:	bf00      	nop
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000018 	.word	0x20000018
 8006960:	e000ed04 	.word	0xe000ed04

08006964 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800696a:	4b12      	ldr	r3, [pc, #72]	; (80069b4 <vPortExitCritical+0x50>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10a      	bne.n	8006988 <vPortExitCritical+0x24>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
}
 8006984:	bf00      	nop
 8006986:	e7fe      	b.n	8006986 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <vPortExitCritical+0x50>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	3b01      	subs	r3, #1
 800698e:	4a09      	ldr	r2, [pc, #36]	; (80069b4 <vPortExitCritical+0x50>)
 8006990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006992:	4b08      	ldr	r3, [pc, #32]	; (80069b4 <vPortExitCritical+0x50>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d105      	bne.n	80069a6 <vPortExitCritical+0x42>
 800699a:	2300      	movs	r3, #0
 800699c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	f383 8811 	msr	BASEPRI, r3
}
 80069a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80069a6:	bf00      	nop
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr
 80069b2:	bf00      	nop
 80069b4:	20000018 	.word	0x20000018
	...

080069c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069c0:	f3ef 8009 	mrs	r0, PSP
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	4b15      	ldr	r3, [pc, #84]	; (8006a20 <pxCurrentTCBConst>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	f01e 0f10 	tst.w	lr, #16
 80069d0:	bf08      	it	eq
 80069d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80069d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069da:	6010      	str	r0, [r2, #0]
 80069dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80069e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80069e4:	f380 8811 	msr	BASEPRI, r0
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	f3bf 8f6f 	isb	sy
 80069f0:	f7fe ffbe 	bl	8005970 <vTaskSwitchContext>
 80069f4:	f04f 0000 	mov.w	r0, #0
 80069f8:	f380 8811 	msr	BASEPRI, r0
 80069fc:	bc09      	pop	{r0, r3}
 80069fe:	6819      	ldr	r1, [r3, #0]
 8006a00:	6808      	ldr	r0, [r1, #0]
 8006a02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a06:	f01e 0f10 	tst.w	lr, #16
 8006a0a:	bf08      	it	eq
 8006a0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a10:	f380 8809 	msr	PSP, r0
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	f3af 8000 	nop.w

08006a20 <pxCurrentTCBConst>:
 8006a20:	20000ca4 	.word	0x20000ca4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop

08006a28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a32:	f383 8811 	msr	BASEPRI, r3
 8006a36:	f3bf 8f6f 	isb	sy
 8006a3a:	f3bf 8f4f 	dsb	sy
 8006a3e:	607b      	str	r3, [r7, #4]
}
 8006a40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a42:	f7fe fedb 	bl	80057fc <xTaskIncrementTick>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a4c:	4b06      	ldr	r3, [pc, #24]	; (8006a68 <xPortSysTickHandler+0x40>)
 8006a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a52:	601a      	str	r2, [r3, #0]
 8006a54:	2300      	movs	r3, #0
 8006a56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	f383 8811 	msr	BASEPRI, r3
}
 8006a5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a60:	bf00      	nop
 8006a62:	3708      	adds	r7, #8
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}
 8006a68:	e000ed04 	.word	0xe000ed04

08006a6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006a76:	4b0b      	ldr	r3, [pc, #44]	; (8006aa4 <vPortSetupTimerInterrupt+0x38>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006a7c:	4b0a      	ldr	r3, [pc, #40]	; (8006aa8 <vPortSetupTimerInterrupt+0x3c>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	4a0a      	ldr	r2, [pc, #40]	; (8006aac <vPortSetupTimerInterrupt+0x40>)
 8006a82:	fba2 2303 	umull	r2, r3, r2, r3
 8006a86:	099b      	lsrs	r3, r3, #6
 8006a88:	4a09      	ldr	r2, [pc, #36]	; (8006ab0 <vPortSetupTimerInterrupt+0x44>)
 8006a8a:	3b01      	subs	r3, #1
 8006a8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <vPortSetupTimerInterrupt+0x34>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
}
 8006a94:	bf00      	nop
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	e000e010 	.word	0xe000e010
 8006aa4:	e000e018 	.word	0xe000e018
 8006aa8:	2000000c 	.word	0x2000000c
 8006aac:	10624dd3 	.word	0x10624dd3
 8006ab0:	e000e014 	.word	0xe000e014

08006ab4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ab4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006ac4 <vPortEnableVFP+0x10>
 8006ab8:	6801      	ldr	r1, [r0, #0]
 8006aba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006abe:	6001      	str	r1, [r0, #0]
 8006ac0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006ac2:	bf00      	nop
 8006ac4:	e000ed88 	.word	0xe000ed88

08006ac8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006ace:	f3ef 8305 	mrs	r3, IPSR
 8006ad2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d914      	bls.n	8006b04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006ada:	4a17      	ldr	r2, [pc, #92]	; (8006b38 <vPortValidateInterruptPriority+0x70>)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	4413      	add	r3, r2
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <vPortValidateInterruptPriority+0x74>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	7afa      	ldrb	r2, [r7, #11]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d20a      	bcs.n	8006b04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <vPortValidateInterruptPriority+0x78>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <vPortValidateInterruptPriority+0x7c>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d90a      	bls.n	8006b2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	603b      	str	r3, [r7, #0]
}
 8006b26:	bf00      	nop
 8006b28:	e7fe      	b.n	8006b28 <vPortValidateInterruptPriority+0x60>
	}
 8006b2a:	bf00      	nop
 8006b2c:	3714      	adds	r7, #20
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr
 8006b36:	bf00      	nop
 8006b38:	e000e3f0 	.word	0xe000e3f0
 8006b3c:	200012d0 	.word	0x200012d0
 8006b40:	e000ed0c 	.word	0xe000ed0c
 8006b44:	200012d4 	.word	0x200012d4

08006b48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b08a      	sub	sp, #40	; 0x28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b54:	f7fe fd96 	bl	8005684 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b58:	4b5b      	ldr	r3, [pc, #364]	; (8006cc8 <pvPortMalloc+0x180>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b60:	f000 f920 	bl	8006da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b64:	4b59      	ldr	r3, [pc, #356]	; (8006ccc <pvPortMalloc+0x184>)
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 8093 	bne.w	8006c98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d01d      	beq.n	8006bb4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006b78:	2208      	movs	r2, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f003 0307 	and.w	r3, r3, #7
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d014      	beq.n	8006bb4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f023 0307 	bic.w	r3, r3, #7
 8006b90:	3308      	adds	r3, #8
 8006b92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <pvPortMalloc+0x6c>
	__asm volatile
 8006b9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba2:	f383 8811 	msr	BASEPRI, r3
 8006ba6:	f3bf 8f6f 	isb	sy
 8006baa:	f3bf 8f4f 	dsb	sy
 8006bae:	617b      	str	r3, [r7, #20]
}
 8006bb0:	bf00      	nop
 8006bb2:	e7fe      	b.n	8006bb2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d06e      	beq.n	8006c98 <pvPortMalloc+0x150>
 8006bba:	4b45      	ldr	r3, [pc, #276]	; (8006cd0 <pvPortMalloc+0x188>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d869      	bhi.n	8006c98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bc4:	4b43      	ldr	r3, [pc, #268]	; (8006cd4 <pvPortMalloc+0x18c>)
 8006bc6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bc8:	4b42      	ldr	r3, [pc, #264]	; (8006cd4 <pvPortMalloc+0x18c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bce:	e004      	b.n	8006bda <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d903      	bls.n	8006bec <pvPortMalloc+0xa4>
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f1      	bne.n	8006bd0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006bec:	4b36      	ldr	r3, [pc, #216]	; (8006cc8 <pvPortMalloc+0x180>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d050      	beq.n	8006c98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2208      	movs	r2, #8
 8006bfc:	4413      	add	r3, r2
 8006bfe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	681a      	ldr	r2, [r3, #0]
 8006c04:	6a3b      	ldr	r3, [r7, #32]
 8006c06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0a:	685a      	ldr	r2, [r3, #4]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	1ad2      	subs	r2, r2, r3
 8006c10:	2308      	movs	r3, #8
 8006c12:	005b      	lsls	r3, r3, #1
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d91f      	bls.n	8006c58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4413      	add	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f003 0307 	and.w	r3, r3, #7
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d00a      	beq.n	8006c40 <pvPortMalloc+0xf8>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	613b      	str	r3, [r7, #16]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	685a      	ldr	r2, [r3, #4]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	1ad2      	subs	r2, r2, r3
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f000 f908 	bl	8006e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c58:	4b1d      	ldr	r3, [pc, #116]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	685b      	ldr	r3, [r3, #4]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	4a1b      	ldr	r2, [pc, #108]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <pvPortMalloc+0x190>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d203      	bcs.n	8006c7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c72:	4b17      	ldr	r3, [pc, #92]	; (8006cd0 <pvPortMalloc+0x188>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a18      	ldr	r2, [pc, #96]	; (8006cd8 <pvPortMalloc+0x190>)
 8006c78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	4b13      	ldr	r3, [pc, #76]	; (8006ccc <pvPortMalloc+0x184>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	431a      	orrs	r2, r3
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006c8e:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <pvPortMalloc+0x194>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	3301      	adds	r3, #1
 8006c94:	4a11      	ldr	r2, [pc, #68]	; (8006cdc <pvPortMalloc+0x194>)
 8006c96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006c98:	f7fe fd02 	bl	80056a0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c9c:	69fb      	ldr	r3, [r7, #28]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d00a      	beq.n	8006cbc <pvPortMalloc+0x174>
	__asm volatile
 8006ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006caa:	f383 8811 	msr	BASEPRI, r3
 8006cae:	f3bf 8f6f 	isb	sy
 8006cb2:	f3bf 8f4f 	dsb	sy
 8006cb6:	60fb      	str	r3, [r7, #12]
}
 8006cb8:	bf00      	nop
 8006cba:	e7fe      	b.n	8006cba <pvPortMalloc+0x172>
	return pvReturn;
 8006cbc:	69fb      	ldr	r3, [r7, #28]
}
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	3728      	adds	r7, #40	; 0x28
 8006cc2:	46bd      	mov	sp, r7
 8006cc4:	bd80      	pop	{r7, pc}
 8006cc6:	bf00      	nop
 8006cc8:	20004ee0 	.word	0x20004ee0
 8006ccc:	20004ef4 	.word	0x20004ef4
 8006cd0:	20004ee4 	.word	0x20004ee4
 8006cd4:	20004ed8 	.word	0x20004ed8
 8006cd8:	20004ee8 	.word	0x20004ee8
 8006cdc:	20004eec 	.word	0x20004eec

08006ce0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d04d      	beq.n	8006d8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006cf2:	2308      	movs	r3, #8
 8006cf4:	425b      	negs	r3, r3
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	685a      	ldr	r2, [r3, #4]
 8006d04:	4b24      	ldr	r3, [pc, #144]	; (8006d98 <vPortFree+0xb8>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4013      	ands	r3, r2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10a      	bne.n	8006d24 <vPortFree+0x44>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	60fb      	str	r3, [r7, #12]
}
 8006d20:	bf00      	nop
 8006d22:	e7fe      	b.n	8006d22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00a      	beq.n	8006d42 <vPortFree+0x62>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	60bb      	str	r3, [r7, #8]
}
 8006d3e:	bf00      	nop
 8006d40:	e7fe      	b.n	8006d40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <vPortFree+0xb8>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d01e      	beq.n	8006d8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d11a      	bne.n	8006d8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	4b0e      	ldr	r3, [pc, #56]	; (8006d98 <vPortFree+0xb8>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	43db      	mvns	r3, r3
 8006d62:	401a      	ands	r2, r3
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d68:	f7fe fc8c 	bl	8005684 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	685a      	ldr	r2, [r3, #4]
 8006d70:	4b0a      	ldr	r3, [pc, #40]	; (8006d9c <vPortFree+0xbc>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	4413      	add	r3, r2
 8006d76:	4a09      	ldr	r2, [pc, #36]	; (8006d9c <vPortFree+0xbc>)
 8006d78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d7a:	6938      	ldr	r0, [r7, #16]
 8006d7c:	f000 f874 	bl	8006e68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <vPortFree+0xc0>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	3301      	adds	r3, #1
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <vPortFree+0xc0>)
 8006d88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006d8a:	f7fe fc89 	bl	80056a0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d8e:	bf00      	nop
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}
 8006d96:	bf00      	nop
 8006d98:	20004ef4 	.word	0x20004ef4
 8006d9c:	20004ee4 	.word	0x20004ee4
 8006da0:	20004ef0 	.word	0x20004ef0

08006da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006daa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <prvHeapInit+0xac>)
 8006db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvHeapInit+0xac>)
 8006dd4:	4413      	add	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <prvHeapInit+0xb0>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <prvHeapInit+0xb0>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006df0:	2208      	movs	r2, #8
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <prvHeapInit+0xb4>)
 8006e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <prvHeapInit+0xb4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <prvHeapInit+0xb4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvHeapInit+0xb4>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <prvHeapInit+0xb8>)
 8006e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <prvHeapInit+0xbc>)
 8006e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <prvHeapInit+0xc0>)
 8006e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	200012d8 	.word	0x200012d8
 8006e54:	20004ed8 	.word	0x20004ed8
 8006e58:	20004ee0 	.word	0x20004ee0
 8006e5c:	20004ee8 	.word	0x20004ee8
 8006e60:	20004ee4 	.word	0x20004ee4
 8006e64:	20004ef4 	.word	0x20004ef4

08006e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e70:	4b28      	ldr	r3, [pc, #160]	; (8006f14 <prvInsertBlockIntoFreeList+0xac>)
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e002      	b.n	8006e7c <prvInsertBlockIntoFreeList+0x14>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d8f7      	bhi.n	8006e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d108      	bne.n	8006eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d118      	bne.n	8006ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d00d      	beq.n	8006ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e008      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e003      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d002      	beq.n	8006f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20004ed8 	.word	0x20004ed8
 8006f18:	20004ee0 	.word	0x20004ee0

08006f1c <siprintf>:
 8006f1c:	b40e      	push	{r1, r2, r3}
 8006f1e:	b500      	push	{lr}
 8006f20:	b09c      	sub	sp, #112	; 0x70
 8006f22:	ab1d      	add	r3, sp, #116	; 0x74
 8006f24:	9002      	str	r0, [sp, #8]
 8006f26:	9006      	str	r0, [sp, #24]
 8006f28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f2c:	4809      	ldr	r0, [pc, #36]	; (8006f54 <siprintf+0x38>)
 8006f2e:	9107      	str	r1, [sp, #28]
 8006f30:	9104      	str	r1, [sp, #16]
 8006f32:	4909      	ldr	r1, [pc, #36]	; (8006f58 <siprintf+0x3c>)
 8006f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f38:	9105      	str	r1, [sp, #20]
 8006f3a:	6800      	ldr	r0, [r0, #0]
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	a902      	add	r1, sp, #8
 8006f40:	f000 f8ca 	bl	80070d8 <_svfiprintf_r>
 8006f44:	9b02      	ldr	r3, [sp, #8]
 8006f46:	2200      	movs	r2, #0
 8006f48:	701a      	strb	r2, [r3, #0]
 8006f4a:	b01c      	add	sp, #112	; 0x70
 8006f4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f50:	b003      	add	sp, #12
 8006f52:	4770      	bx	lr
 8006f54:	20000068 	.word	0x20000068
 8006f58:	ffff0208 	.word	0xffff0208

08006f5c <strcat>:
 8006f5c:	b510      	push	{r4, lr}
 8006f5e:	4602      	mov	r2, r0
 8006f60:	7814      	ldrb	r4, [r2, #0]
 8006f62:	4613      	mov	r3, r2
 8006f64:	3201      	adds	r2, #1
 8006f66:	2c00      	cmp	r4, #0
 8006f68:	d1fa      	bne.n	8006f60 <strcat+0x4>
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f70:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f74:	2a00      	cmp	r2, #0
 8006f76:	d1f9      	bne.n	8006f6c <strcat+0x10>
 8006f78:	bd10      	pop	{r4, pc}

08006f7a <strncpy>:
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	3901      	subs	r1, #1
 8006f7e:	4603      	mov	r3, r0
 8006f80:	b132      	cbz	r2, 8006f90 <strncpy+0x16>
 8006f82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006f86:	f803 4b01 	strb.w	r4, [r3], #1
 8006f8a:	3a01      	subs	r2, #1
 8006f8c:	2c00      	cmp	r4, #0
 8006f8e:	d1f7      	bne.n	8006f80 <strncpy+0x6>
 8006f90:	441a      	add	r2, r3
 8006f92:	2100      	movs	r1, #0
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d100      	bne.n	8006f9a <strncpy+0x20>
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f9e:	e7f9      	b.n	8006f94 <strncpy+0x1a>

08006fa0 <memset>:
 8006fa0:	4402      	add	r2, r0
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d100      	bne.n	8006faa <memset+0xa>
 8006fa8:	4770      	bx	lr
 8006faa:	f803 1b01 	strb.w	r1, [r3], #1
 8006fae:	e7f9      	b.n	8006fa4 <memset+0x4>

08006fb0 <__errno>:
 8006fb0:	4b01      	ldr	r3, [pc, #4]	; (8006fb8 <__errno+0x8>)
 8006fb2:	6818      	ldr	r0, [r3, #0]
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000068 	.word	0x20000068

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4d0d      	ldr	r5, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1b64      	subs	r4, r4, r5
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2600      	movs	r6, #0
 8006fc8:	42a6      	cmp	r6, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4d0b      	ldr	r5, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 fc6a 	bl	80078a8 <_init>
 8006fd4:	1b64      	subs	r4, r4, r5
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2600      	movs	r6, #0
 8006fda:	42a6      	cmp	r6, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fe4:	4798      	blx	r3
 8006fe6:	3601      	adds	r6, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fee:	4798      	blx	r3
 8006ff0:	3601      	adds	r6, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	08008754 	.word	0x08008754
 8006ff8:	08008754 	.word	0x08008754
 8006ffc:	08008754 	.word	0x08008754
 8007000:	08008758 	.word	0x08008758

08007004 <__retarget_lock_acquire_recursive>:
 8007004:	4770      	bx	lr

08007006 <__retarget_lock_release_recursive>:
 8007006:	4770      	bx	lr

08007008 <memcpy>:
 8007008:	440a      	add	r2, r1
 800700a:	4291      	cmp	r1, r2
 800700c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007010:	d100      	bne.n	8007014 <memcpy+0xc>
 8007012:	4770      	bx	lr
 8007014:	b510      	push	{r4, lr}
 8007016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800701a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800701e:	4291      	cmp	r1, r2
 8007020:	d1f9      	bne.n	8007016 <memcpy+0xe>
 8007022:	bd10      	pop	{r4, pc}

08007024 <__ssputs_r>:
 8007024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007028:	688e      	ldr	r6, [r1, #8]
 800702a:	461f      	mov	r7, r3
 800702c:	42be      	cmp	r6, r7
 800702e:	680b      	ldr	r3, [r1, #0]
 8007030:	4682      	mov	sl, r0
 8007032:	460c      	mov	r4, r1
 8007034:	4690      	mov	r8, r2
 8007036:	d82c      	bhi.n	8007092 <__ssputs_r+0x6e>
 8007038:	898a      	ldrh	r2, [r1, #12]
 800703a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800703e:	d026      	beq.n	800708e <__ssputs_r+0x6a>
 8007040:	6965      	ldr	r5, [r4, #20]
 8007042:	6909      	ldr	r1, [r1, #16]
 8007044:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007048:	eba3 0901 	sub.w	r9, r3, r1
 800704c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007050:	1c7b      	adds	r3, r7, #1
 8007052:	444b      	add	r3, r9
 8007054:	106d      	asrs	r5, r5, #1
 8007056:	429d      	cmp	r5, r3
 8007058:	bf38      	it	cc
 800705a:	461d      	movcc	r5, r3
 800705c:	0553      	lsls	r3, r2, #21
 800705e:	d527      	bpl.n	80070b0 <__ssputs_r+0x8c>
 8007060:	4629      	mov	r1, r5
 8007062:	f000 f957 	bl	8007314 <_malloc_r>
 8007066:	4606      	mov	r6, r0
 8007068:	b360      	cbz	r0, 80070c4 <__ssputs_r+0xa0>
 800706a:	6921      	ldr	r1, [r4, #16]
 800706c:	464a      	mov	r2, r9
 800706e:	f7ff ffcb 	bl	8007008 <memcpy>
 8007072:	89a3      	ldrh	r3, [r4, #12]
 8007074:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707c:	81a3      	strh	r3, [r4, #12]
 800707e:	6126      	str	r6, [r4, #16]
 8007080:	6165      	str	r5, [r4, #20]
 8007082:	444e      	add	r6, r9
 8007084:	eba5 0509 	sub.w	r5, r5, r9
 8007088:	6026      	str	r6, [r4, #0]
 800708a:	60a5      	str	r5, [r4, #8]
 800708c:	463e      	mov	r6, r7
 800708e:	42be      	cmp	r6, r7
 8007090:	d900      	bls.n	8007094 <__ssputs_r+0x70>
 8007092:	463e      	mov	r6, r7
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	4632      	mov	r2, r6
 8007098:	4641      	mov	r1, r8
 800709a:	f000 fb86 	bl	80077aa <memmove>
 800709e:	68a3      	ldr	r3, [r4, #8]
 80070a0:	1b9b      	subs	r3, r3, r6
 80070a2:	60a3      	str	r3, [r4, #8]
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	4433      	add	r3, r6
 80070a8:	6023      	str	r3, [r4, #0]
 80070aa:	2000      	movs	r0, #0
 80070ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070b0:	462a      	mov	r2, r5
 80070b2:	f000 fb4b 	bl	800774c <_realloc_r>
 80070b6:	4606      	mov	r6, r0
 80070b8:	2800      	cmp	r0, #0
 80070ba:	d1e0      	bne.n	800707e <__ssputs_r+0x5a>
 80070bc:	6921      	ldr	r1, [r4, #16]
 80070be:	4650      	mov	r0, sl
 80070c0:	f000 fb9e 	bl	8007800 <_free_r>
 80070c4:	230c      	movs	r3, #12
 80070c6:	f8ca 3000 	str.w	r3, [sl]
 80070ca:	89a3      	ldrh	r3, [r4, #12]
 80070cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d0:	81a3      	strh	r3, [r4, #12]
 80070d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070d6:	e7e9      	b.n	80070ac <__ssputs_r+0x88>

080070d8 <_svfiprintf_r>:
 80070d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070dc:	4698      	mov	r8, r3
 80070de:	898b      	ldrh	r3, [r1, #12]
 80070e0:	061b      	lsls	r3, r3, #24
 80070e2:	b09d      	sub	sp, #116	; 0x74
 80070e4:	4607      	mov	r7, r0
 80070e6:	460d      	mov	r5, r1
 80070e8:	4614      	mov	r4, r2
 80070ea:	d50e      	bpl.n	800710a <_svfiprintf_r+0x32>
 80070ec:	690b      	ldr	r3, [r1, #16]
 80070ee:	b963      	cbnz	r3, 800710a <_svfiprintf_r+0x32>
 80070f0:	2140      	movs	r1, #64	; 0x40
 80070f2:	f000 f90f 	bl	8007314 <_malloc_r>
 80070f6:	6028      	str	r0, [r5, #0]
 80070f8:	6128      	str	r0, [r5, #16]
 80070fa:	b920      	cbnz	r0, 8007106 <_svfiprintf_r+0x2e>
 80070fc:	230c      	movs	r3, #12
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007104:	e0d0      	b.n	80072a8 <_svfiprintf_r+0x1d0>
 8007106:	2340      	movs	r3, #64	; 0x40
 8007108:	616b      	str	r3, [r5, #20]
 800710a:	2300      	movs	r3, #0
 800710c:	9309      	str	r3, [sp, #36]	; 0x24
 800710e:	2320      	movs	r3, #32
 8007110:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007114:	f8cd 800c 	str.w	r8, [sp, #12]
 8007118:	2330      	movs	r3, #48	; 0x30
 800711a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80072c0 <_svfiprintf_r+0x1e8>
 800711e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007122:	f04f 0901 	mov.w	r9, #1
 8007126:	4623      	mov	r3, r4
 8007128:	469a      	mov	sl, r3
 800712a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800712e:	b10a      	cbz	r2, 8007134 <_svfiprintf_r+0x5c>
 8007130:	2a25      	cmp	r2, #37	; 0x25
 8007132:	d1f9      	bne.n	8007128 <_svfiprintf_r+0x50>
 8007134:	ebba 0b04 	subs.w	fp, sl, r4
 8007138:	d00b      	beq.n	8007152 <_svfiprintf_r+0x7a>
 800713a:	465b      	mov	r3, fp
 800713c:	4622      	mov	r2, r4
 800713e:	4629      	mov	r1, r5
 8007140:	4638      	mov	r0, r7
 8007142:	f7ff ff6f 	bl	8007024 <__ssputs_r>
 8007146:	3001      	adds	r0, #1
 8007148:	f000 80a9 	beq.w	800729e <_svfiprintf_r+0x1c6>
 800714c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800714e:	445a      	add	r2, fp
 8007150:	9209      	str	r2, [sp, #36]	; 0x24
 8007152:	f89a 3000 	ldrb.w	r3, [sl]
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80a1 	beq.w	800729e <_svfiprintf_r+0x1c6>
 800715c:	2300      	movs	r3, #0
 800715e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007166:	f10a 0a01 	add.w	sl, sl, #1
 800716a:	9304      	str	r3, [sp, #16]
 800716c:	9307      	str	r3, [sp, #28]
 800716e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007172:	931a      	str	r3, [sp, #104]	; 0x68
 8007174:	4654      	mov	r4, sl
 8007176:	2205      	movs	r2, #5
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4850      	ldr	r0, [pc, #320]	; (80072c0 <_svfiprintf_r+0x1e8>)
 800717e:	f7f9 f85f 	bl	8000240 <memchr>
 8007182:	9a04      	ldr	r2, [sp, #16]
 8007184:	b9d8      	cbnz	r0, 80071be <_svfiprintf_r+0xe6>
 8007186:	06d0      	lsls	r0, r2, #27
 8007188:	bf44      	itt	mi
 800718a:	2320      	movmi	r3, #32
 800718c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007190:	0711      	lsls	r1, r2, #28
 8007192:	bf44      	itt	mi
 8007194:	232b      	movmi	r3, #43	; 0x2b
 8007196:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719a:	f89a 3000 	ldrb.w	r3, [sl]
 800719e:	2b2a      	cmp	r3, #42	; 0x2a
 80071a0:	d015      	beq.n	80071ce <_svfiprintf_r+0xf6>
 80071a2:	9a07      	ldr	r2, [sp, #28]
 80071a4:	4654      	mov	r4, sl
 80071a6:	2000      	movs	r0, #0
 80071a8:	f04f 0c0a 	mov.w	ip, #10
 80071ac:	4621      	mov	r1, r4
 80071ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b2:	3b30      	subs	r3, #48	; 0x30
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d94d      	bls.n	8007254 <_svfiprintf_r+0x17c>
 80071b8:	b1b0      	cbz	r0, 80071e8 <_svfiprintf_r+0x110>
 80071ba:	9207      	str	r2, [sp, #28]
 80071bc:	e014      	b.n	80071e8 <_svfiprintf_r+0x110>
 80071be:	eba0 0308 	sub.w	r3, r0, r8
 80071c2:	fa09 f303 	lsl.w	r3, r9, r3
 80071c6:	4313      	orrs	r3, r2
 80071c8:	9304      	str	r3, [sp, #16]
 80071ca:	46a2      	mov	sl, r4
 80071cc:	e7d2      	b.n	8007174 <_svfiprintf_r+0x9c>
 80071ce:	9b03      	ldr	r3, [sp, #12]
 80071d0:	1d19      	adds	r1, r3, #4
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	9103      	str	r1, [sp, #12]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfbb      	ittet	lt
 80071da:	425b      	neglt	r3, r3
 80071dc:	f042 0202 	orrlt.w	r2, r2, #2
 80071e0:	9307      	strge	r3, [sp, #28]
 80071e2:	9307      	strlt	r3, [sp, #28]
 80071e4:	bfb8      	it	lt
 80071e6:	9204      	strlt	r2, [sp, #16]
 80071e8:	7823      	ldrb	r3, [r4, #0]
 80071ea:	2b2e      	cmp	r3, #46	; 0x2e
 80071ec:	d10c      	bne.n	8007208 <_svfiprintf_r+0x130>
 80071ee:	7863      	ldrb	r3, [r4, #1]
 80071f0:	2b2a      	cmp	r3, #42	; 0x2a
 80071f2:	d134      	bne.n	800725e <_svfiprintf_r+0x186>
 80071f4:	9b03      	ldr	r3, [sp, #12]
 80071f6:	1d1a      	adds	r2, r3, #4
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	9203      	str	r2, [sp, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bfb8      	it	lt
 8007200:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007204:	3402      	adds	r4, #2
 8007206:	9305      	str	r3, [sp, #20]
 8007208:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072d0 <_svfiprintf_r+0x1f8>
 800720c:	7821      	ldrb	r1, [r4, #0]
 800720e:	2203      	movs	r2, #3
 8007210:	4650      	mov	r0, sl
 8007212:	f7f9 f815 	bl	8000240 <memchr>
 8007216:	b138      	cbz	r0, 8007228 <_svfiprintf_r+0x150>
 8007218:	9b04      	ldr	r3, [sp, #16]
 800721a:	eba0 000a 	sub.w	r0, r0, sl
 800721e:	2240      	movs	r2, #64	; 0x40
 8007220:	4082      	lsls	r2, r0
 8007222:	4313      	orrs	r3, r2
 8007224:	3401      	adds	r4, #1
 8007226:	9304      	str	r3, [sp, #16]
 8007228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800722c:	4825      	ldr	r0, [pc, #148]	; (80072c4 <_svfiprintf_r+0x1ec>)
 800722e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007232:	2206      	movs	r2, #6
 8007234:	f7f9 f804 	bl	8000240 <memchr>
 8007238:	2800      	cmp	r0, #0
 800723a:	d038      	beq.n	80072ae <_svfiprintf_r+0x1d6>
 800723c:	4b22      	ldr	r3, [pc, #136]	; (80072c8 <_svfiprintf_r+0x1f0>)
 800723e:	bb1b      	cbnz	r3, 8007288 <_svfiprintf_r+0x1b0>
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	3307      	adds	r3, #7
 8007244:	f023 0307 	bic.w	r3, r3, #7
 8007248:	3308      	adds	r3, #8
 800724a:	9303      	str	r3, [sp, #12]
 800724c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724e:	4433      	add	r3, r6
 8007250:	9309      	str	r3, [sp, #36]	; 0x24
 8007252:	e768      	b.n	8007126 <_svfiprintf_r+0x4e>
 8007254:	fb0c 3202 	mla	r2, ip, r2, r3
 8007258:	460c      	mov	r4, r1
 800725a:	2001      	movs	r0, #1
 800725c:	e7a6      	b.n	80071ac <_svfiprintf_r+0xd4>
 800725e:	2300      	movs	r3, #0
 8007260:	3401      	adds	r4, #1
 8007262:	9305      	str	r3, [sp, #20]
 8007264:	4619      	mov	r1, r3
 8007266:	f04f 0c0a 	mov.w	ip, #10
 800726a:	4620      	mov	r0, r4
 800726c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007270:	3a30      	subs	r2, #48	; 0x30
 8007272:	2a09      	cmp	r2, #9
 8007274:	d903      	bls.n	800727e <_svfiprintf_r+0x1a6>
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0c6      	beq.n	8007208 <_svfiprintf_r+0x130>
 800727a:	9105      	str	r1, [sp, #20]
 800727c:	e7c4      	b.n	8007208 <_svfiprintf_r+0x130>
 800727e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007282:	4604      	mov	r4, r0
 8007284:	2301      	movs	r3, #1
 8007286:	e7f0      	b.n	800726a <_svfiprintf_r+0x192>
 8007288:	ab03      	add	r3, sp, #12
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	462a      	mov	r2, r5
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <_svfiprintf_r+0x1f4>)
 8007290:	a904      	add	r1, sp, #16
 8007292:	4638      	mov	r0, r7
 8007294:	f3af 8000 	nop.w
 8007298:	1c42      	adds	r2, r0, #1
 800729a:	4606      	mov	r6, r0
 800729c:	d1d6      	bne.n	800724c <_svfiprintf_r+0x174>
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	065b      	lsls	r3, r3, #25
 80072a2:	f53f af2d 	bmi.w	8007100 <_svfiprintf_r+0x28>
 80072a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072a8:	b01d      	add	sp, #116	; 0x74
 80072aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_svfiprintf_r+0x1f4>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	4638      	mov	r0, r7
 80072ba:	f000 f919 	bl	80074f0 <_printf_i>
 80072be:	e7eb      	b.n	8007298 <_svfiprintf_r+0x1c0>
 80072c0:	08008718 	.word	0x08008718
 80072c4:	08008722 	.word	0x08008722
 80072c8:	00000000 	.word	0x00000000
 80072cc:	08007025 	.word	0x08007025
 80072d0:	0800871e 	.word	0x0800871e

080072d4 <sbrk_aligned>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	4e0e      	ldr	r6, [pc, #56]	; (8007310 <sbrk_aligned+0x3c>)
 80072d8:	460c      	mov	r4, r1
 80072da:	6831      	ldr	r1, [r6, #0]
 80072dc:	4605      	mov	r5, r0
 80072de:	b911      	cbnz	r1, 80072e6 <sbrk_aligned+0x12>
 80072e0:	f000 fa7e 	bl	80077e0 <_sbrk_r>
 80072e4:	6030      	str	r0, [r6, #0]
 80072e6:	4621      	mov	r1, r4
 80072e8:	4628      	mov	r0, r5
 80072ea:	f000 fa79 	bl	80077e0 <_sbrk_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d00a      	beq.n	8007308 <sbrk_aligned+0x34>
 80072f2:	1cc4      	adds	r4, r0, #3
 80072f4:	f024 0403 	bic.w	r4, r4, #3
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d007      	beq.n	800730c <sbrk_aligned+0x38>
 80072fc:	1a21      	subs	r1, r4, r0
 80072fe:	4628      	mov	r0, r5
 8007300:	f000 fa6e 	bl	80077e0 <_sbrk_r>
 8007304:	3001      	adds	r0, #1
 8007306:	d101      	bne.n	800730c <sbrk_aligned+0x38>
 8007308:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800730c:	4620      	mov	r0, r4
 800730e:	bd70      	pop	{r4, r5, r6, pc}
 8007310:	20005038 	.word	0x20005038

08007314 <_malloc_r>:
 8007314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007318:	1ccd      	adds	r5, r1, #3
 800731a:	f025 0503 	bic.w	r5, r5, #3
 800731e:	3508      	adds	r5, #8
 8007320:	2d0c      	cmp	r5, #12
 8007322:	bf38      	it	cc
 8007324:	250c      	movcc	r5, #12
 8007326:	2d00      	cmp	r5, #0
 8007328:	4607      	mov	r7, r0
 800732a:	db01      	blt.n	8007330 <_malloc_r+0x1c>
 800732c:	42a9      	cmp	r1, r5
 800732e:	d905      	bls.n	800733c <_malloc_r+0x28>
 8007330:	230c      	movs	r3, #12
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	2600      	movs	r6, #0
 8007336:	4630      	mov	r0, r6
 8007338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800733c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007410 <_malloc_r+0xfc>
 8007340:	f000 f9f8 	bl	8007734 <__malloc_lock>
 8007344:	f8d8 3000 	ldr.w	r3, [r8]
 8007348:	461c      	mov	r4, r3
 800734a:	bb5c      	cbnz	r4, 80073a4 <_malloc_r+0x90>
 800734c:	4629      	mov	r1, r5
 800734e:	4638      	mov	r0, r7
 8007350:	f7ff ffc0 	bl	80072d4 <sbrk_aligned>
 8007354:	1c43      	adds	r3, r0, #1
 8007356:	4604      	mov	r4, r0
 8007358:	d155      	bne.n	8007406 <_malloc_r+0xf2>
 800735a:	f8d8 4000 	ldr.w	r4, [r8]
 800735e:	4626      	mov	r6, r4
 8007360:	2e00      	cmp	r6, #0
 8007362:	d145      	bne.n	80073f0 <_malloc_r+0xdc>
 8007364:	2c00      	cmp	r4, #0
 8007366:	d048      	beq.n	80073fa <_malloc_r+0xe6>
 8007368:	6823      	ldr	r3, [r4, #0]
 800736a:	4631      	mov	r1, r6
 800736c:	4638      	mov	r0, r7
 800736e:	eb04 0903 	add.w	r9, r4, r3
 8007372:	f000 fa35 	bl	80077e0 <_sbrk_r>
 8007376:	4581      	cmp	r9, r0
 8007378:	d13f      	bne.n	80073fa <_malloc_r+0xe6>
 800737a:	6821      	ldr	r1, [r4, #0]
 800737c:	1a6d      	subs	r5, r5, r1
 800737e:	4629      	mov	r1, r5
 8007380:	4638      	mov	r0, r7
 8007382:	f7ff ffa7 	bl	80072d4 <sbrk_aligned>
 8007386:	3001      	adds	r0, #1
 8007388:	d037      	beq.n	80073fa <_malloc_r+0xe6>
 800738a:	6823      	ldr	r3, [r4, #0]
 800738c:	442b      	add	r3, r5
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	f8d8 3000 	ldr.w	r3, [r8]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d038      	beq.n	800740a <_malloc_r+0xf6>
 8007398:	685a      	ldr	r2, [r3, #4]
 800739a:	42a2      	cmp	r2, r4
 800739c:	d12b      	bne.n	80073f6 <_malloc_r+0xe2>
 800739e:	2200      	movs	r2, #0
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	e00f      	b.n	80073c4 <_malloc_r+0xb0>
 80073a4:	6822      	ldr	r2, [r4, #0]
 80073a6:	1b52      	subs	r2, r2, r5
 80073a8:	d41f      	bmi.n	80073ea <_malloc_r+0xd6>
 80073aa:	2a0b      	cmp	r2, #11
 80073ac:	d917      	bls.n	80073de <_malloc_r+0xca>
 80073ae:	1961      	adds	r1, r4, r5
 80073b0:	42a3      	cmp	r3, r4
 80073b2:	6025      	str	r5, [r4, #0]
 80073b4:	bf18      	it	ne
 80073b6:	6059      	strne	r1, [r3, #4]
 80073b8:	6863      	ldr	r3, [r4, #4]
 80073ba:	bf08      	it	eq
 80073bc:	f8c8 1000 	streq.w	r1, [r8]
 80073c0:	5162      	str	r2, [r4, r5]
 80073c2:	604b      	str	r3, [r1, #4]
 80073c4:	4638      	mov	r0, r7
 80073c6:	f104 060b 	add.w	r6, r4, #11
 80073ca:	f000 f9b9 	bl	8007740 <__malloc_unlock>
 80073ce:	f026 0607 	bic.w	r6, r6, #7
 80073d2:	1d23      	adds	r3, r4, #4
 80073d4:	1af2      	subs	r2, r6, r3
 80073d6:	d0ae      	beq.n	8007336 <_malloc_r+0x22>
 80073d8:	1b9b      	subs	r3, r3, r6
 80073da:	50a3      	str	r3, [r4, r2]
 80073dc:	e7ab      	b.n	8007336 <_malloc_r+0x22>
 80073de:	42a3      	cmp	r3, r4
 80073e0:	6862      	ldr	r2, [r4, #4]
 80073e2:	d1dd      	bne.n	80073a0 <_malloc_r+0x8c>
 80073e4:	f8c8 2000 	str.w	r2, [r8]
 80073e8:	e7ec      	b.n	80073c4 <_malloc_r+0xb0>
 80073ea:	4623      	mov	r3, r4
 80073ec:	6864      	ldr	r4, [r4, #4]
 80073ee:	e7ac      	b.n	800734a <_malloc_r+0x36>
 80073f0:	4634      	mov	r4, r6
 80073f2:	6876      	ldr	r6, [r6, #4]
 80073f4:	e7b4      	b.n	8007360 <_malloc_r+0x4c>
 80073f6:	4613      	mov	r3, r2
 80073f8:	e7cc      	b.n	8007394 <_malloc_r+0x80>
 80073fa:	230c      	movs	r3, #12
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4638      	mov	r0, r7
 8007400:	f000 f99e 	bl	8007740 <__malloc_unlock>
 8007404:	e797      	b.n	8007336 <_malloc_r+0x22>
 8007406:	6025      	str	r5, [r4, #0]
 8007408:	e7dc      	b.n	80073c4 <_malloc_r+0xb0>
 800740a:	605b      	str	r3, [r3, #4]
 800740c:	deff      	udf	#255	; 0xff
 800740e:	bf00      	nop
 8007410:	20005034 	.word	0x20005034

08007414 <_printf_common>:
 8007414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007418:	4616      	mov	r6, r2
 800741a:	4699      	mov	r9, r3
 800741c:	688a      	ldr	r2, [r1, #8]
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007424:	4293      	cmp	r3, r2
 8007426:	bfb8      	it	lt
 8007428:	4613      	movlt	r3, r2
 800742a:	6033      	str	r3, [r6, #0]
 800742c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007430:	4607      	mov	r7, r0
 8007432:	460c      	mov	r4, r1
 8007434:	b10a      	cbz	r2, 800743a <_printf_common+0x26>
 8007436:	3301      	adds	r3, #1
 8007438:	6033      	str	r3, [r6, #0]
 800743a:	6823      	ldr	r3, [r4, #0]
 800743c:	0699      	lsls	r1, r3, #26
 800743e:	bf42      	ittt	mi
 8007440:	6833      	ldrmi	r3, [r6, #0]
 8007442:	3302      	addmi	r3, #2
 8007444:	6033      	strmi	r3, [r6, #0]
 8007446:	6825      	ldr	r5, [r4, #0]
 8007448:	f015 0506 	ands.w	r5, r5, #6
 800744c:	d106      	bne.n	800745c <_printf_common+0x48>
 800744e:	f104 0a19 	add.w	sl, r4, #25
 8007452:	68e3      	ldr	r3, [r4, #12]
 8007454:	6832      	ldr	r2, [r6, #0]
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	42ab      	cmp	r3, r5
 800745a:	dc26      	bgt.n	80074aa <_printf_common+0x96>
 800745c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007460:	1e13      	subs	r3, r2, #0
 8007462:	6822      	ldr	r2, [r4, #0]
 8007464:	bf18      	it	ne
 8007466:	2301      	movne	r3, #1
 8007468:	0692      	lsls	r2, r2, #26
 800746a:	d42b      	bmi.n	80074c4 <_printf_common+0xb0>
 800746c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007470:	4649      	mov	r1, r9
 8007472:	4638      	mov	r0, r7
 8007474:	47c0      	blx	r8
 8007476:	3001      	adds	r0, #1
 8007478:	d01e      	beq.n	80074b8 <_printf_common+0xa4>
 800747a:	6823      	ldr	r3, [r4, #0]
 800747c:	6922      	ldr	r2, [r4, #16]
 800747e:	f003 0306 	and.w	r3, r3, #6
 8007482:	2b04      	cmp	r3, #4
 8007484:	bf02      	ittt	eq
 8007486:	68e5      	ldreq	r5, [r4, #12]
 8007488:	6833      	ldreq	r3, [r6, #0]
 800748a:	1aed      	subeq	r5, r5, r3
 800748c:	68a3      	ldr	r3, [r4, #8]
 800748e:	bf0c      	ite	eq
 8007490:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007494:	2500      	movne	r5, #0
 8007496:	4293      	cmp	r3, r2
 8007498:	bfc4      	itt	gt
 800749a:	1a9b      	subgt	r3, r3, r2
 800749c:	18ed      	addgt	r5, r5, r3
 800749e:	2600      	movs	r6, #0
 80074a0:	341a      	adds	r4, #26
 80074a2:	42b5      	cmp	r5, r6
 80074a4:	d11a      	bne.n	80074dc <_printf_common+0xc8>
 80074a6:	2000      	movs	r0, #0
 80074a8:	e008      	b.n	80074bc <_printf_common+0xa8>
 80074aa:	2301      	movs	r3, #1
 80074ac:	4652      	mov	r2, sl
 80074ae:	4649      	mov	r1, r9
 80074b0:	4638      	mov	r0, r7
 80074b2:	47c0      	blx	r8
 80074b4:	3001      	adds	r0, #1
 80074b6:	d103      	bne.n	80074c0 <_printf_common+0xac>
 80074b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074c0:	3501      	adds	r5, #1
 80074c2:	e7c6      	b.n	8007452 <_printf_common+0x3e>
 80074c4:	18e1      	adds	r1, r4, r3
 80074c6:	1c5a      	adds	r2, r3, #1
 80074c8:	2030      	movs	r0, #48	; 0x30
 80074ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80074ce:	4422      	add	r2, r4
 80074d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074d8:	3302      	adds	r3, #2
 80074da:	e7c7      	b.n	800746c <_printf_common+0x58>
 80074dc:	2301      	movs	r3, #1
 80074de:	4622      	mov	r2, r4
 80074e0:	4649      	mov	r1, r9
 80074e2:	4638      	mov	r0, r7
 80074e4:	47c0      	blx	r8
 80074e6:	3001      	adds	r0, #1
 80074e8:	d0e6      	beq.n	80074b8 <_printf_common+0xa4>
 80074ea:	3601      	adds	r6, #1
 80074ec:	e7d9      	b.n	80074a2 <_printf_common+0x8e>
	...

080074f0 <_printf_i>:
 80074f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	7e0f      	ldrb	r7, [r1, #24]
 80074f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80074f8:	2f78      	cmp	r7, #120	; 0x78
 80074fa:	4691      	mov	r9, r2
 80074fc:	4680      	mov	r8, r0
 80074fe:	460c      	mov	r4, r1
 8007500:	469a      	mov	sl, r3
 8007502:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007506:	d807      	bhi.n	8007518 <_printf_i+0x28>
 8007508:	2f62      	cmp	r7, #98	; 0x62
 800750a:	d80a      	bhi.n	8007522 <_printf_i+0x32>
 800750c:	2f00      	cmp	r7, #0
 800750e:	f000 80d4 	beq.w	80076ba <_printf_i+0x1ca>
 8007512:	2f58      	cmp	r7, #88	; 0x58
 8007514:	f000 80c0 	beq.w	8007698 <_printf_i+0x1a8>
 8007518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800751c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007520:	e03a      	b.n	8007598 <_printf_i+0xa8>
 8007522:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007526:	2b15      	cmp	r3, #21
 8007528:	d8f6      	bhi.n	8007518 <_printf_i+0x28>
 800752a:	a101      	add	r1, pc, #4	; (adr r1, 8007530 <_printf_i+0x40>)
 800752c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007530:	08007589 	.word	0x08007589
 8007534:	0800759d 	.word	0x0800759d
 8007538:	08007519 	.word	0x08007519
 800753c:	08007519 	.word	0x08007519
 8007540:	08007519 	.word	0x08007519
 8007544:	08007519 	.word	0x08007519
 8007548:	0800759d 	.word	0x0800759d
 800754c:	08007519 	.word	0x08007519
 8007550:	08007519 	.word	0x08007519
 8007554:	08007519 	.word	0x08007519
 8007558:	08007519 	.word	0x08007519
 800755c:	080076a1 	.word	0x080076a1
 8007560:	080075c9 	.word	0x080075c9
 8007564:	0800765b 	.word	0x0800765b
 8007568:	08007519 	.word	0x08007519
 800756c:	08007519 	.word	0x08007519
 8007570:	080076c3 	.word	0x080076c3
 8007574:	08007519 	.word	0x08007519
 8007578:	080075c9 	.word	0x080075c9
 800757c:	08007519 	.word	0x08007519
 8007580:	08007519 	.word	0x08007519
 8007584:	08007663 	.word	0x08007663
 8007588:	682b      	ldr	r3, [r5, #0]
 800758a:	1d1a      	adds	r2, r3, #4
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	602a      	str	r2, [r5, #0]
 8007590:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007594:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007598:	2301      	movs	r3, #1
 800759a:	e09f      	b.n	80076dc <_printf_i+0x1ec>
 800759c:	6820      	ldr	r0, [r4, #0]
 800759e:	682b      	ldr	r3, [r5, #0]
 80075a0:	0607      	lsls	r7, r0, #24
 80075a2:	f103 0104 	add.w	r1, r3, #4
 80075a6:	6029      	str	r1, [r5, #0]
 80075a8:	d501      	bpl.n	80075ae <_printf_i+0xbe>
 80075aa:	681e      	ldr	r6, [r3, #0]
 80075ac:	e003      	b.n	80075b6 <_printf_i+0xc6>
 80075ae:	0646      	lsls	r6, r0, #25
 80075b0:	d5fb      	bpl.n	80075aa <_printf_i+0xba>
 80075b2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80075b6:	2e00      	cmp	r6, #0
 80075b8:	da03      	bge.n	80075c2 <_printf_i+0xd2>
 80075ba:	232d      	movs	r3, #45	; 0x2d
 80075bc:	4276      	negs	r6, r6
 80075be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c2:	485a      	ldr	r0, [pc, #360]	; (800772c <_printf_i+0x23c>)
 80075c4:	230a      	movs	r3, #10
 80075c6:	e012      	b.n	80075ee <_printf_i+0xfe>
 80075c8:	682b      	ldr	r3, [r5, #0]
 80075ca:	6820      	ldr	r0, [r4, #0]
 80075cc:	1d19      	adds	r1, r3, #4
 80075ce:	6029      	str	r1, [r5, #0]
 80075d0:	0605      	lsls	r5, r0, #24
 80075d2:	d501      	bpl.n	80075d8 <_printf_i+0xe8>
 80075d4:	681e      	ldr	r6, [r3, #0]
 80075d6:	e002      	b.n	80075de <_printf_i+0xee>
 80075d8:	0641      	lsls	r1, r0, #25
 80075da:	d5fb      	bpl.n	80075d4 <_printf_i+0xe4>
 80075dc:	881e      	ldrh	r6, [r3, #0]
 80075de:	4853      	ldr	r0, [pc, #332]	; (800772c <_printf_i+0x23c>)
 80075e0:	2f6f      	cmp	r7, #111	; 0x6f
 80075e2:	bf0c      	ite	eq
 80075e4:	2308      	moveq	r3, #8
 80075e6:	230a      	movne	r3, #10
 80075e8:	2100      	movs	r1, #0
 80075ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075ee:	6865      	ldr	r5, [r4, #4]
 80075f0:	60a5      	str	r5, [r4, #8]
 80075f2:	2d00      	cmp	r5, #0
 80075f4:	bfa2      	ittt	ge
 80075f6:	6821      	ldrge	r1, [r4, #0]
 80075f8:	f021 0104 	bicge.w	r1, r1, #4
 80075fc:	6021      	strge	r1, [r4, #0]
 80075fe:	b90e      	cbnz	r6, 8007604 <_printf_i+0x114>
 8007600:	2d00      	cmp	r5, #0
 8007602:	d04b      	beq.n	800769c <_printf_i+0x1ac>
 8007604:	4615      	mov	r5, r2
 8007606:	fbb6 f1f3 	udiv	r1, r6, r3
 800760a:	fb03 6711 	mls	r7, r3, r1, r6
 800760e:	5dc7      	ldrb	r7, [r0, r7]
 8007610:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007614:	4637      	mov	r7, r6
 8007616:	42bb      	cmp	r3, r7
 8007618:	460e      	mov	r6, r1
 800761a:	d9f4      	bls.n	8007606 <_printf_i+0x116>
 800761c:	2b08      	cmp	r3, #8
 800761e:	d10b      	bne.n	8007638 <_printf_i+0x148>
 8007620:	6823      	ldr	r3, [r4, #0]
 8007622:	07de      	lsls	r6, r3, #31
 8007624:	d508      	bpl.n	8007638 <_printf_i+0x148>
 8007626:	6923      	ldr	r3, [r4, #16]
 8007628:	6861      	ldr	r1, [r4, #4]
 800762a:	4299      	cmp	r1, r3
 800762c:	bfde      	ittt	le
 800762e:	2330      	movle	r3, #48	; 0x30
 8007630:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007634:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007638:	1b52      	subs	r2, r2, r5
 800763a:	6122      	str	r2, [r4, #16]
 800763c:	f8cd a000 	str.w	sl, [sp]
 8007640:	464b      	mov	r3, r9
 8007642:	aa03      	add	r2, sp, #12
 8007644:	4621      	mov	r1, r4
 8007646:	4640      	mov	r0, r8
 8007648:	f7ff fee4 	bl	8007414 <_printf_common>
 800764c:	3001      	adds	r0, #1
 800764e:	d14a      	bne.n	80076e6 <_printf_i+0x1f6>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007654:	b004      	add	sp, #16
 8007656:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f043 0320 	orr.w	r3, r3, #32
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	4833      	ldr	r0, [pc, #204]	; (8007730 <_printf_i+0x240>)
 8007664:	2778      	movs	r7, #120	; 0x78
 8007666:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800766a:	6823      	ldr	r3, [r4, #0]
 800766c:	6829      	ldr	r1, [r5, #0]
 800766e:	061f      	lsls	r7, r3, #24
 8007670:	f851 6b04 	ldr.w	r6, [r1], #4
 8007674:	d402      	bmi.n	800767c <_printf_i+0x18c>
 8007676:	065f      	lsls	r7, r3, #25
 8007678:	bf48      	it	mi
 800767a:	b2b6      	uxthmi	r6, r6
 800767c:	07df      	lsls	r7, r3, #31
 800767e:	bf48      	it	mi
 8007680:	f043 0320 	orrmi.w	r3, r3, #32
 8007684:	6029      	str	r1, [r5, #0]
 8007686:	bf48      	it	mi
 8007688:	6023      	strmi	r3, [r4, #0]
 800768a:	b91e      	cbnz	r6, 8007694 <_printf_i+0x1a4>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	f023 0320 	bic.w	r3, r3, #32
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	2310      	movs	r3, #16
 8007696:	e7a7      	b.n	80075e8 <_printf_i+0xf8>
 8007698:	4824      	ldr	r0, [pc, #144]	; (800772c <_printf_i+0x23c>)
 800769a:	e7e4      	b.n	8007666 <_printf_i+0x176>
 800769c:	4615      	mov	r5, r2
 800769e:	e7bd      	b.n	800761c <_printf_i+0x12c>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	6826      	ldr	r6, [r4, #0]
 80076a4:	6961      	ldr	r1, [r4, #20]
 80076a6:	1d18      	adds	r0, r3, #4
 80076a8:	6028      	str	r0, [r5, #0]
 80076aa:	0635      	lsls	r5, r6, #24
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	d501      	bpl.n	80076b4 <_printf_i+0x1c4>
 80076b0:	6019      	str	r1, [r3, #0]
 80076b2:	e002      	b.n	80076ba <_printf_i+0x1ca>
 80076b4:	0670      	lsls	r0, r6, #25
 80076b6:	d5fb      	bpl.n	80076b0 <_printf_i+0x1c0>
 80076b8:	8019      	strh	r1, [r3, #0]
 80076ba:	2300      	movs	r3, #0
 80076bc:	6123      	str	r3, [r4, #16]
 80076be:	4615      	mov	r5, r2
 80076c0:	e7bc      	b.n	800763c <_printf_i+0x14c>
 80076c2:	682b      	ldr	r3, [r5, #0]
 80076c4:	1d1a      	adds	r2, r3, #4
 80076c6:	602a      	str	r2, [r5, #0]
 80076c8:	681d      	ldr	r5, [r3, #0]
 80076ca:	6862      	ldr	r2, [r4, #4]
 80076cc:	2100      	movs	r1, #0
 80076ce:	4628      	mov	r0, r5
 80076d0:	f7f8 fdb6 	bl	8000240 <memchr>
 80076d4:	b108      	cbz	r0, 80076da <_printf_i+0x1ea>
 80076d6:	1b40      	subs	r0, r0, r5
 80076d8:	6060      	str	r0, [r4, #4]
 80076da:	6863      	ldr	r3, [r4, #4]
 80076dc:	6123      	str	r3, [r4, #16]
 80076de:	2300      	movs	r3, #0
 80076e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076e4:	e7aa      	b.n	800763c <_printf_i+0x14c>
 80076e6:	6923      	ldr	r3, [r4, #16]
 80076e8:	462a      	mov	r2, r5
 80076ea:	4649      	mov	r1, r9
 80076ec:	4640      	mov	r0, r8
 80076ee:	47d0      	blx	sl
 80076f0:	3001      	adds	r0, #1
 80076f2:	d0ad      	beq.n	8007650 <_printf_i+0x160>
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	079b      	lsls	r3, r3, #30
 80076f8:	d413      	bmi.n	8007722 <_printf_i+0x232>
 80076fa:	68e0      	ldr	r0, [r4, #12]
 80076fc:	9b03      	ldr	r3, [sp, #12]
 80076fe:	4298      	cmp	r0, r3
 8007700:	bfb8      	it	lt
 8007702:	4618      	movlt	r0, r3
 8007704:	e7a6      	b.n	8007654 <_printf_i+0x164>
 8007706:	2301      	movs	r3, #1
 8007708:	4632      	mov	r2, r6
 800770a:	4649      	mov	r1, r9
 800770c:	4640      	mov	r0, r8
 800770e:	47d0      	blx	sl
 8007710:	3001      	adds	r0, #1
 8007712:	d09d      	beq.n	8007650 <_printf_i+0x160>
 8007714:	3501      	adds	r5, #1
 8007716:	68e3      	ldr	r3, [r4, #12]
 8007718:	9903      	ldr	r1, [sp, #12]
 800771a:	1a5b      	subs	r3, r3, r1
 800771c:	42ab      	cmp	r3, r5
 800771e:	dcf2      	bgt.n	8007706 <_printf_i+0x216>
 8007720:	e7eb      	b.n	80076fa <_printf_i+0x20a>
 8007722:	2500      	movs	r5, #0
 8007724:	f104 0619 	add.w	r6, r4, #25
 8007728:	e7f5      	b.n	8007716 <_printf_i+0x226>
 800772a:	bf00      	nop
 800772c:	08008729 	.word	0x08008729
 8007730:	0800873a 	.word	0x0800873a

08007734 <__malloc_lock>:
 8007734:	4801      	ldr	r0, [pc, #4]	; (800773c <__malloc_lock+0x8>)
 8007736:	f7ff bc65 	b.w	8007004 <__retarget_lock_acquire_recursive>
 800773a:	bf00      	nop
 800773c:	20005030 	.word	0x20005030

08007740 <__malloc_unlock>:
 8007740:	4801      	ldr	r0, [pc, #4]	; (8007748 <__malloc_unlock+0x8>)
 8007742:	f7ff bc60 	b.w	8007006 <__retarget_lock_release_recursive>
 8007746:	bf00      	nop
 8007748:	20005030 	.word	0x20005030

0800774c <_realloc_r>:
 800774c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007750:	4680      	mov	r8, r0
 8007752:	4614      	mov	r4, r2
 8007754:	460e      	mov	r6, r1
 8007756:	b921      	cbnz	r1, 8007762 <_realloc_r+0x16>
 8007758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800775c:	4611      	mov	r1, r2
 800775e:	f7ff bdd9 	b.w	8007314 <_malloc_r>
 8007762:	b92a      	cbnz	r2, 8007770 <_realloc_r+0x24>
 8007764:	f000 f84c 	bl	8007800 <_free_r>
 8007768:	4625      	mov	r5, r4
 800776a:	4628      	mov	r0, r5
 800776c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007770:	f000 f892 	bl	8007898 <_malloc_usable_size_r>
 8007774:	4284      	cmp	r4, r0
 8007776:	4607      	mov	r7, r0
 8007778:	d802      	bhi.n	8007780 <_realloc_r+0x34>
 800777a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800777e:	d812      	bhi.n	80077a6 <_realloc_r+0x5a>
 8007780:	4621      	mov	r1, r4
 8007782:	4640      	mov	r0, r8
 8007784:	f7ff fdc6 	bl	8007314 <_malloc_r>
 8007788:	4605      	mov	r5, r0
 800778a:	2800      	cmp	r0, #0
 800778c:	d0ed      	beq.n	800776a <_realloc_r+0x1e>
 800778e:	42bc      	cmp	r4, r7
 8007790:	4622      	mov	r2, r4
 8007792:	4631      	mov	r1, r6
 8007794:	bf28      	it	cs
 8007796:	463a      	movcs	r2, r7
 8007798:	f7ff fc36 	bl	8007008 <memcpy>
 800779c:	4631      	mov	r1, r6
 800779e:	4640      	mov	r0, r8
 80077a0:	f000 f82e 	bl	8007800 <_free_r>
 80077a4:	e7e1      	b.n	800776a <_realloc_r+0x1e>
 80077a6:	4635      	mov	r5, r6
 80077a8:	e7df      	b.n	800776a <_realloc_r+0x1e>

080077aa <memmove>:
 80077aa:	4288      	cmp	r0, r1
 80077ac:	b510      	push	{r4, lr}
 80077ae:	eb01 0402 	add.w	r4, r1, r2
 80077b2:	d902      	bls.n	80077ba <memmove+0x10>
 80077b4:	4284      	cmp	r4, r0
 80077b6:	4623      	mov	r3, r4
 80077b8:	d807      	bhi.n	80077ca <memmove+0x20>
 80077ba:	1e43      	subs	r3, r0, #1
 80077bc:	42a1      	cmp	r1, r4
 80077be:	d008      	beq.n	80077d2 <memmove+0x28>
 80077c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077c4:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077c8:	e7f8      	b.n	80077bc <memmove+0x12>
 80077ca:	4402      	add	r2, r0
 80077cc:	4601      	mov	r1, r0
 80077ce:	428a      	cmp	r2, r1
 80077d0:	d100      	bne.n	80077d4 <memmove+0x2a>
 80077d2:	bd10      	pop	{r4, pc}
 80077d4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077d8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077dc:	e7f7      	b.n	80077ce <memmove+0x24>
	...

080077e0 <_sbrk_r>:
 80077e0:	b538      	push	{r3, r4, r5, lr}
 80077e2:	4d06      	ldr	r5, [pc, #24]	; (80077fc <_sbrk_r+0x1c>)
 80077e4:	2300      	movs	r3, #0
 80077e6:	4604      	mov	r4, r0
 80077e8:	4608      	mov	r0, r1
 80077ea:	602b      	str	r3, [r5, #0]
 80077ec:	f7f9 ffd0 	bl	8001790 <_sbrk>
 80077f0:	1c43      	adds	r3, r0, #1
 80077f2:	d102      	bne.n	80077fa <_sbrk_r+0x1a>
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	b103      	cbz	r3, 80077fa <_sbrk_r+0x1a>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	bd38      	pop	{r3, r4, r5, pc}
 80077fc:	2000503c 	.word	0x2000503c

08007800 <_free_r>:
 8007800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007802:	2900      	cmp	r1, #0
 8007804:	d044      	beq.n	8007890 <_free_r+0x90>
 8007806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f1a1 0404 	sub.w	r4, r1, #4
 8007812:	bfb8      	it	lt
 8007814:	18e4      	addlt	r4, r4, r3
 8007816:	f7ff ff8d 	bl	8007734 <__malloc_lock>
 800781a:	4a1e      	ldr	r2, [pc, #120]	; (8007894 <_free_r+0x94>)
 800781c:	9801      	ldr	r0, [sp, #4]
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	b933      	cbnz	r3, 8007830 <_free_r+0x30>
 8007822:	6063      	str	r3, [r4, #4]
 8007824:	6014      	str	r4, [r2, #0]
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800782c:	f7ff bf88 	b.w	8007740 <__malloc_unlock>
 8007830:	42a3      	cmp	r3, r4
 8007832:	d908      	bls.n	8007846 <_free_r+0x46>
 8007834:	6825      	ldr	r5, [r4, #0]
 8007836:	1961      	adds	r1, r4, r5
 8007838:	428b      	cmp	r3, r1
 800783a:	bf01      	itttt	eq
 800783c:	6819      	ldreq	r1, [r3, #0]
 800783e:	685b      	ldreq	r3, [r3, #4]
 8007840:	1949      	addeq	r1, r1, r5
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	e7ed      	b.n	8007822 <_free_r+0x22>
 8007846:	461a      	mov	r2, r3
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b10b      	cbz	r3, 8007850 <_free_r+0x50>
 800784c:	42a3      	cmp	r3, r4
 800784e:	d9fa      	bls.n	8007846 <_free_r+0x46>
 8007850:	6811      	ldr	r1, [r2, #0]
 8007852:	1855      	adds	r5, r2, r1
 8007854:	42a5      	cmp	r5, r4
 8007856:	d10b      	bne.n	8007870 <_free_r+0x70>
 8007858:	6824      	ldr	r4, [r4, #0]
 800785a:	4421      	add	r1, r4
 800785c:	1854      	adds	r4, r2, r1
 800785e:	42a3      	cmp	r3, r4
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	d1e0      	bne.n	8007826 <_free_r+0x26>
 8007864:	681c      	ldr	r4, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	440c      	add	r4, r1
 800786c:	6014      	str	r4, [r2, #0]
 800786e:	e7da      	b.n	8007826 <_free_r+0x26>
 8007870:	d902      	bls.n	8007878 <_free_r+0x78>
 8007872:	230c      	movs	r3, #12
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	e7d6      	b.n	8007826 <_free_r+0x26>
 8007878:	6825      	ldr	r5, [r4, #0]
 800787a:	1961      	adds	r1, r4, r5
 800787c:	428b      	cmp	r3, r1
 800787e:	bf04      	itt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	6063      	str	r3, [r4, #4]
 8007886:	bf04      	itt	eq
 8007888:	1949      	addeq	r1, r1, r5
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6054      	str	r4, [r2, #4]
 800788e:	e7ca      	b.n	8007826 <_free_r+0x26>
 8007890:	b003      	add	sp, #12
 8007892:	bd30      	pop	{r4, r5, pc}
 8007894:	20005034 	.word	0x20005034

08007898 <_malloc_usable_size_r>:
 8007898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800789c:	1f18      	subs	r0, r3, #4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	bfbc      	itt	lt
 80078a2:	580b      	ldrlt	r3, [r1, r0]
 80078a4:	18c0      	addlt	r0, r0, r3
 80078a6:	4770      	bx	lr

080078a8 <_init>:
 80078a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078aa:	bf00      	nop
 80078ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ae:	bc08      	pop	{r3}
 80078b0:	469e      	mov	lr, r3
 80078b2:	4770      	bx	lr

080078b4 <_fini>:
 80078b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b6:	bf00      	nop
 80078b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ba:	bc08      	pop	{r3}
 80078bc:	469e      	mov	lr, r3
 80078be:	4770      	bx	lr
